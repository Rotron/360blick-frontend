/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.SceneExporter = function () {};

THREE.SceneExporter.prototype = {

    constructor: THREE.SceneExporter,

    parse: function ( scene ) {

        var position = Vector3String( scene.position );
        var rotation = Vector3String( scene.rotation );
        var scale = Vector3String( scene.scale );

        var nobjects = 0;
        var ngeometries = 0;
        var nmaterials = 0;
        var ntextures = 0;

        var objectsArray = [];
        var geometriesArray = [];
        var materialsArray = [];
        var texturesArray = [];
        var fogsArray = [];

        var geometriesMap = {};
        var materialsMap = {};
        var texturesMap = {};

        // extract objects, geometries, materials, textures

        var checkTexture = function ( map ) {

            if ( ! map ) return;

            if ( ! ( map.id in texturesMap ) ) {

                texturesMap[ map.id ] = true;
                texturesArray.push( TextureString( map ) );
                ntextures += 1;

            }

        };

        var linesArray = [];

        function createObjectsList( object, pad ) {

            for ( var i = 0; i < object.children.length; i ++ ) {

                var node = object.children[ i ];

                if ( node instanceof THREE.Mesh ) {

                    linesArray.push( MeshString( node, pad ) );
                    nobjects += 1;

                    if ( ! ( node.geometry.id in geometriesMap ) ) {

                        geometriesMap[ node.geometry.id ] = true;
                        geometriesArray.push( GeometryString( node.geometry ) );
                        ngeometries += 1;

                    }

                    if ( ! ( node.material.id in materialsMap ) ) {

                        materialsMap[ node.material.id ] = true;
                        materialsArray.push( MaterialString( node.material ) );
                        nmaterials += 1;

                        checkTexture( node.material.map );
                        checkTexture( node.material.envMap );
                        checkTexture( node.material.lightMap );
                        checkTexture( node.material.specularMap );
                        checkTexture( node.material.bumpMap );
                        checkTexture( node.material.normalMap );

                    }

                } else if ( node instanceof THREE.Light ) {

                    linesArray.push( LightString( node, pad ) );
                    nobjects += 1;

                } else if ( node instanceof THREE.Camera ) {

                    linesArray.push( CameraString( node, pad ) );
                    nobjects += 1;

                } else if ( node instanceof THREE.Object3D ) {

                    linesArray.push( ObjectString( node, pad ) );
                    nobjects += 1;

                }

                if ( node.children.length > 0 ) {

                    linesArray.push( PaddingString( pad + 1 ) + '\t\t"children" : {' );

                }

                createObjectsList( node, pad + 2 );

                if ( node.children.length > 0 ) {

                    linesArray.push( PaddingString( pad + 1 ) + "\t\t}" );

                }

                linesArray.push( PaddingString( pad ) + "\t\t}" + ( i < object.children.length - 1 ? ",\n" : "" ) );

            }

        }

        createObjectsList( scene, 0 );

        var objects = linesArray.join( "\n" );

        // extract fog

        if ( scene.fog ) {

            fogsArray.push( FogString( scene.fog ) );

        }

        // generate sections

        var geometries = generateMultiLineString( geometriesArray, ",\n\n\t" );
        var materials = generateMultiLineString( materialsArray, ",\n\n\t" );
        var textures = generateMultiLineString( texturesArray, ",\n\n\t" );
        var fogs = generateMultiLineString( fogsArray, ",\n\n\t" );

        // generate defaults

        var activeCamera = null;

        scene.traverse( function ( node ) {

            if ( node instanceof THREE.Camera && node.userData.active ) {

                activeCamera = node;

            }

        } );

        var defcamera = LabelString( activeCamera ? getObjectName( activeCamera ) : "" );
        var deffog = LabelString( scene.fog ? getFogName( scene.fog ) : "" );

        // templates

        function Vector2String( v ) {

            return "[" + v.x + "," + v.y + "]";

        }

        function Vector3String( v ) {

            return "[" + v.x + "," + v.y + "," + v.z + "]";

        }

        function ColorString( c ) {

            return "[" + c.r.toFixed( 3 ) + "," + c.g.toFixed( 3 ) + "," + c.b.toFixed( 3 ) + "]";

        }

        function LabelString( s ) {

            return '"' + s + '"';

        }

        function NumConstantString( c ) {

            var constants = [ "NearestFilter", "NearestMipMapNearestFilter", "NearestMipMapLinearFilter",
                "LinearFilter", "LinearMipMapNearestFilter", "LinearMipMapLinearFilter" ];

            for ( var i = 0; i < constants.length; i ++ ) {

                if ( THREE[ constants[ i ] ] === c ) return LabelString( constants[ i ] );

            };

            return "";

        }

        function PaddingString( n ) {

            var output = "";

            for ( var i = 0; i < n; i ++ ) output += "\t";

            return output;

        }


        //

        function LightString( o, n ) {

            if ( o instanceof THREE.AmbientLight ) {

                var output = [

                    '\t\t' + LabelString( getObjectName( o ) ) + ' : {',
                    '	"type"  : "AmbientLight",',
                    '	"color" : ' + o.color.getHex() + ( o.children.length ? ',' : '' )

                ];

            } else if ( o instanceof THREE.DirectionalLight ) {

                var output = [

                    '\t\t' + LabelString( getObjectName( o ) ) + ' : {',
                    '	"type"      : "DirectionalLight",',
                    '	"color"     : ' + o.color.getHex() + ',',
                    '	"intensity" : ' + o.intensity + ',',
                    '	"direction" : ' + Vector3String( o.position ) + ',',
                    '	"target"    : ' + LabelString( getObjectName( o.target ) ) + ( o.children.length ? ',' : '' )

                ];

            } else if ( o instanceof THREE.PointLight ) {

                var output = [

                    '\t\t' + LabelString( getObjectName( o ) ) + ' : {',
                    '	"type"           : "PointLight",',
                    '	"color"          : ' + o.color.getHex() + ',',
                    '	"intensity"      : ' + o.intensity + ',',
                    '	"position"       : ' + Vector3String( o.position ) + ',',
                    '	"decay"          : ' + o.decay + ',',
                    '	"distance"       : ' + o.distance + ( o.children.length ? ',' : '' )

                ];

            } else if ( o instanceof THREE.SpotLight ) {

                var output = [

                    '\t\t' + LabelString( getObjectName( o ) ) + ' : {',
                    '	"type"           : "SpotLight",',
                    '	"color"          : ' + o.color.getHex() + ',',
                    '	"intensity"      : ' + o.intensity + ',',
                    '	"position"       : ' + Vector3String( o.position ) + ',',
                    '	"distance"       : ' + o.distance + ',',
                    '	"angle"          : ' + o.angle + ',',
                    '	"exponent"       : ' + o.exponent + ',',
                    '	"decay"          : ' + o.decay + ',',
                    '	"target"         : ' + LabelString( getObjectName( o.target ) ) + ( o.children.length ? ',' : '' )

                ];

            } else if ( o instanceof THREE.HemisphereLight ) {

                var output = [

                    '\t\t' + LabelString( getObjectName( o ) ) + ' : {',
                    '	"type"        : "HemisphereLight",',
                    '	"skyColor"    : ' + o.color.getHex() + ',',
                    '	"groundColor" : ' + o.groundColor.getHex() + ',',
                    '	"intensity"   : ' + o.intensity + ',',
                    '	"position"    : ' + Vector3String( o.position ) + ( o.children.length ? ',' : '' )

                ];

            } else {

                var output = [];

            }

            return generateMultiLineString( output, '\n\t\t', n );

        }

        function CameraString( o, n ) {

            if ( o instanceof THREE.PerspectiveCamera ) {

                var output = [

                    '\t\t' + LabelString( getObjectName( o ) ) + ' : {',
                    '	"type"     : "PerspectiveCamera",',
                    '	"fov"      : ' + o.fov + ',',
                    '	"aspect"   : ' + o.aspect + ',',
                    '	"near"     : ' + o.near + ',',
                    '	"far"      : ' + o.far + ',',
                    '	"position" : ' + Vector3String( o.position ) + ( o.children.length ? ',' : '' )

                ];

            } else if ( o instanceof THREE.OrthographicCamera ) {

                var output = [

                    '\t\t' + LabelString( getObjectName( o ) ) + ' : {',
                    '	"type"     : "OrthographicCamera",',
                    '	"left"     : ' + o.left + ',',
                    '	"right"    : ' + o.right + ',',
                    '	"top"      : ' + o.top + ',',
                    '	"bottom"   : ' + o.bottom + ',',
                    '	"near"     : ' + o.near + ',',
                    '	"far"      : ' + o.far + ',',
                    '	"position" : ' + Vector3String( o.position ) + ( o.children.length ? ',' : '' )

                ];

            } else {

                var output = [];

            }

            return generateMultiLineString( output, '\n\t\t', n );

        }

        function ObjectString( o, n ) {

            var output = [

                '\t\t' + LabelString( getObjectName( o ) ) + ' : {',
                '	"position" : ' + Vector3String( o.position ) + ',',
                '	"rotation" : ' + Vector3String( o.rotation ) + ',',
                '	"scale"	   : ' + Vector3String( o.scale ) + ',',
                '	"visible"  : ' + o.visible + ( o.children.length ? ',' : '' )

            ];

            return generateMultiLineString( output, '\n\t\t', n );

        }

        function MeshString( o, n ) {

            var output = [

                '\t\t' + LabelString( getObjectName( o ) ) + ' : {',
                '	"geometry" : ' + LabelString( getGeometryName( o.geometry ) ) + ',',
                '	"material" : ' + LabelString( getMaterialName( o.material ) ) + ',',
                '	"position" : ' + Vector3String( o.position ) + ',',
                '	"rotation" : ' + Vector3String( o.rotation ) + ',',
                '	"scale"	   : ' + Vector3String( o.scale ) + ',',
                '	"visible"  : ' + o.visible + ( o.children.length ? ',' : '' )

            ];

            return generateMultiLineString( output, '\n\t\t', n );

        }

        //

        function GeometryString( g ) {

            if ( g instanceof THREE.SphereGeometry ) {

                var output = [

                    '\t' + LabelString( getGeometryName( g ) ) + ': {',
                    '	"type"    : "sphere",',
                    '	"radius"  : ' 		 + g.parameters.radius + ',',
                    '	"widthSegments"  : ' + g.parameters.widthSegments + ',',
                    '	"heightSegments" : ' + g.parameters.heightSegments,
                    '}'

                ];

            } else if ( g instanceof THREE.BoxGeometry ) {

                var output = [

                    '\t' + LabelString( getGeometryName( g ) ) + ': {',
                    '	"type"    : "cube",',
                    '	"width"  : '  + g.parameters.width  + ',',
                    '	"height"  : ' + g.parameters.height + ',',
                    '	"depth"  : '  + g.parameters.depth  + ',',
                    '	"widthSegments"  : ' + g.widthSegments + ',',
                    '	"heightSegments" : ' + g.heightSegments + ',',
                    '	"depthSegments" : '  + g.depthSegments,
                    '}'

                ];

            } else if ( g instanceof THREE.PlaneGeometry ) {

                var output = [

                    '\t' + LabelString( getGeometryName( g ) ) + ': {',
                    '	"type"    : "plane",',
                    '	"width"  : '  + g.width  + ',',
                    '	"height"  : ' + g.height + ',',
                    '	"widthSegments"  : ' + g.widthSegments + ',',
                    '	"heightSegments" : ' + g.heightSegments,
                    '}'

                ];

            } else if ( g instanceof THREE.Geometry ) {

                if ( g.sourceType === "ascii" || g.sourceType === "ctm" || g.sourceType === "stl" || g.sourceType === "vtk" ) {

                    var output = [

                        '\t' + LabelString( getGeometryName( g ) ) + ': {',
                        '	"type" : ' + LabelString( g.sourceType ) + ',',
                        '	"url"  : ' + LabelString( g.sourceFile ),
                        '}'

                    ];

                } else {

                    var output = [];

                }

            } else {

                var output = [];

            }

            return generateMultiLineString( output, '\n\t\t' );

        }

        function MaterialString( m ) {

            if ( m instanceof THREE.MeshBasicMaterial ) {

                var output = [

                    '\t' + LabelString( getMaterialName( m ) ) + ': {',
                    '	"type"    : "MeshBasicMaterial",',
                    '	"parameters"  : {',
                    '		"color"  : ' 	+ m.color.getHex() + ',',

                    m.map ? 		'		"map" : ' + LabelString( getTextureName( m.map ) ) + ',' : '',
                    m.envMap ? 		'		"envMap" : ' + LabelString( getTextureName( m.envMap ) ) + ',' : '',
                    m.specularMap ? '		"specularMap" : ' + LabelString( getTextureName( m.specularMap ) ) + ',' : '',
                    m.lightMap ? 	'		"lightMap" : ' + LabelString( getTextureName( m.lightMap ) ) + ',' : '',

                    '		"reflectivity"  : ' + m.reflectivity + ',',
                    '		"transparent" : ' + m.transparent + ',',
                    '		"opacity" : ' 	+ m.opacity + ',',
                    '		"wireframe" : ' + m.wireframe + ',',
                    '		"wireframeLinewidth" : ' + m.wireframeLinewidth,
                    '	}',
                    '}'

                ];


            } else if ( m instanceof THREE.MeshLambertMaterial ) {

                var output = [

                    '\t' + LabelString( getMaterialName( m ) ) + ': {',
                    '	"type"    : "MeshLambertMaterial",',
                    '	"parameters"  : {',
                    '		"color"  : ' 	+ m.color.getHex() + ',',
                    '		"emissive"  : ' + m.emissive.getHex() + ',',

                    m.map ? 		'		"map" : ' + LabelString( getTextureName( m.map ) ) + ',' : '',
                    m.envMap ? 		'		"envMap" : ' + LabelString( getTextureName( m.envMap ) ) + ',' : '',
                    m.specularMap ? '		"specularMap" : ' + LabelString( getTextureName( m.specularMap ) ) + ',' : '',
                    m.lightMap ? 	'		"lightMap" : ' + LabelString( getTextureName( m.lightMap ) ) + ',' : '',

                    '		"reflectivity"  : ' + m.reflectivity + ',',
                    '		"transparent" : ' + m.transparent + ',',
                    '		"opacity" : ' 	+ m.opacity + ',',
                    '		"wireframe" : ' + m.wireframe + ',',
                    '		"wireframeLinewidth" : ' + m.wireframeLinewidth,
                    '	}',
                    '}'

                ];

            } else if ( m instanceof THREE.MeshPhongMaterial ) {

                var output = [

                    '\t' + LabelString( getMaterialName( m ) ) + ': {',
                    '	"type"    : "MeshPhongMaterial",',
                    '	"parameters"  : {',
                    '		"color"  : ' 	+ m.color.getHex() + ',',
                    '		"emissive"  : ' + m.emissive.getHex() + ',',
                    '		"specular"  : ' + m.specular.getHex() + ',',
                    '		"shininess" : ' + m.shininess + ',',

                    m.map ? 		'		"map" : ' + LabelString( getTextureName( m.map ) ) + ',' : '',
                    m.envMap ? 		'		"envMap" : ' + LabelString( getTextureName( m.envMap ) ) + ',' : '',
                    m.specularMap ? '		"specularMap" : ' + LabelString( getTextureName( m.specularMap ) ) + ',' : '',
                    m.lightMap ? 	'		"lightMap" : ' + LabelString( getTextureName( m.lightMap ) ) + ',' : '',
                    m.normalMap ? 	'		"normalMap" : ' + LabelString( getTextureName( m.normalMap ) ) + ',' : '',
                    m.bumpMap ? 	'		"bumpMap" : ' + LabelString( getTextureName( m.bumpMap ) ) + ',' : '',

                    '		"bumpScale"  : ' + m.bumpScale + ',',
                    '		"reflectivity"  : ' + m.reflectivity + ',',
                    '		"transparent" : ' + m.transparent + ',',
                    '		"opacity" : ' 	+ m.opacity + ',',
                    '		"wireframe" : ' + m.wireframe + ',',
                    '		"wireframeLinewidth" : ' + m.wireframeLinewidth,
                    '	}',
                    '}'

                ];

            } else if ( m instanceof THREE.MeshDepthMaterial ) {

                var output = [

                    '\t' + LabelString( getMaterialName( m ) ) + ': {',
                    '	"type"    : "MeshDepthMaterial",',
                    '	"parameters"  : {',
                    '		"transparent" : ' + m.transparent + ',',
                    '		"opacity" : ' 	+ m.opacity + ',',
                    '		"wireframe" : ' + m.wireframe + ',',
                    '		"wireframeLinewidth" : ' + m.wireframeLinewidth,
                    '	}',
                    '}'

                ];

            } else if ( m instanceof THREE.MeshNormalMaterial ) {

                var output = [

                    '\t' + LabelString( getMaterialName( m ) ) + ': {',
                    '	"type"    : "MeshNormalMaterial",',
                    '	"parameters"  : {',
                    '		"transparent" : ' + m.transparent + ',',
                    '		"opacity" : ' 	+ m.opacity + ',',
                    '		"wireframe" : ' + m.wireframe + ',',
                    '		"wireframeLinewidth" : ' + m.wireframeLinewidth,
                    '	}',
                    '}'

                ];

            } else if ( m instanceof THREE.MeshFaceMaterial ) {

                var output = [

                    '\t' + LabelString( getMaterialName( m ) ) + ': {',
                    '	"type"    : "MeshFaceMaterial",',
                    '	"parameters"  : {}',
                    '}'

                ];

            }

            return generateMultiLineString( output, '\n\t\t' );

        }

        function TextureString( t ) {

            // here would be also an option to use data URI
            // with embedded image from "t.image.src"
            // (that's a side effect of using FileReader to load images)

            var output = [

                '\t' + LabelString( getTextureName( t ) ) + ': {',
                '	"url"    : "' + t.sourceFile + '",',
                '	"repeat" : ' + Vector2String( t.repeat ) + ',',
                '	"offset" : ' + Vector2String( t.offset ) + ',',
                '	"magFilter" : ' + NumConstantString( t.magFilter ) + ',',
                '	"minFilter" : ' + NumConstantString( t.minFilter ) + ',',
                '	"anisotropy" : ' + t.anisotropy,
                '}'

            ];

            return generateMultiLineString( output, '\n\t\t' );

        }

        //

        function FogString( f ) {

            if ( f instanceof THREE.Fog ) {

                var output = [

                    '\t' + LabelString( getFogName( f ) ) + ': {',
                    '	"type"  : "linear",',
                    '	"color" : ' + ColorString( f.color ) + ',',
                    '	"near"  : '  + f.near + ',',
                    '	"far"   : '    + f.far,
                    '}'

                ];

            } else if ( f instanceof THREE.FogExp2 ) {

                var output = [

                    '\t' + LabelString( getFogName( f ) ) + ': {',
                    '	"type"    : "exp2",',
                    '	"color"   : '  + ColorString( f.color ) + ',',
                    '	"density" : ' + f.density,
                    '}'

                ];

            } else {

                var output = [];

            }

            return generateMultiLineString( output, '\n\t\t' );

        }

        //

        function generateMultiLineString( lines, separator, padding ) {

            var cleanLines = [];

            for ( var i = 0; i < lines.length; i ++ ) {

                var line = lines[ i ];

                if ( line ) {

                    if ( padding ) line = PaddingString( padding ) + line;
                    cleanLines.push(  line );

                }

            }

            return cleanLines.join( separator );

        }

        function getObjectName( o ) {

            return o.name ? o.name : "Object_" + o.id;

        }

        function getGeometryName( g ) {

            return g.name ? g.name : "Geometry_" + g.id;

        }

        function getMaterialName( m ) {

            return m.name ? m.name : "Material_" + m.id;

        }

        function getTextureName( t ) {

            return t.name ? t.name : "Texture_" + t.id;

        }

        function getFogName( f ) {

            return f.name ? f.name : "Default fog";

        }

        //

        var output = [
            '{',
            '	"metadata": {',
            '		"formatVersion" : 3.2,',
            '		"type"		: "scene",',
            '		"generatedBy"	: "SceneExporter",',
            '		"objects"       : ' + nobjects + ',',
            '		"geometries"    : ' + ngeometries + ',',
            '		"materials"     : ' + nmaterials + ',',
            '		"textures"      : ' + ntextures,
            '	},',
            '',
            '	"urlBaseType": "relativeToScene",',
            '',

            '	"objects" :',
            '	{',
            objects,
            '	},',
            '',

            '	"geometries" :',
            '	{',
            '\t' + 	geometries,
            '	},',
            '',

            '	"materials" :',
            '	{',
            '\t' + 	materials,
            '	},',
            '',

            '	"textures" :',
            '	{',
            '\t' + 	textures,
            '	},',
            '',

            '	"fogs" :',
            '	{',
            '\t' + 	fogs,
            '	},',
            '',

            '	"transform" :',
            '	{',
            '		"position"  : ' + position + ',',
            '		"rotation"  : ' + rotation + ',',
            '		"scale"     : ' + scale,
            '	},',
            '',
            '	"defaults" :',
            '	{',
            '		"camera"  : ' + defcamera + ',',
            '		"fog"  	  : ' + deffog,
            '	}',
            '}'
        ].join( '\n' );

        return JSON.parse( output );

    }

}
/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.SceneLoader = function ( manager ) {

    this.onLoadStart = function () {};
    this.onLoadProgress = function() {};
    this.onLoadComplete = function () {};

    this.callbackSync = function () {};
    this.callbackProgress = function () {};

    this.geometryHandlers = {};
    this.hierarchyHandlers = {};

    this.addGeometryHandler( "ascii", THREE.JSONLoader );

    this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

};

THREE.SceneLoader.prototype = {

    constructor: THREE.SceneLoader,

    load: function ( url, onLoad, onProgress, onError ) {

        var scope = this;

        var loader = new THREE.XHRLoader( scope.manager );
        loader.setCrossOrigin( this.crossOrigin );
        loader.load( url, function ( text ) {

            scope.parse( JSON.parse( text ), onLoad, url );

        }, onProgress, onError );

    },

    setCrossOrigin: function ( value ) {

        this.crossOrigin = value;

    },

    addGeometryHandler: function ( typeID, loaderClass ) {

        this.geometryHandlers[ typeID ] = { "loaderClass": loaderClass };

    },

    addHierarchyHandler: function ( typeID, loaderClass ) {

        this.hierarchyHandlers[ typeID ] = { "loaderClass": loaderClass };

    },

    parse: function ( json, callbackFinished, url ) {

        var scope = this;

        var urlBase = THREE.Loader.prototype.extractUrlBase( url );

        var geometry, material, camera, fog,
            texture, images, color,
            light, hex, intensity,
            counter_models, counter_textures,
            total_models, total_textures,
            result;

        var target_array = [];

        var data = json;

        // async geometry loaders

        for ( var typeID in this.geometryHandlers ) {

            var loaderClass = this.geometryHandlers[ typeID ][ "loaderClass" ];
            this.geometryHandlers[ typeID ][ "loaderObject" ] = new loaderClass();

        }

        // async hierachy loaders

        for ( var typeID in this.hierarchyHandlers ) {

            var loaderClass = this.hierarchyHandlers[ typeID ][ "loaderClass" ];
            this.hierarchyHandlers[ typeID ][ "loaderObject" ] = new loaderClass();

        }

        counter_models = 0;
        counter_textures = 0;

        result = {

            scene: new THREE.Scene(),
            geometries: {},
            face_materials: {},
            materials: {},
            textures: {},
            objects: {},
            cameras: {},
            lights: {},
            fogs: {},
            empties: {},
            groups: {}

        };

        if ( data.transform ) {

            var position = data.transform.position,
                rotation = data.transform.rotation,
                scale = data.transform.scale;

            if ( position ) {

                result.scene.position.fromArray( position );

            }

            if ( rotation ) {

                result.scene.rotation.fromArray( rotation );

            }

            if ( scale ) {

                result.scene.scale.fromArray( scale );

            }

            if ( position || rotation || scale ) {

                result.scene.updateMatrix();
                result.scene.updateMatrixWorld();

            }

        }

        function get_url( source_url, url_type ) {

            if ( url_type == "relativeToHTML" ) {

                return source_url;

            } else {

                return urlBase + source_url;

            }

        };

        // toplevel loader function, delegates to handle_children

        function handle_objects() {

            handle_children( result.scene, data.objects );

        }

        // handle all the children from the loaded json and attach them to given parent

        function handle_children( parent, children ) {

            var mat, dst, pos, rot, scl, quat;

            for ( var objID in children ) {

                // check by id if child has already been handled,
                // if not, create new object

                var object = result.objects[ objID ];
                var objJSON = children[ objID ];

                if ( object === undefined ) {

                    // meshes

                    if ( objJSON.type && ( objJSON.type in scope.hierarchyHandlers ) ) {

                        if ( objJSON.loading === undefined ) {

                            material = result.materials[ objJSON.material ];

                            objJSON.loading = true;

                            var loader = scope.hierarchyHandlers[ objJSON.type ][ "loaderObject" ];

                            // ColladaLoader

                            if ( loader.options ) {

                                loader.load( get_url( objJSON.url, data.urlBaseType ), create_callback_hierachy( objID, parent, material, objJSON ) );

                                // UTF8Loader
                                // OBJLoader

                            } else {

                                loader.load( get_url( objJSON.url, data.urlBaseType ), create_callback_hierachy( objID, parent, material, objJSON ) );

                            }

                        }

                    } else if ( objJSON.geometry !== undefined ) {

                        geometry = result.geometries[ objJSON.geometry ];

                        // geometry already loaded

                        if ( geometry ) {

                            var needsTangents = false;

                            material = result.materials[ objJSON.material ];
                            needsTangents = material instanceof THREE.ShaderMaterial;

                            pos = objJSON.position;
                            rot = objJSON.rotation;
                            scl = objJSON.scale;
                            mat = objJSON.matrix;
                            quat = objJSON.quaternion;

                            // use materials from the model file
                            // if there is no material specified in the object

                            if ( ! objJSON.material ) {

                                material = new THREE.MeshFaceMaterial( result.face_materials[ objJSON.geometry ] );

                            }

                            // use materials from the model file
                            // if there is just empty face material
                            // (must create new material as each model has its own face material)

                            if ( ( material instanceof THREE.MeshFaceMaterial ) && material.materials.length === 0 ) {

                                material = new THREE.MeshFaceMaterial( result.face_materials[ objJSON.geometry ] );

                            }

                            if ( material instanceof THREE.MeshFaceMaterial ) {

                                for ( var i = 0; i < material.materials.length; i ++ ) {

                                    needsTangents = needsTangents || ( material.materials[ i ] instanceof THREE.ShaderMaterial );

                                }

                            }

                            if ( needsTangents ) {

                                geometry.computeTangents();

                            }

                            if ( objJSON.skin ) {

                                object = new THREE.SkinnedMesh( geometry, material );

                            } else if ( objJSON.morph ) {

                                object = new THREE.MorphAnimMesh( geometry, material );

                                if ( objJSON.duration !== undefined ) {

                                    object.duration = objJSON.duration;

                                }

                                if ( objJSON.time !== undefined ) {

                                    object.time = objJSON.time;

                                }

                                if ( objJSON.mirroredLoop !== undefined ) {

                                    object.mirroredLoop = objJSON.mirroredLoop;

                                }

                                if ( material.morphNormals ) {

                                    geometry.computeMorphNormals();

                                }

                            } else {

                                object = new THREE.Mesh( geometry, material );

                            }

                            object.name = objID;

                            if ( mat ) {

                                object.matrixAutoUpdate = false;
                                object.matrix.set(
                                    mat[0],  mat[1],  mat[2],  mat[3],
                                    mat[4],  mat[5],  mat[6],  mat[7],
                                    mat[8],  mat[9],  mat[10], mat[11],
                                    mat[12], mat[13], mat[14], mat[15]
                                );

                            } else {

                                object.position.fromArray( pos );

                                if ( quat ) {

                                    object.quaternion.fromArray( quat );

                                } else {

                                    object.rotation.fromArray( rot );

                                }

                                object.scale.fromArray( scl );

                            }

                            object.visible = objJSON.visible;
                            object.castShadow = objJSON.castShadow;
                            object.receiveShadow = objJSON.receiveShadow;

                            parent.add( object );

                            result.objects[ objID ] = object;

                        }

                        // lights

                    } else if ( objJSON.type === "AmbientLight" || objJSON.type === "PointLight" ||
                        objJSON.type === "DirectionalLight" || objJSON.type === "SpotLight" ||
                        objJSON.type === "HemisphereLight" || objJSON.type === "AreaLight" ) {

                        var color = objJSON.color;
                        var intensity = objJSON.intensity;
                        var distance = objJSON.distance;
                        var position = objJSON.position;
                        var rotation = objJSON.rotation || [1, 0, 1];
                        console.log(objJSON);


                        switch ( objJSON.type ) {

                            case 'AmbientLight':
                                light = new THREE.AmbientLight( color );
                                break;

                            case 'PointLight':
                                light = new THREE.PointLight( color, intensity, distance );
                                light.position.fromArray( position );
                                break;

                            case 'DirectionalLight':
                                light = new THREE.DirectionalLight( color, intensity );
                                light.position.fromArray( objJSON.direction );
                                break;

                            case 'SpotLight':
                                light = new THREE.SpotLight( color, intensity, distance, 1 );
                                light.angle = objJSON.angle;
                                light.position.fromArray( position );
                                light.target.position.set( position[ 0 ], position[ 1 ] - distance, position[ 2 ] );
                                light.target.position.applyEuler( new THREE.Euler( rotation[ 0 ], rotation[ 1 ], rotation[ 2 ], 'XYZ' ) );
                                break;

                            case 'HemisphereLight':
                                light = new THREE.DirectionalLight( color, intensity, distance );
                                light.target.position.set( position[ 0 ], position[ 1 ] - distance, position[ 2 ] );
                                light.target.position.applyEuler( new THREE.Euler( rotation[ 0 ], rotation[ 1 ], rotation[ 2 ], 'XYZ' ) );
                                break;

                            case 'AreaLight':
                                light = new THREE.AreaLight(color, intensity);
                                light.position.fromArray( position );
                                light.width = objJSON.size;
                                light.height = objJSON.size_y;
                                break;

                        }

                        parent.add( light );

                        light.name = objID;
                        result.lights[ objID ] = light;
                        result.objects[ objID ] = light;

                        // cameras

                    } else if ( objJSON.type === "PerspectiveCamera" || objJSON.type === "OrthographicCamera" ) {

                        pos = objJSON.position;
                        rot = objJSON.rotation;
                        quat = objJSON.quaternion;

                        if ( objJSON.type === "PerspectiveCamera" ) {

                            camera = new THREE.PerspectiveCamera( objJSON.fov, objJSON.aspect, objJSON.near, objJSON.far );

                        } else if ( objJSON.type === "OrthographicCamera" ) {

                            camera = new THREE.OrthographicCamera( objJSON.left, objJSON.right, objJSON.top, objJSON.bottom, objJSON.near, objJSON.far );

                        }

                        camera.name = objID;
                        camera.position.fromArray( pos );

                        if ( quat !== undefined ) {

                            camera.quaternion.fromArray( quat );

                        } else if ( rot !== undefined ) {

                            camera.rotation.fromArray( rot );

                        } else if ( objJSON.target ) {

                            camera.lookAt( new THREE.Vector3().fromArray( objJSON.target ) );

                        }

                        parent.add( camera );

                        result.cameras[ objID ] = camera;
                        result.objects[ objID ] = camera;

                        // pure Object3D

                    } else {

                        pos = objJSON.position;
                        rot = objJSON.rotation;
                        scl = objJSON.scale;
                        quat = objJSON.quaternion;

                        object = new THREE.Object3D();
                        object.name = objID;
                        object.position.fromArray( pos );

                        if ( quat ) {

                            object.quaternion.fromArray( quat );

                        } else {

                            object.rotation.fromArray( rot );

                        }

                        object.scale.fromArray( scl );
                        object.visible = ( objJSON.visible !== undefined ) ? objJSON.visible : false;

                        parent.add( object );

                        result.objects[ objID ] = object;
                        result.empties[ objID ] = object;

                    }

                    if ( object ) {

                        if ( objJSON.userData !== undefined ) {

                            for ( var key in objJSON.userData ) {

                                var value = objJSON.userData[ key ];
                                object.userData[ key ] = value;

                            }

                        }

                        if ( objJSON.groups !== undefined ) {

                            for ( var i = 0; i < objJSON.groups.length; i ++ ) {

                                var groupID = objJSON.groups[ i ];

                                if ( result.groups[ groupID ] === undefined ) {

                                    result.groups[ groupID ] = [];

                                }

                                result.groups[ groupID ].push( objID );

                            }

                        }

                    }

                }

                if ( object !== undefined && objJSON.children !== undefined ) {

                    handle_children( object, objJSON.children );

                }

            }

        };

        function handle_mesh( geo, mat, id ) {

            result.geometries[ id ] = geo;
            result.face_materials[ id ] = mat;
            handle_objects();

        };

        function handle_hierarchy( node, id, parent, material, obj ) {

            var p = obj.position;
            var r = obj.rotation;
            var q = obj.quaternion;
            var s = obj.scale;

            node.position.fromArray( p );

            if ( q ) {

                node.quaternion.fromArray( q );

            } else {

                node.rotation.fromArray( r );

            }

            node.scale.fromArray( s );

            // override children materials
            // if object material was specified in JSON explicitly

            if ( material ) {

                node.traverse( function ( child ) {

                    child.material = material;

                } );

            }

            // override children visibility
            // with root node visibility as specified in JSON

            var visible = ( obj.visible !== undefined ) ? obj.visible : true;

            node.traverse( function ( child ) {

                child.visible = visible;

            } );

            parent.add( node );

            node.name = id;

            result.objects[ id ] = node;
            handle_objects();

        };

        function create_callback_geometry( id ) {

            return function ( geo, mat ) {

                geo.name = id;

                handle_mesh( geo, mat, id );

                counter_models -= 1;

                scope.onLoadComplete();

                async_callback_gate();

            }

        };

        function create_callback_hierachy( id, parent, material, obj ) {

            return function ( event ) {

                var result;

                // loaders which use EventDispatcher

                if ( event.content ) {

                    result = event.content;

                    // ColladaLoader

                } else if ( event.dae ) {

                    result = event.scene;


                    // UTF8Loader

                } else {

                    result = event;

                }

                handle_hierarchy( result, id, parent, material, obj );

                counter_models -= 1;

                scope.onLoadComplete();

                async_callback_gate();

            }

        };

        function create_callback_embed( id ) {

            return function ( geo, mat ) {

                geo.name = id;

                result.geometries[ id ] = geo;
                result.face_materials[ id ] = mat;

            }

        };

        function async_callback_gate() {

            var progress = {

                totalModels : total_models,
                totalTextures : total_textures,
                loadedModels : total_models - counter_models,
                loadedTextures : total_textures - counter_textures

            };

            scope.callbackProgress( progress, result );

            scope.onLoadProgress();

            if ( counter_models === 0 && counter_textures === 0 ) {

                finalize();
                callbackFinished( result );

            }

        };

        function finalize() {

            // take care of targets which could be asynchronously loaded objects

            for ( var i = 0; i < target_array.length; i ++ ) {

                var ta = target_array[ i ];

                var target = result.objects[ ta.targetName ];

                if ( target ) {

                    ta.object.target = target;

                } else {

                    // if there was error and target of specified name doesn't exist in the scene file
                    // create instead dummy target
                    // (target must be added to scene explicitly as parent is already added)

                    ta.object.target = new THREE.Object3D();
                    result.scene.add( ta.object.target );

                }

                ta.object.target.userData.targetInverse = ta.object;

            }

        };

        var callbackTexture = function ( count ) {

            counter_textures -= count;
            async_callback_gate();

            scope.onLoadComplete();

        };

        // must use this instead of just directly calling callbackTexture
        // because of closure in the calling context loop

        var generateTextureCallback = function ( count ) {

            return function () {

                callbackTexture( count );

            };

        };

        function traverse_json_hierarchy( objJSON, callback ) {

            callback( objJSON );

            if ( objJSON.children !== undefined ) {

                for ( var objChildID in objJSON.children ) {

                    traverse_json_hierarchy( objJSON.children[ objChildID ], callback );

                }

            }

        };

        // first go synchronous elements

        // fogs

        var fogID, fogJSON;

        for ( fogID in data.fogs ) {

            fogJSON = data.fogs[ fogID ];

            if ( fogJSON.type === "linear" ) {

                fog = new THREE.Fog( 0x000000, fogJSON.near, fogJSON.far );

            } else if ( fogJSON.type === "exp2" ) {

                fog = new THREE.FogExp2( 0x000000, fogJSON.density );

            }

            color = fogJSON.color;
            fog.color.setRGB( color[0], color[1], color[2] );

            result.fogs[ fogID ] = fog;

        }

        // now come potentially asynchronous elements

        // geometries

        // count how many geometries will be loaded asynchronously

        var geoID, geoJSON;

        for ( geoID in data.geometries ) {

            geoJSON = data.geometries[ geoID ];

            if ( geoJSON.type in this.geometryHandlers ) {

                counter_models += 1;

                scope.onLoadStart();

            }

        }

        // count how many hierarchies will be loaded asynchronously

        for ( var objID in data.objects ) {

            traverse_json_hierarchy( data.objects[ objID ], function ( objJSON ) {

                if ( objJSON.type && ( objJSON.type in scope.hierarchyHandlers ) ) {

                    counter_models += 1;

                    scope.onLoadStart();

                }

            });

        }

        total_models = counter_models;

        for ( geoID in data.geometries ) {

            geoJSON = data.geometries[ geoID ];

            if ( geoJSON.type === "cube" ) {

                geometry = new THREE.BoxGeometry( geoJSON.width, geoJSON.height, geoJSON.depth, geoJSON.widthSegments, geoJSON.heightSegments, geoJSON.depthSegments );
                geometry.name = geoID;
                result.geometries[ geoID ] = geometry;

            } else if ( geoJSON.type === "plane" ) {

                geometry = new THREE.PlaneGeometry( geoJSON.width, geoJSON.height, geoJSON.widthSegments, geoJSON.heightSegments );
                geometry.name = geoID;
                result.geometries[ geoID ] = geometry;

            } else if ( geoJSON.type === "sphere" ) {

                geometry = new THREE.SphereGeometry( geoJSON.radius, geoJSON.widthSegments, geoJSON.heightSegments );
                geometry.name = geoID;
                result.geometries[ geoID ] = geometry;

            } else if ( geoJSON.type === "cylinder" ) {

                geometry = new THREE.CylinderGeometry( geoJSON.topRad, geoJSON.botRad, geoJSON.height, geoJSON.radSegs, geoJSON.heightSegs );
                geometry.name = geoID;
                result.geometries[ geoID ] = geometry;

            } else if ( geoJSON.type === "torus" ) {

                geometry = new THREE.TorusGeometry( geoJSON.radius, geoJSON.tube, geoJSON.segmentsR, geoJSON.segmentsT );
                geometry.name = geoID;
                result.geometries[ geoID ] = geometry;

            } else if ( geoJSON.type === "icosahedron" ) {

                geometry = new THREE.IcosahedronGeometry( geoJSON.radius, geoJSON.subdivisions );
                geometry.name = geoID;
                result.geometries[ geoID ] = geometry;

            } else if ( geoJSON.type in this.geometryHandlers ) {

                var loader = this.geometryHandlers[ geoJSON.type ][ "loaderObject" ];
                loader.load( get_url( geoJSON.url, data.urlBaseType ), create_callback_geometry( geoID ) );

            } else if ( geoJSON.type === "embedded" ) {

                var modelJson = data.embeds[ geoJSON.id ],
                    texture_path = "";

                // pass metadata along to jsonLoader so it knows the format version

                modelJson.metadata = data.metadata;

                if ( modelJson ) {

                    var jsonLoader = this.geometryHandlers[ "ascii" ][ "loaderObject" ];
                    var model = jsonLoader.parse( modelJson, texture_path );
                    create_callback_embed( geoID )( model.geometry, model.materials );

                }

            }

        }

        // textures

        // count how many textures will be loaded asynchronously

        var textureID, textureJSON;

        for ( textureID in data.textures ) {

            textureJSON = data.textures[ textureID ];

            if ( textureJSON.url instanceof Array ) {

                counter_textures += textureJSON.url.length;

                for ( var n = 0; n < textureJSON.url.length; n ++ ) {

                    scope.onLoadStart();

                }

            } else {

                counter_textures += 1;

                scope.onLoadStart();

            }

        }

        total_textures = counter_textures;

        for ( textureID in data.textures ) {

            textureJSON = data.textures[ textureID ];

            if ( textureJSON.mapping !== undefined && THREE[ textureJSON.mapping ] !== undefined ) {

                textureJSON.mapping = THREE[ textureJSON.mapping ];

            }

            var texture;

            if ( textureJSON.url instanceof Array ) {

                var count = textureJSON.url.length;
                var url_array = [];

                for ( var i = 0; i < count; i ++ ) {

                    url_array[ i ] = get_url( textureJSON.url[ i ], data.urlBaseType );

                }

                var loader = THREE.Loader.Handlers.get( url_array[ 0 ] );

                if ( loader !== null ) {

                    texture = loader.load( url_array, generateTextureCallback( count ) );

                    if ( textureJSON.mapping !== undefined )
                        texture.mapping = textureJSON.mapping;

                } else {

                    texture = THREE.ImageUtils.loadTextureCube( url_array, textureJSON.mapping, generateTextureCallback( count ) );

                }

            } else {

                var fullUrl = get_url( textureJSON.url, data.urlBaseType );
                var textureCallback = generateTextureCallback( 1 );

                var loader = THREE.Loader.Handlers.get( fullUrl );

                if ( loader !== null ) {

                    texture = loader.load( fullUrl, textureCallback );

                } else {

                    texture = new THREE.Texture();
                    loader = new THREE.ImageLoader();

                    ( function ( texture ) {

                        loader.load( fullUrl, function ( image ) {

                            texture.image = image;
                            texture.needsUpdate = true;

                            textureCallback();

                        } );

                    } )( texture )


                }

                if ( textureJSON.mapping !== undefined )
                    texture.mapping = textureJSON.mapping;

                if ( THREE[ textureJSON.minFilter ] !== undefined )
                    texture.minFilter = THREE[ textureJSON.minFilter ];

                if ( THREE[ textureJSON.magFilter ] !== undefined )
                    texture.magFilter = THREE[ textureJSON.magFilter ];

                if ( textureJSON.anisotropy ) texture.anisotropy = textureJSON.anisotropy;

                if ( textureJSON.repeat ) {

                    texture.repeat.set( textureJSON.repeat[ 0 ], textureJSON.repeat[ 1 ] );

                    if ( textureJSON.repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;
                    if ( textureJSON.repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;

                }

                if ( textureJSON.offset ) {

                    texture.offset.set( textureJSON.offset[ 0 ], textureJSON.offset[ 1 ] );

                }

                // handle wrap after repeat so that default repeat can be overriden

                if ( textureJSON.wrap ) {

                    var wrapMap = {
                        "repeat": THREE.RepeatWrapping,
                        "mirror": THREE.MirroredRepeatWrapping
                    }

                    if ( wrapMap[ textureJSON.wrap[ 0 ] ] !== undefined ) texture.wrapS = wrapMap[ textureJSON.wrap[ 0 ] ];
                    if ( wrapMap[ textureJSON.wrap[ 1 ] ] !== undefined ) texture.wrapT = wrapMap[ textureJSON.wrap[ 1 ] ];

                }

            }

            result.textures[ textureID ] = texture;

        }

        // materials

        var matID, matJSON;
        var parID;

        for ( matID in data.materials ) {

            matJSON = data.materials[ matID ];

            for ( parID in matJSON.parameters ) {

                if ( parID === "envMap" || parID === "map" || parID === "lightMap" || parID === "bumpMap" || parID === "normalMap" || parID === "alphaMap" ) {

                    matJSON.parameters[ parID ] = result.textures[ matJSON.parameters[ parID ] ];

                } else if ( parID === "shading" ) {

                    matJSON.parameters[ parID ] = ( matJSON.parameters[ parID ] === "flat" ) ? THREE.FlatShading : THREE.SmoothShading;

                } else if ( parID === "side" ) {

                    if ( matJSON.parameters[ parID ] == "double" ) {

                        matJSON.parameters[ parID ] = THREE.DoubleSide;

                    } else if ( matJSON.parameters[ parID ] == "back" ) {

                        matJSON.parameters[ parID ] = THREE.BackSide;

                    } else {

                        matJSON.parameters[ parID ] = THREE.FrontSide;

                    }

                } else if ( parID === "blending" ) {

                    matJSON.parameters[ parID ] = matJSON.parameters[ parID ] in THREE ? THREE[ matJSON.parameters[ parID ] ] : THREE.NormalBlending;

                } else if ( parID === "combine" ) {

                    matJSON.parameters[ parID ] = matJSON.parameters[ parID ] in THREE ? THREE[ matJSON.parameters[ parID ] ] : THREE.MultiplyOperation;

                } else if ( parID === "vertexColors" ) {

                    if ( matJSON.parameters[ parID ] == "face" ) {

                        matJSON.parameters[ parID ] = THREE.FaceColors;

                        // default to vertex colors if "vertexColors" is anything else face colors or 0 / null / false

                    } else if ( matJSON.parameters[ parID ] ) {

                        matJSON.parameters[ parID ] = THREE.VertexColors;

                    }

                } else if ( parID === "wrapRGB" ) {

                    var v3 = matJSON.parameters[ parID ];
                    matJSON.parameters[ parID ] = new THREE.Vector3( v3[ 0 ], v3[ 1 ], v3[ 2 ] );

                } else if ( parID === "normalScale" ) {

                    var v2 = matJSON.parameters[ parID ];
                    matJSON.parameters[ parID ] = new THREE.Vector2( v2[ 0 ], v2[ 1 ] );

                }

            }

            if ( matJSON.parameters.opacity !== undefined && matJSON.parameters.opacity < 1.0 ) {

                matJSON.parameters.transparent = true;

            }

            material = new THREE[ matJSON.type ]( matJSON.parameters );
            material.name = matID;

            result.materials[ matID ] = material;

        }

        // second pass through all materials to initialize MeshFaceMaterials
        // that could be referring to other materials out of order

        for ( matID in data.materials ) {

            matJSON = data.materials[ matID ];

            if ( matJSON.parameters.materials ) {

                var materialArray = [];

                for ( var i = 0; i < matJSON.parameters.materials.length; i ++ ) {

                    var label = matJSON.parameters.materials[ i ];
                    materialArray.push( result.materials[ label ] );

                }

                result.materials[ matID ].materials = materialArray;

            }

        }

        // objects ( synchronous init of procedural primitives )

        handle_objects();

        // defaults

        if ( result.cameras && data.defaults.camera ) {

            result.currentCamera = result.cameras[ data.defaults.camera ];

        }

        if ( result.fogs && data.defaults.fog ) {

            result.scene.fog = result.fogs[ data.defaults.fog ];

        }

        // synchronous callback

        scope.callbackSync( result );

        // just in case there are no async elements

        async_callback_gate();

    }

}
'use strict';
var app = angular.module('360blickFrontendApp', [
    'ngCookies',
    'ngResource',
    'ngSanitize',
    'ngAnimate',
    'ui.router',
    'angularFileUpload',
    'btford.modal',
    'templates',
    'mdo-angular-cryptography'
]);

app.constant('AUTH_EVENTS', {
    loginSuccess: 'auth-login-success',
    loginFailed: 'auth-login-failed',
    logoutSuccess: 'auth-logout-success',
    logoutFailed: 'auth-logout-failed',
    registerSuccess: 'auth-register-success',
    registerFailed: 'auth-register-failed',
    sessionTimeout: 'auth-session-timeout',
    notAuthenticated: 'auth-not-authenticated',
    notAuthorized: 'auth-not-authorized'
});

app.constant('USER_ROLES', {
    all: '*',
    admin: 'admin',
    editor: 'editor',
    guest: 'guest'
});

app.config(['$stateProvider', '$urlRouterProvider', '$locationProvider', '$httpProvider', 'USER_ROLES',
    function ($stateProvider, $urlRouterProvider, $locationProvider, $httpProvider, USER_ROLES) {

    $httpProvider.defaults.useXDomain = true;
    delete $httpProvider.defaults.headers.common['X-Requested-With'];

    $httpProvider.defaults.useXDomain = true;
    $httpProvider.defaults.withCredentials = true;
    delete $httpProvider.defaults.headers.common["X-Requested-With"];
    $httpProvider.defaults.headers.common["Accept"] = "application/json";
    $httpProvider.defaults.headers.common["Content-Type"] = "application/json";

    $stateProvider
        .state('app', {
            url: "/",
            views: {
                "app": {
                    templateUrl: "landingpage/index.html",
                    controller: "LandingpageController"
                }
            },
            data: {
                authorizedRoles: false
            }
        })
        .state('gettingStarted', {
            url: "/getting-started",
            views: {
                "app": {
                    templateUrl: "gettingStarted/index.html",
                    controller: "GettingStartedController"
                }
            },
            data: {
                authorizedRoles: false
            }
        })
        .state('documentation', {
            url: "/documentation",
            views: {
                "app": {
                    templateUrl: "documentation/index.html",
                    controller: "DocumentationController"
                }
            },
            data: {
                authorizedRoles: false
            }
        })
        .state('register', {
            url: "/register",
            views: {
                "app": {
                    templateUrl: "auth/register.html",
                    controller: "RegisterController"
                }
            },
            data: {
                authorizedRoles: false
            }
        })
        .state('login', {
            url: "/login",
            views: {
                "app": {
                    templateUrl: "auth/login.html",
                    controller: "LoginController"
                }
            },
            data: {
                authorizedRoles: false
            }
        })
        .state('user.scenetemplates', {
            url: "/scenetemplates",
            views: {
                "app": {
                    templateUrl: "user/index.html",
                    controller: "UserController"
                },
                "userContent@user": {
                    templateUrl: "sceneTemplates/sceneTemplates.html",
                    controller: "SceneTemplatesController"
                },
                "subNavigation@user": {
                    templateUrl: "subNavigation/projects.html",
                    controller: "UserProjectsController"
                }
            },
            data: {
                authorizedRoles: [USER_ROLES.admin]
            }
        })
        .state('template', {
            url: "/:username/template/:templateId",
            views: {
                "app": {
                    templateUrl: "editor/editor.html",
                    controller: "EditorController"
                },
                "subNavigation@template": {
                    templateUrl: "subNavigation/editor.html",
                    controller: "EditorController"
                }
            },
            data: {
                authorizedRoles: [USER_ROLES.admin]
            }
        })
        .state('user', {
            url: "/:username",
            views: {
                "app": {
                    templateUrl: "user/index.html",
                    controller: "UserController"
                },
                "userContent@user": {
                    templateUrl: "user/projects.html",
                    controller: "UserProjectsController"
                },
                "subNavigation@user": {
                    templateUrl: "subNavigation/projects.html",
                    controller: "UserProjectsController"
                }
            },
            data: {
                authorizedRoles: [USER_ROLES.admin, USER_ROLES.editor]
            }
        })
        .state('user.settings', {
            url: "/settings",
            views: {
                "userContent@user": {
                    templateUrl: "user/settings.html",
                    controller: "UserSettingsController"
                },
                "subNavigation@user": {
                    templateUrl: "subNavigation/settings.html",
                    controller: "UserSettingsController"
                }
            },
            data: {
                authorizedRoles: [USER_ROLES.admin, USER_ROLES.editor]
            }
        })
        .state('user.settings.account', {
            url: "/account",
            views: {
                "userContent@user": {
                    templateUrl: "user/accountSettings.html",
                    controller: "AccountSettingsController"
                }
            },
            data: {
                authorizedRoles: [USER_ROLES.admin, USER_ROLES.editor]
            }
        })
        .state('user.project', {
            url: "/project/:projectId",
            views: {
                "userContent@user": {
                    templateUrl: "project/index.html",
                    controller: "ProjectController"
                },
                "projectContent@user.project": {
                    templateUrl: "project/scenes.html",
                    controller: "ProjectScenesController"
                },
                "subNavigation@user": {
                    templateUrl: "subNavigation/project.html",
                    controller: "ProjectController"
                }
            },
            data: {
                authorizedRoles: [USER_ROLES.admin, USER_ROLES.editor]
            }
        })
        .state('user.project.scenes', {
            url: "/scenes",
            views: {
                "projectContent@user.project": {
                    templateUrl: "project/scenes.html",
                    controller: "ProjectScenesController"
                }
            },
            data: {
                authorizedRoles: [USER_ROLES.admin, USER_ROLES.editor]
            }
        })
        .state('user.project.assets', {
            url: "/assets",
            views: {
                "projectContent@user.project": {
                    templateUrl: "project/assets.html",
                    controller: "ProjectAssetsController"
                }
            },
            data: {
                authorizedRoles: [USER_ROLES.admin, USER_ROLES.editor]
            }
        })
        .state('user.project.settings', {
            url: "/settings",
            views: {
                "projectContent@user.project": {
                    templateUrl: "project/settings.html",
                    controller: "ProjectSettingsController"
                }
            },
            data: {
                authorizedRoles: [USER_ROLES.admin, USER_ROLES.editor]
            }
        })
        .state('editor', {
            url: "/:username/project/:projectId/scenes/:sceneId",
            views: {
                "app": {
                    templateUrl: "editor/editor.html",
                    controller: "EditorController"
                },
                "subNavigation@editor": {
                    templateUrl: "subNavigation/editor.html",
                    controller: "EditorController"
                }
            },
            data: {
                authorizedRoles: [USER_ROLES.admin, USER_ROLES.editor]
            }
        });

    $locationProvider.html5Mode(true);

    $urlRouterProvider.otherwise("/");
}]);

app.run(['$rootScope', 'AuthService', 'EventService', 'SessionService', 'USER_ROLES', 'AUTH_EVENTS', 'ModalService',
    function ($rootScope, AuthService, EventService, SessionService, USER_ROLES, AUTH_EVENTS, ModalService) {

        $rootScope.editorControllerLoaded = false;

        AuthService.reloadLocalCredentials();

//        console.log(SessionService.getUser());

        $rootScope.currentUser = SessionService.getUser().nick;
        $rootScope.userRoles = USER_ROLES;
        $rootScope.isAuthorized = AuthService.isAuthorized;
        $rootScope.isAdmin = SessionService.isAdmin;

        $rootScope.sidebarMenu = { isActive: true };
        // debugging
        $rootScope.console = console;

        $rootScope.$on('$stateChangeStart', function (event, next, nextParams) {

            var authorizedRoles = next.data.authorizedRoles;

            if (authorizedRoles === false) {
                return;
            }

            if (!AuthService.isAuthorized(authorizedRoles)) {
                event.preventDefault();
                if (AuthService.isAuthenticated()) {
                    // user is not allowed
                    $rootScope.$broadcast(AUTH_EVENTS.notAuthorized, {next: next, params: nextParams});
                } else {
                    // user is not logged in
                    $rootScope.$broadcast(AUTH_EVENTS.notAuthenticated, {next: next, params: nextParams});
                }
            }
         });
}]);

angular.module("templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("auth/login.html","<div id=\"view--login\">\r\n    <h1>Login</h1>\r\n    <form name=\"loginForm\" class=\"container\"\r\n          ng-submit=\"login(credentials)\" novalidate>\r\n        <fieldset class=\"row\">\r\n            <placeholder-input value=\"credentials.login\" label=\"Username\" type=\"text\"></placeholder-input>\r\n        </fieldset>\r\n        <fieldset class=\"row\">\r\n            <placeholder-input value=\"credentials.password\" label=\"Password\" type=\"password\"></placeholder-input>\r\n        </fieldset>\r\n        <div class=\"row\">\r\n            <button class=\"btn btn--round btn--submit\">Login</button>\r\n        </div>\r\n    </form>\r\n</div>");
$templateCache.put("auth/register.html","<div id=\"view--register\">\r\n    <h1>Register</h1>\r\n    <form name=\"registerForm\" class=\"container\"\r\n          ng-submit=\"register(credencials)\" novalidate>\r\n        <fieldset class=\"row\">\r\n            <placeholder-input value=\"credentials.nick\" label=\"Username\" type=\"text\"></placeholder-input>\r\n        </fieldset>\r\n        <fieldset class=\"row\">\r\n            <placeholder-input value=\"credentials.email\" label=\"Email\" type=\"email\"></placeholder-input>\r\n        </fieldset>\r\n        <fieldset class=\"row\">\r\n            <placeholder-input value=\"credentials.password\" label=\"Password\" type=\"password\"></placeholder-input>\r\n        </fieldset>\r\n        <div class=\"row\">\r\n            <button class=\"btn btn--round btn--submit\">Login</button>\r\n        </div>\r\n    </form>\r\n</div>");
$templateCache.put("editor/editor.html","<nav-header></nav-header>\r\n<nav class=\"editor-toolbar\">\r\n    <ul class=\"editor-toolbar__list\">\r\n        <li class=\"editor-toolbar__item has-bottom-seperator active\">\r\n            <i class=\"fa fa-location-arrow\"></i>\r\n            <h2 class=\"editor-toolbar__title\">Selection</h2>\r\n        </li>\r\n        <li class=\"editor-toolbar__item has-bottom-seperator\">\r\n            <i class=\"fa fa-trash-o\"></i>\r\n            <h2 class=\"editor-toolbar__title\">Trash / Rubber</h2>\r\n        </li>\r\n        <li class=\"editor-toolbar__item\">\r\n            <i class=\"fa fa-expand\"></i>\r\n            <h2 class=\"editor-toolbar__title\">Scale</h2>\r\n        </li>\r\n        <li class=\"editor-toolbar__item\">\r\n            <i class=\"fa fa-arrows\"></i>\r\n            <h2 class=\"editor-toolbar__title\">Translate</h2>\r\n        </li>\r\n        <li class=\"editor-toolbar__item has-bottom-seperator\">\r\n            <i class=\"fa fa-arrows-h\"></i>\r\n            <h2 class=\"editor-toolbar__title\">Move</h2>\r\n        </li>\r\n        <li class=\"editor-toolbar__item\">\r\n            <i class=\"fa fa-camera\"></i>\r\n            <h2 class=\"editor-toolbar__title\">Camera 1</h2>\r\n        </li>\r\n        <li class=\"editor-toolbar__item\">\r\n            <i class=\"fa fa-camera\"></i>\r\n            <h2 class=\"editor-toolbar__title\">Camera 2</h2>\r\n        </li>\r\n        <li class=\"editor-toolbar__item active\">\r\n            <i class=\"fa fa-camera\"></i>\r\n            <h2 class=\"editor-toolbar__title\">Camera 3</h2>\r\n        </li>\r\n    </ul>\r\n</nav>\r\n<div class=\"editor-scene\" id=\"editor-scene-container\"></div>\r\n<div class=\"editor-sidebar\">\r\n    <div class=\"editor-sidebar__top\">\r\n        <nav class=\"filter-switch\">\r\n            <button class=\"filter-switch__option active\">Objects</button>\r\n            <button class=\"filter-switch__option\">Settings</button>\r\n        </nav>\r\n        <div class=\"editor-settings\">Editor Settings</div>\r\n        <div class=\"editor-objects\">\r\n            <ul class=\"toggle-list\">\r\n                <editor-object ng-repeat=\"item in sceneObjects\" ng-if=\"item.type != \'Line\' && item.type != \'PointLight\'\"></editor-object>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"editor-sidebar__bottom\">\r\n        <button class=\"editor-sidebar__ellipsis\">\r\n            <i class=\"fa fa-ellipsis-h\"></i>\r\n        </button>\r\n        <nav class=\"filter-switch\">\r\n            <button class=\"filter-switch__option\">POI</button>\r\n            <button class=\"filter-switch__option\">Media</button>\r\n            <button class=\"filter-switch__option active\">Objects</button>\r\n            <button class=\"filter-switch__option\">Effects</button>\r\n        </nav>\r\n        <ul class=\"toggle-list--small\">\r\n            <li class=\"toggle-list--small__item\" ng-repeat=\"primitives in supportedPrimitiveObjects\">\r\n                <div class=\"toggle-list--small__header\">\r\n                    <h2 class=\"toggle-list--small__title\">{{primitives.title}}</h2>\r\n                </div>\r\n                <ul class=\"selection-list container\">\r\n                    <li class=\"selection-list__item col span-3\" ng-repeat=\"primitive in primitives.items track by $index\"  ng-click=\"addNewObject(primitive)\">\r\n                        <i class=\"fa fa-cube\"></i>\r\n                        <h4 class=\"selection-list__title\">{{primitive}}</h4>\r\n                    </li>\r\n                </ul>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</div>");
$templateCache.put("documentation/index.html","documentation");
$templateCache.put("landingpage/index.html","<nav-header></nav-header>\r\n<div id=\"view--root\" class=\"container\">\r\n    <section class=\"section section--gallery row\">\r\n        <h1 class=\"section--gallery__title\">360blick</h1>\r\n        <p class=\"section--gallery__subtitle\">interactive panorama experiences</p>\r\n        <button ui-sref=\"register\" class=\"btn btn--cta section--gallery__sign-up\" ng-if=\"!isAuthenticated()\">sign up</button>\r\n        <button ui-sref=\"user({username: currentUser})\" class=\"btn btn--cta section--gallery__sign-up\" ng-if=\"isAuthenticated()\">Your profile</button>\r\n    </section>\r\n    <section class=\"section section--features row\">\r\n        <ul class=\"icon-list\">\r\n            <li class=\"icon-list__item\">\r\n                <i class=\"fa fa-cube\"></i>\r\n                <span class=\"icon-list__title icon-list__title--divided\">Scenes & Text</span>\r\n                <span class=\"icon-list__text\">Add your content and make it interactive.</span>\r\n            </li>\r\n            <li class=\"icon-list__item\">\r\n                <i class=\"fa fa-link\"></i>\r\n                <span class=\"icon-list__title icon-list__title--divided\">Navigation</span>\r\n                <span class=\"icon-list__text\">Define Relations and link between Panormas.</span>\r\n            </li>\r\n            <li class=\"icon-list__item\">\r\n                <i class=\"fa fa-magic\"></i>\r\n                <span class=\"icon-list__title icon-list__title--divided\">Effects</span>\r\n                <span class=\"icon-list__text\">Add Animations and Transitions for more emotion.</span>\r\n            </li>\r\n        </ul>\r\n    </section>\r\n    <section class=\"section section--toggle row\">\r\n        <hgroup>\r\n            <h2 class=\"section__title\">Interactive Editing</h2>\r\n            <h3 class=\"section__subtitle\">Interactive panorama experiences with more perspective, you will actually love to edit and share.</h3>\r\n        </hgroup>\r\n        <div class=\"section--toggle__images\"></div>\r\n    </section>\r\n    <section class=\"section section--options row\">\r\n        <hgroup>\r\n            <h2 class=\"section__title\">Show some Awesomeness</h2>\r\n            <h3 class=\"section__subtitle\">Import your favourite assets with ease and make them even more awesome.</h3>\r\n        </hgroup>\r\n        <ul class=\"icon-list icon-list--minor\">\r\n            <li class=\"icon-list__item\">\r\n                <i class=\"fa fa-picture-o\"></i>\r\n                <span class=\"icon-list__text\">Images</span>\r\n            </li>\r\n            <li class=\"icon-list__item\">\r\n                <i class=\"fa fa-cube\"></i>\r\n                <span class=\"icon-list__text\">3D Models</span>\r\n            </li>\r\n            <li class=\"icon-list__item\">\r\n                <i class=\"fa fa-magic\"></i>\r\n                <span class=\"icon-list__text\">Filters</span>\r\n            </li>\r\n            <li class=\"icon-list__item\">\r\n                <i class=\"fa fa-video-camera\"></i>\r\n                <span class=\"icon-list__text\">Videos</span>\r\n            </li>\r\n            <li class=\"icon-list__item\">\r\n                <i class=\"fa fa-font\"></i>\r\n                <span class=\"icon-list__text\">Text</span>\r\n            </li>\r\n        </ul>\r\n    </section>\r\n    <footer class=\"footer\">\r\n        <nav>\r\n            <ul>\r\n                <li>\r\n                    <a href=\"#\">Help</a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"#\">Blog</a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"#\">Documentation</a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"#\">About</a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"#\">Imprint</a>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    </footer>\r\n</div>\r\n\r\n");
$templateCache.put("landingpage/slideshow.html","");
$templateCache.put("partials/editorObject.html","<li class=\"toggle-list__item\" ng-class=\"{active: isActive}\">\r\n    <div class=\"toggle-list__header container\" ng-click=\"setActive(); \">\r\n        <div class=\"col span-2 toggle-list__header__icon\"><i class=\"fa fa-cube\"></i></div>\r\n        <div class=\"col span-8 toggle-list__header__title\" >{{item.type}} {{item.id}}: {{item.geometry.type}}</div>\r\n        <div class=\"col span-2 has-text-right toggle-list__header__interaction\">\r\n            <button class=\"toggle-list__header__interaction__button\">\r\n                <i class=\"fa fa-cog\" ng-click=\"item.detailsOpen = !item.detailsOpen\"></i>\r\n            </button>\r\n            <button class=\"toggle-list__header__interaction__button\">\r\n                <i class=\"fa fa-chevron-down\"></i>\r\n            </button>\r\n        </div>\r\n    </div>\r\n    <div class=\"toggle-list__body\" ng-class=\"{\'selected\': item.detailsOpen}\">\r\n        <div class=\"sidebar-transform\">\r\n            <div class=\"container\">\r\n                <div class=\"col span-3 sidebar-transform__title\">&nbsp;</div>\r\n                <div class=\"col span-3 sidebar-transform__title\">x</div>\r\n                <div class=\"col span-3 sidebar-transform__title\">y</div>\r\n                <div class=\"col span-3 sidebar-transform__title\">z</div>\r\n            </div>\r\n            <xyz-input title=\"Position\" icon=\"fa-expand\" item=\"item.position\"></xyz-input>\r\n            <xyz-input title=\"Rotation\" icon=\"fa-arrows\" item=\"item.rotation\"></xyz-input>\r\n            <xyz-input title=\"Skalierung\" icon=\"fa-arrows-h\" item=\"item.scale\"></xyz-input>\r\n        </div>\r\n\r\n        <ul class=\"toggle-list--small\">\r\n            <li class=\"toggle-list--small__item\">\r\n                <div class=\"toggle-list--small__header\">\r\n                    <h2 class=\"toggle-list--small__title\">Material</h2>\r\n                </div>\r\n                <ul class=\"editor-options-list\">\r\n                    <li class=\"editor-options-list__item\">\r\n                        <min-max-value title=\"Opacity\" item=\"item.material.opacity\" minimum=\"0\" maximum=\"1\" step-size=\"0.1\"></min-max-value>\r\n                    </li>\r\n                </ul>\r\n            </li>\r\n            <li class=\"toggle-list--small__item\">\r\n                <div class=\"toggle-list--small__header\">\r\n                    <h2 class=\"toggle-list--small__title\">Shadow</h2>\r\n                </div>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n\r\n\r\n</li>");
$templateCache.put("partials/feedback.html","<div class=\"dialog\">\r\n    <div class=\"dialog__content\">\r\n        <div class=\"dialog__header\">\r\n            <button class=\"dialog__close\" ng-click=\"closeIt()\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\r\n            <h4 class=\"dialog__title\">Feedback</h4>\r\n        </div>\r\n        <div class=\"dialog__body\">\r\n            <!--<form name=\"loginForm\" class=\"container\"-->\r\n                  <!--ng-submit=\"login(credentials)\" novalidate>-->\r\n                <!--<fieldset class=\"row\">-->\r\n                    <!--<placeholder-input value=\"credentials.login\" label=\"Username\" type=\"text\"></placeholder-input>-->\r\n                <!--</fieldset>-->\r\n                <!--<fieldset class=\"row\">-->\r\n                    <!--<placeholder-input value=\"credentials.password\" label=\"Password\" type=\"password\"></placeholder-input>-->\r\n                <!--</fieldset>-->\r\n                <!--<div class=\"row\">-->\r\n                    <!--<button class=\"btn btn--round btn--submit\">Login</button>-->\r\n                <!--</div>-->\r\n            <!--</form>-->\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n");
$templateCache.put("partials/help.html","<div class=\"dialog\">\r\n    <div class=\"dialog__content\">\r\n        <div class=\"dialog__header\">\r\n            <button class=\"dialog__close\" ng-click=\"closeIt()\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\r\n            <h4 class=\"dialog__title\">Help</h4>\r\n        </div>\r\n        <div class=\"dialog__body\">\r\n            <!--<form name=\"loginForm\" class=\"container\"-->\r\n                  <!--ng-submit=\"login(credentials)\" novalidate>-->\r\n                <!--<fieldset class=\"row\">-->\r\n                    <!--<placeholder-input value=\"credentials.login\" label=\"Username\" type=\"text\"></placeholder-input>-->\r\n                <!--</fieldset>-->\r\n                <!--<fieldset class=\"row\">-->\r\n                    <!--<placeholder-input value=\"credentials.password\" label=\"Password\" type=\"password\"></placeholder-input>-->\r\n                <!--</fieldset>-->\r\n                <!--<div class=\"row\">-->\r\n                    <!--<button class=\"btn btn--round btn--submit\">Login</button>-->\r\n                <!--</div>-->\r\n            <!--</form>-->\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n");
$templateCache.put("partials/login.html","<div class=\"dialog\">\r\n    <div class=\"dialog__content\">\r\n        <div class=\"dialog__header\">\r\n            <button class=\"dialog__close\" ng-click=\"closeIt()\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\r\n            <h4 class=\"dialog__title\">Login</h4>\r\n        </div>\r\n        <div class=\"dialog__body\">\r\n            <form name=\"loginForm\" class=\"container\"\r\n                  ng-submit=\"login(credentials)\" novalidate>\r\n                <fieldset class=\"row\">\r\n                    <placeholder-input value=\"credentials.login\" label=\"Username\" type=\"text\"></placeholder-input>\r\n                </fieldset>\r\n                <fieldset class=\"row\">\r\n                    <placeholder-input value=\"credentials.password\" label=\"Password\" type=\"password\"></placeholder-input>\r\n                </fieldset>\r\n                <div class=\"row\">\r\n                    <button class=\"btn btn--round btn--submit\">Login</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n");
$templateCache.put("partials/minMaxValue.html","<div class=\"minmax-interaction container\">\r\n    <!-- todo: refactor minmax and xyz to editor-option -->\r\n    <div class=\"minmax-interaction__title col span-3\">{{title}}</div>\r\n    <div class=\"minmax-interaction__slider col span-6\">\r\n        <div class=\"input-slider\">slider</div>\r\n    </div>\r\n    <div class=\"col span-3\">\r\n        <div class=\"input--sidebar\">\r\n            <label class=\"input--sidebar__label\">\r\n                <span class=\"input--sidebar__label__unit\">%</span>\r\n                <input class=\"input--sidebar__field\" type=\"number\" ng-model=\"item\" min=\"{{min}}\" max=\"{{max}}\" step=\"{{step || 1}}\">\r\n            </label>\r\n        </div>\r\n    </div>\r\n</div>");
$templateCache.put("partials/navHeader.html","<header class=\"header\">\r\n    <div class=\"header__subnav\" ui-view=\"subNavigation\"></div>\r\n    <div class=\"header__info has-header-pad container\">\r\n        <div class=\"col span-6\">\r\n            <dropdown template-name=\"share\"></dropdown>\r\n        </div>\r\n        <div class=\"col span-6 has-text-right\">\r\n            <profile-info-box></profile-info-box>\r\n        </div>\r\n    </div>\r\n</header>");
$templateCache.put("partials/newProject.html","<div class=\"dialog\">\r\n    <div class=\"dialog__content\">\r\n        <div class=\"dialog__header\">\r\n            <button class=\"dialog__close\" ng-click=\"closeIt()\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\r\n            <h4 class=\"dialog__title\">New Project</h4>\r\n        </div>\r\n        <div class=\"dialog__body\">\r\n            <fieldset class=\"row\">\r\n                <placeholder-input value=\"newProject.title\" label=\"Title\" type=\"text\"></placeholder-input>\r\n            </fieldset>\r\n            <fieldset class=\"row\">\r\n                <placeholder-input value=\"newProject.description\" label=\"Description\" type=\"text\"></placeholder-input>\r\n            </fieldset>\r\n            <div class=\"row\">\r\n                <button ng-click=\"createNewProject(); closeIt()\" class=\"btn btn--round btn--submit\">Create</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n");
$templateCache.put("partials/newScene.html","<div class=\"dialog\">\r\n    <div class=\"dialog__content\">\r\n        <div class=\"dialog__header\">\r\n            <button class=\"dialog__close\" ng-click=\"closeIt()\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\r\n            <h4 class=\"dialog__title\">New Scene</h4>\r\n        </div>\r\n        <div class=\"dialog__body\">\r\n            <fieldset class=\"row\">\r\n                <placeholder-input value=\"newScene.title\" label=\"Title\" type=\"text\"></placeholder-input>\r\n            </fieldset>\r\n            <fieldset class=\"row\">\r\n                <placeholder-input value=\"newScene.description\" label=\"Description\" type=\"text\"></placeholder-input>\r\n            </fieldset>\r\n            <div class=\"row\">\r\n                <button ng-click=\"createNewScene(); closeIt()\" class=\"btn btn--round btn--submit\">Create</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n");
$templateCache.put("partials/placeholderInput.html","<div class=\"input\" ng-class=\"{\'is-filled\': value, \'is-focused\': isFocused}\" ng-click=\"setFocus()\">\r\n    <label class=\"input__label\">{{label}}</label>\r\n    <input type=\"{{type}}\" class=\"input__field\" ng-model=\"value\" ng-change=\"onChange()\" ng-blur=\"onBlur()\">\r\n</div>");
$templateCache.put("partials/profileInfoBox.html","<div class=\"profile-info-box\">\r\n    <button ui-sref=\"login\" class=\"btn btn--cta\" ng-if=\"!isAuthenticated()\">Sign in</button>\r\n    <button ng-click=\"logout()\" class=\"btn btn--cta btn--cta--danger\" ng-if=\"isAuthenticated()\">Logout</button>\r\n</div>\r\n");
$templateCache.put("partials/sidebarMenu.html","<nav class=\"sidebar-menu\">\r\n    <a ui-sref=\"user\" ui-sref-active=\"is-active\" class=\"sidebar-menu__title\">360blick</a>\r\n    <ul class=\"menu-list\">\r\n        <li class=\"menu-primary__item\">\r\n            <a ui-sref=\"user\" ui-sref-active-eq=\"is-active\" class=\"menu-primary__title has-menu-seperator\"><i class=\"fa fa-folder-open\"></i>Projects</a>\r\n            <ul class=\"menu-secondary\">\r\n                <li class=\"menu-secondary__item\">\r\n                    <a ng-click=\"openModal(\'newProject\')\" ui-sref-active=\"is-active\" class=\"menu-secondary__title\"><i class=\"fa fa-plus\"></i>New Project</a>\r\n                </li>\r\n                <li class=\"menu-secondary__item\" ng-repeat=\"project in projects\">\r\n                    <a ui-sref=\"user.project({projectId: project.id})\" ui-sref-active=\"is-active\" class=\"menu-secondary__title\">{{project.title}}</a>\r\n                </li>\r\n            </ul>\r\n        </li>\r\n        <li class=\"menu-primary__item\">\r\n            <a ui-sref=\"user.settings.account\" ui-sref-active=\"is-active\" class=\"menu-primary__title\"><i class=\"fa fa-user\"></i>Account</a>\r\n        </li>\r\n        <li class=\"menu-primary__item\">\r\n            <a ui-sref=\"user.settings\" ui-sref-active-eq=\"is-active\" class=\"menu-primary__title\"><i class=\"fa fa-cog\"></i>Settings</a>\r\n        </li>\r\n        <li class=\"menu-primary__item\">\r\n            <a ng-click=\"openModal(\'help\')\" ui-sref-active=\"is-active\" class=\"menu-primary__title has-menu-seperator\"><i class=\"fa fa-question-circle\"></i>Learn & Help</a>\r\n            <ul class=\"menu-secondary\">\r\n                <li class=\"menu-secondary__item\">\r\n                    <a ui-sref=\"gettingStarted\" target=\"_blank\" ui-sref-active=\"is-active\" class=\"menu-secondary__title\">Getting Started</a>\r\n                </li>\r\n                <li class=\"menu-secondary__item\">\r\n                    <a ui-sref=\"documentation\" target=\"_blank\" ui-sref-active=\"is-active\" class=\"menu-secondary__title\">Documentation</a>\r\n                </li>\r\n                <li class=\"menu-secondary__item\">\r\n                    <a ng-click=\"openModal(\'help\')\" ui-sref-active=\"is-active\" class=\"menu-secondary__title\">Help</a>\r\n                </li>\r\n            </ul>\r\n        </li>\r\n        <li class=\"menu-primary__item\">\r\n            <a ng-click=\"openModal(\'feedback\')\" ui-sref-active=\"is-active\" class=\"menu-primary__title has-menu-seperator\"><i class=\"fa fa-comments-o\"></i>Feedback</a>\r\n        </li>\r\n    </ul>\r\n</nav>");
$templateCache.put("partials/siteHeader.html","<div class=\"site-header\">\r\n    360blick\r\n</div>");
$templateCache.put("partials/xyzInput.html","<div class=\"xyz-interaction container\">\r\n    <!-- todo: refactor minmax and xyz to editor-option -->\r\n    <div class=\"col span-3 xyz-interaction__title\">\r\n        <i class=\"fa {{icon}}\"></i>\r\n    </div>\r\n    <div class=\"col span-3 xyz-interaction__item\">\r\n        <div class=\"input--sidebar\">\r\n            <label class=\"input--sidebar__label\">\r\n                <span class=\"input--sidebar__label__unit\">px</span>\r\n                <input class=\"input--sidebar__field\" type=\"number\" ng-model=\"item.x\">\r\n            </label>\r\n        </div>\r\n    </div>\r\n    <div class=\"col span-3 xyz-interaction__item\">\r\n        <div class=\"input--sidebar\">\r\n            <label class=\"input--sidebar__label\">\r\n                <span class=\"input--sidebar__label__unit\">px</span>\r\n                <input class=\"input--sidebar__field\" type=\"number\" ng-model=\"item.y\">\r\n            </label>\r\n        </div>\r\n    </div>\r\n    <div class=\"col span-3 xyz-interaction__item\">\r\n        <div class=\"input--sidebar\">\r\n            <label class=\"input--sidebar__label\">\r\n                <span class=\"input--sidebar__label__unit\">px</span>\r\n                <input class=\"input--sidebar__field\" type=\"number\" ng-model=\"item.z\">\r\n            </label>\r\n        </div>\r\n    </div>\r\n</div>");
$templateCache.put("subNavigation/account.html","account");
$templateCache.put("subNavigation/editor.html","<div class=\"container\">\r\n    <nav class=\"col span-4\">\r\n        <ul class=\"nav-tabs\">\r\n            <li class=\"nav-tabs__item\">\r\n                <button class=\"nav-tabs__btn nav-tabs__btn--menu\"  ui-sref=\"user.project.scenes({projectId: projectId})\"><i class=\"fa fa-arrow-left\"></i></button>\r\n            </li>\r\n            <li class=\"nav-tabs__item\">\r\n                <button ng-click=\"openModal(\'newScene\')\" class=\"nav-tabs__btn\" ><i class=\"fa fa-plus-square-o\"></i>Create Scene</button>\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n    <div class=\"col span-4 has-header-pad has-text-center\">\r\n        <button class=\"btn btn--cta\">Scenes</button>\r\n    </div>\r\n    <div class=\"col span-4 has-text-right\">\r\n        <ul class=\"nav-tabs--label\">\r\n            <li class=\"nav-tabs--label__item\">\r\n                <button class=\"nav-tabs--label__btn\">\r\n                    <i ng-click=\"zoomOut()\" class=\"fa fa-search-minus\"></i>\r\n                    <span class=\"nav-tabs--label__title\">Zoom</span>\r\n                </button>\r\n            </li>\r\n            <li class=\"nav-tabs--label__item has-right-splitter\">\r\n                <button class=\"nav-tabs--label__btn\">\r\n                    <i ng-click=\"zoomIn()\" class=\"fa fa-search-plus\"></i>\r\n                    <span class=\"nav-tabs--label__title\">Zoom</span>\r\n                </button>\r\n            </li>\r\n            <li class=\"nav-tabs--label__item has-right-splitter\">\r\n                <button class=\"nav-tabs--label__btn\">\r\n                    <i class=\"fa fa-eye-slash\"></i>\r\n                    <span class=\"nav-tabs--label__title\">Toolbar</span>\r\n                </button>\r\n            </li>\r\n            <li class=\"nav-tabs--label__item\">\r\n                <button class=\"nav-tabs--label__btn\">\r\n                    <i class=\"fa fa-undo\"></i>\r\n                    <span class=\"nav-tabs--label__title\">Undo</span>\r\n                </button>\r\n            </li>\r\n            <li class=\"nav-tabs--label__item\">\r\n                <button class=\"nav-tabs--label__btn\">\r\n                    <i class=\"fa fa-repeat\"></i>\r\n                    <span class=\"nav-tabs--label__title\">Redo</span>\r\n                </button>\r\n            </li>\r\n            <li class=\"nav-tabs--label__item\">\r\n                <button class=\"nav-tabs--label__btn\">\r\n                    <i class=\"fa fa-floppy-o\"></i>\r\n                    <span class=\"nav-tabs--label__title\">Save</span>\r\n                </button>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</div>\r\n\r\n\r\n");
$templateCache.put("subNavigation/project.html","<nav>\r\n    <ul class=\"nav-tabs\">\r\n        <li class=\"nav-tabs__item\">\r\n            <button class=\"nav-tabs__btn nav-tabs__btn--menu\" ng-click=\"sidebarMenu.isActive = !sidebarMenu.isActive\"><i class=\"fa fa-bars\"></i></button>\r\n        </li>\r\n        <li class=\"nav-tabs__item\">\r\n            <button ui-sref=\"user.project.scenes({projectId: projectId})\" class=\"nav-tabs__btn\" ui-sref-active=\"is-active\"><i class=\"fa fa-cube\"></i>Scenes</button>\r\n        </li>\r\n        <li class=\"nav-tabs__item\">\r\n            <button ui-sref=\"user.project.assets({projectId: projectId})\" class=\"nav-tabs__btn\" ui-sref-active=\"is-active\"><i class=\"fa fa-picture-o\"></i>Assets</button>\r\n        </li>\r\n        <li class=\"nav-tabs__item\">\r\n            <button ui-sref=\"user.project.settings({projectId: projectId})\" class=\"nav-tabs__btn\" ui-sref-active=\"is-active\"><i class=\"fa fa-cog\"></i>Settings</button>\r\n        </li>\r\n    </ul>\r\n</nav>");
$templateCache.put("subNavigation/projects.html","<nav>\r\n    <ul class=\"nav-tabs\">\r\n        <li class=\"nav-tabs__item\">\r\n            <button class=\"nav-tabs__btn nav-tabs__btn--menu\" ng-click=\"sidebarMenu.isActive = !sidebarMenu.isActive\"><i class=\"fa fa-bars\"></i></button>\r\n        </li>\r\n    </ul>\r\n</nav>");
$templateCache.put("subNavigation/settings.html","<nav>\r\n    <ul class=\"nav-tabs\">\r\n        <li class=\"nav-tabs__item\">\r\n            <button class=\"nav-tabs__btn nav-tabs__btn--menu\" ng-click=\"sidebarMenu.isActive = !sidebarMenu.isActive\"><i class=\"fa fa-bars\"></i></button>\r\n        </li>\r\n        <li class=\"nav-tabs__item\">\r\n            <button ui-sref=\"user.settings.account\" class=\"nav-tabs__btn\" ui-sref-active=\"is-active\"><i class=\"fa fa-cube\"></i>Account</button>\r\n        </li>\r\n\r\n    </ul>\r\n</nav>");
$templateCache.put("user/accountSettings.html","<div>\r\n    account settings\r\n</div>\r\n");
$templateCache.put("user/index.html","<div id=\"view--user\" class=\"view container\">\r\n    <sidebar-menu></sidebar-menu>\r\n    <div id=\"view--user__wrapper\" class=\"view__wrapper has-sidebar-menu\">\r\n        <nav-header></nav-header>\r\n        <div ui-view=\"userContent\" id=\"view--user__wrapper__content\" class=\"reveal-animation\"></div>\r\n    </div>\r\n</div>\r\n\r\n");
$templateCache.put("user/projects.html","<div class=\"interaction-bar container\">\r\n    <div class=\"col span-6\">\r\n        <button ng-click=\"openModal(\'newProject\')\" class=\"btn btn--dotted\"><i class=\"fa fa-plus\"></i>New Project</button>\r\n    </div>\r\n    <div class=\"col span-6 has-text-right\">\r\n        <button class=\"btn btn--dropdown btn--dropdown--light\">Most Recent<i class=\"fa fa-chevron-down\"></i></button>\r\n        <button class=\"btn\"><i class=\"fa fa-th-list\"></i></button>\r\n        <button class=\"btn\"><i class=\"fa fa-th\"></i></button>\r\n    </div>\r\n</div>\r\n\r\n<ul class=\"overview-list container\">\r\n    <li ng-repeat=\"project in projects\" ui-sref=\"user.project.scenes({projectId: project.id})\" class=\"overview-list__item col span-6\">\r\n        <div class=\"overview-list__asset\" style=\"background-image:url(http://upload.wikimedia.org/wikipedia/commons/6/60/Matterhorn_from_Domh%C3%BCtte_-_2.jpg);\">\r\n            <div class=\"overview-list__color\" style=\"background-color:rgba(100,100,160, 0.5);\"></div>\r\n            <div class=\"overview-list__content container\">\r\n                <div class=\"col span-8\">\r\n                    <h2 class=\"overview-list__title\">{{project.title}}</h2>\r\n                    <time class=\"overview-list__modified\" datetime=\"2000-01-30 18:00\">Last modified: {{project.description}}</time>\r\n                </div>\r\n                <div class=\"col span-4 has-text-right\">\r\n                    <button class=\"btn btn--cta\">Edit</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </li>\r\n</ul>");
$templateCache.put("user/settings.html","Settings von User {{username}}\n");
$templateCache.put("project/assets.html","assets von {{projectId}}");
$templateCache.put("project/index.html","<div ui-view=\"projectContent\" class=\"reveal-animation\"></div>");
$templateCache.put("project/scenes.html","<div class=\"interaction-bar container\">\r\n    <div class=\"col span-6\">\r\n        <button ng-click=\"openModal(\'newScene\')\" class=\"btn btn--dotted\"><i class=\"fa fa-plus\"></i>New Scene</button>\r\n    </div>\r\n    <div class=\"col span-6 has-text-right\">\r\n        <button class=\"btn btn--dropdown btn--dropdown--light\">Most Recent<i class=\"fa fa-chevron-down\"></i></button>\r\n        <button class=\"btn\"><i class=\"fa fa-th-list\"></i></button>\r\n        <button class=\"btn\"><i class=\"fa fa-th\"></i></button>\r\n    </div>\r\n</div>\r\n\r\n<ul class=\"overview-list container\">\r\n    <li ng-repeat=\"scene in scenes\" ui-sref=\"editor({username: username, projectId: projectId, sceneId: scene.id})\" class=\"overview-list__item col span-6\">\r\n        <div class=\"overview-list__asset\" style=\"background-image:url(http://upload.wikimedia.org/wikipedia/commons/6/60/Matterhorn_from_Domh%C3%BCtte_-_2.jpg);\">\r\n            <div class=\"overview-list__color\" style=\"background-color:rgba(100,100,160, 0.5);\"></div>\r\n            <div class=\"overview-list__content container\">\r\n                <div class=\"col span-8\">\r\n                    <h2 class=\"overview-list__title\">{{scene.title}}</h2>\r\n                    <time class=\"overview-list__modified\" datetime=\"2000-01-30 18:00\">Last modified: {{scene.description}}</time>\r\n                </div>\r\n                <div class=\"col span-4 has-text-right\">\r\n                    <button class=\"btn btn--cta\">Edit</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </li>\r\n</ul>");
$templateCache.put("project/settings.html","settings von {{projectId}}");
$templateCache.put("gettingStarted/index.html","getting started");
$templateCache.put("partials/dropdown/share.html","<div class=\"dropdown\">\r\n    <button class=\"btn btn--cta btn--dropdown\" ng-click=\"active = !active\"><i class=\"fa fa-link\"></i>Share<i class=\"fa fa-chevron-down\"></i></button>\r\n    <div class=\"dropdown__toggle dropdown__toggle--default\" ng-class=\"{\'active\': active}\">\r\n        <div class=\"dropdown__toggle__element\">\r\n            <a>\r\n                Facebook\r\n            </a>\r\n        </div>\r\n        <div class=\"dropdown__toggle__element\">\r\n            <a>\r\n                Twitter\r\n            </a>\r\n        </div>\r\n    </div>\r\n</div>");}]);
'use strict';

app.controller('DocumentationController', ['$scope', function ($scope) {

}]);


'use strict';

app.controller('FeedbackController', ['$scope', function ($scope) {

}]);


'use strict';

app.controller('GettingStartedController', ['$scope', function ($scope) {

}]);


'use strict';

app.controller('HelpController', ['$scope', function ($scope) {

}]);


'use strict';

app.controller('LandingpageController', ['$scope', function ($scope) {
    console.log('landing init');
}]);


app.directive('dropdown',[function() {
    return {
        restrict: 'E',
        replace: true,
        scope: {
            data: '=',
            onSelect: '=',
            classSuffix: '@'
        },
        link: function(scope, element, attrs) {
            scope.active = false;
            scope.select = {
                value: undefined
            };

            scope.toggleDropdown = function() {
                scope.active = !scope.active;
            };

            scope.selectDropdownItem = function(id, value) {
                scope.active = false;
                scope.select.value = value;
                if(typeof(scope.onSelect) == "function") {
                    scope.onSelect(id);
                }
            }
        },
        templateUrl: function(elem,attrs) {
            return 'partials/dropdown/' + attrs.templateName + '.html';
        }
    }
}]);
app.directive('editorObject', ['$rootScope', function ($rootScope) {
    return {
        restrict: 'E',
        templateUrl: 'partials/editorObject.html',
        replace: true,
        link: function(scope, elem, attrs) {
            $rootScope.$on('objectSelected', function(event, object) {
                if(scope.item.id == object.id){
                    scope.isActive = true;
                    if(!scope.item.detailsOpen && !elem.hasClass('active')) {
                        scope.item.detailsOpen = true;
                    }
                }else{
                    scope.isActive = false;
                }

                //avoid collision with angulars digest cycle
                if (scope.$root.$$phase != '$apply' && scope.$root.$$phase != '$digest') {
                    scope.$apply();
                }
            });

            scope.setActive = function() {
                if(scope.isActive){
                    scope.item.detailsOpen = !scope.item.detailsOpen;
                }
                $rootScope.$emit('objectSelected', scope.item);
            }

        }
    };
}]);
app.directive('editorScene', ['EditorService', 'ObjectSelectionService', function (EditorService, ObjectSelectionService) {
    return {
        restrict: 'E',
        replace: true,
        link: function(scope, elem, attrs) {
            console.log('ccc');
            EditorService.init(elem);
            ObjectSelectionService.init(elem);
        }
    };
}]);
app.directive('fileInput', ['$timeout', 'RequestService', function ($timeout, RequestService) {
    return {
        restrict: 'E',
        templateUrl: 'partials/fileInput.html',
        replace: true,
        scope: {
            value: '=',
            label: '@',
            classSuffix: '@',
            uploadData: '='
        },
        link: function($scope, elem, attrs) {
            $scope.isFocused = false;

/*            $scope.onChange = function() {
            };

            $scope.onBlur = function() {
                $scope.isFocused = false;
            };

            $scope.setFocus = function() {
                elem[0].querySelector('input').focus();
                $scope.isFocused = true;
            };*/

            $scope.upload = function(files, event) {

                angular.forEach(files, function(file) {
                    var data = $scope.uploadData;
                    var fileReader = new FileReader();

                    fileReader.readAsBinaryString(file);
                    fileReader.onload = function(event) {
                        RequestService.upload('projects/assets/create', data, file, function(res) {
                                console.log(res);
                            }, function(error) {
                                console.log(error);
                            }, function(progressPercentage, event) {
                                console.log('Progress: ' + progressPercentage, event.config.file.name);
                            }
                        );
                    };
                });

            };
        }
    };
}]);
app.directive('formAutofillFix', ['$timeout', function ($timeout) {

    return function (scope, element, attrs) {
        element.prop('method', 'post');
        if (attrs.ngSubmit) {
            $timeout(function () {
                element
                    .unbind('submit')
                    .bind('submit', function (event) {
                        event.preventDefault();
                        element
                            .find('input, textarea, select')
                            .trigger('input')
                            .trigger('change')
                            .trigger('keydown');
                        scope.$apply(attrs.ngSubmit);
                    });
            });
        }
    };
}]);
app.directive('minMaxValue',[ function() {

    return {
        restrict: 'E',
        replace: true,
        templateUrl: 'partials/minMaxValue.html',
        scope: {
            title: "@",
            item: "=",
            step: "@stepSize",
            min: "@minimum",
            max: "@maximum"
        },
        link: function(scope) {

            //required for numeric binding
            if (scope.item && typeof scope.item == 'string') {
                scope.item = parseFloat(scope.item);
            }
            scope.$watch('item', function(val) {
                if (typeof val == 'string') {
                    scope.item = parseFloat(val);
                }
            });
        }
    };
}]);
app.directive('navHeader', ['AuthService', function (AuthService) {
    return {
        restrict: 'E',
        templateUrl: 'partials/navHeader.html',
        replace: true,
        link: function(scope, elem, attrs) {
            scope.logout = function() {
                AuthService.logout();
            };
        }
    };
}]);
app.directive('placeholderInput', [ function (AuthService) {
    return {
        restrict: 'E',
        templateUrl: 'partials/placeholderInput.html',
        replace: true,
        scope: {
            value: '=',
            label: '@',
            type: '@' ,
            classSuffix: '@'
        },
        link: function(scope, elem, attrs) {
            scope.isFocused = false;

            scope.onChange = function() {
            };

            scope.onBlur = function() {
                scope.isFocused = false;
            };

            scope.setFocus = function() {
                elem[0].querySelector('input').focus();
                scope.isFocused = true;
            };
        }
    };
}]);
app.directive('profileInfoBox', ['AuthService', function (AuthService) {
    return {
        restrict: 'E',
        templateUrl: 'partials/profileInfoBox.html',
        replace: true,
        link: function(scope, elem, attrs) {

        }
    };
}]);
app.directive('sidebarMenu', ['Project', 'SceneTemplate', '$rootScope', '$stateParams', function (Project, SceneTemplate, $rootScope, $stateParams) {
    return {
        restrict: 'E',
        templateUrl: 'partials/sidebarMenu.html',
        replace: true,
        link: function(scope, elem, attrs) {

            scope.username = $stateParams.username;

            scope.projects = Project.get(function(projects){
                scope.projects = projects;
            });

            scope.sceneTemplates = SceneTemplate.get(function(sceneTemplates){
                scope.sceneTemplates = sceneTemplates;
            });

            $rootScope.$on('newSceneTemplateCreated', function(event, data){
                scope.sceneTemplates.push(data);
            });
        }
    };
}]);
app.directive('xyzInput',[ function() {

    return {
        restrict: 'E',
        replace: true,
        templateUrl: 'partials/xyzInput.html',
        scope: {
            title: "@",
            icon: "@",
            item: "="
        },
        link: function(scope) {


        }
    };
}]);
'use strict';

app.service('Asset', ['RequestService', '$stateParams', '$rootScope', function (RequestService, $stateParams, $rootScope) {

    var all = {
        assets: []
    };

    var subscribers = [];

    function update(){
        angular.forEach(subscribers, function(callback){
            callback(all.assets);
        })
    }

    function onSuccess(res){
        all.projects = res.data;
        update();
    }

    this.get = function(projectId, callback) {
        if(all.assets.length < 1 || $rootScope.currentUser != $stateParams['username']){
            RequestService.post('projects/assets/get_from_project', {project: {id: projectId}}, onSuccess.bind(this), function(error) {
                    console.log(error);
                }
            );
        }
        subscribers.push(callback);
        return all.assets;
    };

    this.create = function(projectId, newAsset){
        console.log('asset create');
        if(newAsset.title){
            RequestService.post('projects/assets/create', {project: {id: projectId}, asset: newAsset}, function(res) {
                    all.assets.push(res.data);
                    update();
                }, function(error) {
                    console.log(error);
                }
            );
        }
    };

    this.delete = function(assetId){
        // TODO: get new implementation from project
        if(newProject.title){
            RequestService.post('projects/assets/delete', {asset: {id: assetId}}, function(res) {
                    all.assets.push(res.data);
                    update();
                }, function(error) {
                    console.log(error);
                }
            );
        }
    };

}]);

'use strict';

app.service('Project', ['RequestService', '$stateParams', '$rootScope', function (RequestService, $stateParams, $rootScope) {

    var all = {
        projects: []
    };

    var subscribers = [];

    function update(){
        angular.forEach(subscribers, function(callback){
            callback(all.projects);
        })
    }

    function removeProjectFromArray(project) {
        var index = $scope.project.indexOf(project);
        $scope.project.splice(index, 1);
    }

    function onSuccess(res){
        all.projects = res.data;
        update();
    }

    this.get = function(callback){
        if(all.projects.length < 1 || $rootScope.currentUser != $stateParams['username']){
            RequestService.post('projects/get_projects', {user_nick: $rootScope.currentUser}, onSuccess.bind(this), function(error) {
                    console.log(error);
                }
            );
        }

        subscribers.push(callback);
        return all.projects;
    };

    this.create = function(newProject){
        if(newProject.title) return;

        RequestService.post('projects/create', {project: newProject}, function(res) {
                all.projects.push(res.data);
                update();
            }, function(error) {
                console.log(error);
            }
        );
    };

    this.delete = function(projectId){
        // TODO: uncomment when issue closed in backend
/*        RequestService.post('POST /api/v1/projects/delete.json', {project: {id: projectId}}, function(res) {
                removeProjectFromArray();
                update();
            }, function(error) {
                console.log(error);
            }
        );*/
    };

}]);

'use strict';
app.service('SceneTemplate', ['RequestService',
    function (RequestService) {

    var all = {
        templates: []
    };

    var subscribers = [];

    function update(){
        angular.forEach(subscribers, function(callback){
            callback(all.templates);
        })
    }

    function onSuccess(res){
        all.templates = res.data;
        update();
    }

    this.get = function(callback){
        if(all.templates.length < 1){
            RequestService.get('templatescenes/all', {}, onSuccess.bind(this), function(error) {
                    console.log(error);
                }
            );
        }
        subscribers.push(callback);
        return all.templates;
    };

    this.create = function(newSceneTemplate){
        if(newSceneTemplate.title){
            RequestService.post('templatescenes/create', {scene: newSceneTemplate}, function(res) {
                    all.templates.push(res.data);
                    update();
                }, function(error) {
                    console.log(error);
                }
            );
        }
    };

    this.delete = function(sceneId){
        if(sceneId != 'undefined'){
            RequestService.post('templatescenes/delete', {scene: {id: sceneId}}, function(res) {
                    update();
                }, function(error) {
                    console.log(error);
                }
            );
        }
    };

}]);

app.service('AuthService', ['RequestService', 'SessionService', '$rootScope', 'AUTH_EVENTS',
    function (RequestService, SessionService, $rootScope, AUTH_EVENTS) {

    this.login = function (credentials) {
        RequestService.post('users/login', credentials, function(res){

            SessionService.create(res.token, res.nick, res.email, res.role);
            $rootScope.$broadcast(AUTH_EVENTS.loginSuccess, {nick: res.nick});
            },
        function(){
            $rootScope.$broadcast(AUTH_EVENTS.loginFailed);
        });
    };

    this.logout = function () {
        var credentials = {
            nick: SessionService.nick
        };

        RequestService.post('users/logout', credentials, function(res){
                $rootScope.$broadcast(AUTH_EVENTS.logoutSuccess);
                SessionService.destroy();
            },
            function(error){
                $rootScope.$broadcast(AUTH_EVENTS.logoutFailed);
            });
    };

    this.reloadLocalCredentials = function () {
        SessionService.reloadLocalCredentials();
    };

    this.isAuthenticated = function () {
        return !!SessionService.nick;
    };

    this.isAuthorized = function (authorizedRoles) {
        if (!angular.isArray(authorizedRoles)) {
            authorizedRoles = [authorizedRoles];
        }
        return (this.isAuthenticated() &&
        authorizedRoles.indexOf(SessionService.getRole()) !== -1);
    };

        $rootScope.isAuthenticated = this.isAuthenticated;
        $rootScope.isAuthorized = this.isAuthorized;

}]);
/*
 * @license
 * angular-modal v0.4.0
 * (c) 2013 Brian Ford http://briantford.com
 * License: MIT
 */

'use strict';

angular.module('btford.modal', []).
    factory('btfModal',['$animate', '$compile', '$rootScope', '$controller', '$q', '$http', '$templateCache', function ($animate, $compile, $rootScope, $controller, $q, $http, $templateCache) {
        return function modalFactory (config) {
            if (!(!config.template ^ !config.templateUrl)) {
                throw new Error('Expected modal to have exacly one of either `template` or `templateUrl`');
            }

            var template      = config.template,
                controller    = config.controller || angular.noop,
                controllerAs  = config.controllerAs,
                container     = angular.element(config.container || document.body),
                element       = null,
                dialogCounter = 0,
                html,
                scope;

            if (config.template) {
                var deferred = $q.defer();
                deferred.resolve(config.template);
                html = deferred.promise;
            } else {
                var deferred = $q.defer();
                deferred.resolve($templateCache.get(config.templateUrl));
                html = deferred.promise;
            }

            function activate (locals) {
                return html.then(function (html) {
                    if (!element) {
                        attach(html, locals);
                    }
                });
            }

            function setDialogCounter(value) {
                dialogCounter = value;

                if(dialogCounter > 0) {
                    angular.element(document.querySelectorAll('body, html')).addClass('has-open-dialog');
                } else {
                    angular.element(document.querySelectorAll('body, html')).removeClass('has-open-dialog');
                }
            }

            function attach (html, locals) {
                element = angular.element(html);
                if (element.length === 0) {
                    throw new Error('The template contains no elements; you need to wrap text nodes')
                }
                $animate.enter(element, container);
                scope = $rootScope.$new();
                scope.closeIt = deactivate;
                if (locals) {
                    for (var prop in locals) {
                        scope[prop] = locals[prop];
                    }
                }
                var ctrl = $controller(controller, { $scope: scope });
                if (controllerAs) {
                    scope[controllerAs] = ctrl;
                }
                $compile(element)(scope);

                setDialogCounter(++dialogCounter);
            }

            function deactivate () {
                setDialogCounter(--dialogCounter);

                var deferred = $q.defer();
                if (element) {
                    $animate.leave(element, function () {
                        scope.$destroy();
                        element = null;
                        deferred.resolve();
                    });
                } else {
                    deferred.resolve();
                }
                return deferred.promise;
            }

            function active () {
                return !!element;
            }

            return {
                activate: activate,
                deactivate: deactivate,
                active: active
            };
        };
    }]);

app.service('EditorService',['$rootScope', 'PrimitiveObjectService', 'WindowResizeService', '$state', 'RequestService', '$stateParams', function($rootScope, PrimitiveObjectService, WindowResizeService, $state, RequestService, $stateParams) {


    var _this = this;

    /**
     * returns new default scene with lightning
     * @returns {Scene}
     */
    function getNewScene(){
        var scene = new THREE.Scene();

//        var axes = new THREE.AxisHelper(100);
//        axes.position.y = 0.001;
//        this.scene.add(axes);
//        var gridXZ = new THREE.GridHelper(100, 1);
//        this.scene.add(gridXZ);

        //TODO: check why exporter has a problem with point light
        var light = new THREE.HemisphereLight( 0x0000ff, 0x00ff00, 0.8 );
        light.position.set( 10, 10, 10 );
        scene.add( light );
        return scene;
    }

    /**
     * parse scene loaded from api
     * @param res
     */
    function resolveScene(res) {
        console.log(res);
        if(res.data.file) {

            var sceneLoader = new THREE.SceneLoader();
            sceneLoader.parse(JSON.parse(res.data.file), function (e) {
                _this.scene = e.scene;
                _this.render();
            }, '.');
        } else {
            _this.scene = getNewScene();
            _this.render();
        }
    }

    this.render = function() {
        requestAnimationFrame( _this.render );
        _this.renderer.render( _this.scene, _this.camera );
    };

    this.init = function(container){
        this.container = container;
        this.scene = {};
        this.camera = new THREE.PerspectiveCamera( 75, this.container[0].clientWidth / this.container[0].clientHeight, 0.1, 1000 );
        this.renderer = new THREE.WebGLRenderer({
            precision: 'highp',
            antialias: true

        });
        this.renderer.setClearColor( 0x1C2229, 1);
        this.renderer.setSize( this.container[0].clientWidth, this.container[0].clientHeight );
        this.container[0].appendChild( this.renderer.domElement );

        this.camera.position.z = 10;
        this.camera.position.y = 5;
        this.camera.lookAt(new THREE.Vector3(0,0,0));

        WindowResizeService.init(this.renderer, this.camera, this.container[0]);

        if($state.current.name == 'template'){
            RequestService.get('templatescenes/specific', {scene_id: $stateParams['templateId']}, resolveScene);
        } else {
            RequestService.post('scenes/specific', {scene_id: $stateParams['sceneId']}, resolveScene);
        }

    };

    this.zoomIn = function(zoomFactor){
        this.camera.fov *= zoomFactor;
        this.camera.updateProjectionMatrix();
    };

    this.getObjects = function(){
        return this.scene.children;
    };

    this.addNewPrimitive = function(type){
        var object = PrimitiveObjectService.getObject(type);
        this.scene.add(object);
    }

}]);
app.service('EventService', ['RequestService', '$rootScope', 'AUTH_EVENTS', 'ModalService', '$state',
    function (RequestService, $rootScope, AUTH_EVENTS, ModalService, $state) {


        this.redirect = function (nick) {
            var redirectState = {
                name: 'user',
                params: {
                    username: nick
                }
            };
            if($rootScope.nextState){
                redirectState.name = $rootScope.nextState.next.name;
                redirectState.params = $rootScope.nextState.params;
            }
            $state.go(redirectState.name, redirectState.params, {reload: true});
        };

        this.redirectLandingPage = function() {
            $state.go('app');
        };

        this.saveNextState = function(next){
            $rootScope.nextState = next;
        };

        this.handleAuthorization = function(data){
            this.saveNextState(data);
            ModalService.openModal('login');
        };

        var that = this;
        $rootScope.$on(AUTH_EVENTS.notAuthenticated,  function(event,data){
            that.handleAuthorization(data);
        });
        $rootScope.$on(AUTH_EVENTS.notAuthorized, function(event,data){
            that.handleAuthorization(data);
        });
        $rootScope.$on(AUTH_EVENTS.sessionTimeout, function() {
            ModalService.openModal('login');
        });
        $rootScope.$on(AUTH_EVENTS.loginSuccess, function(event, data) {
            ModalService.closeModal('login');
            var nick = data ? data.nick : null;
            $rootScope.currentUser = nick;
            that.redirect(nick);
        });
        $rootScope.$on(AUTH_EVENTS.registerSuccess, function(event, data) {
            var nick = data ? data.nick : null;
            $rootScope.currentUser = nick;
            that.redirect(nick);
        });
        $rootScope.$on(AUTH_EVENTS.logoutSuccess, function(){
            $rootScope.currentUser = '';
            that.redirectLandingPage();
        });
    }]);
app.service('ModalService',['$rootScope', 'btfModal', function($rootScope, btfModal) {

    var modals = {
        'login': btfModal({
            controller: 'LoginController',
            controllerAs: 'ctrl',
            templateUrl: 'partials/dialog/login.html'
        }),
        'help': btfModal({
            controller: 'HelpController',
            controllerAs: 'ctrl',
            templateUrl: 'partials/dialog/help.html'
        }),
        'feedback': btfModal({
            controller: 'FeedbackController',
            controllerAs: 'ctrl',
            templateUrl: 'partials/dialog/feedback.html'
        }),
        'newProject': btfModal({
            controller: 'NewProjectController',
            controllerAs: 'ctrl',
            templateUrl: 'partials/dialog/newProject.html'
        }),
        'newScene': btfModal({
            controller: 'NewSceneController',
            controllerAs: 'ctrl',
            templateUrl: 'partials/dialog/newScene.html'
        }),
        'newSceneTemplate': btfModal({
            controller: 'NewSceneTemplateController',
            controllerAs: 'ctrl',
            templateUrl: 'partials/dialog/newSceneTemplate.html'
        }),
        'newAsset': btfModal({
            controller: 'NewAssetController',
            controllerAs: 'ctrl',
            templateUrl: 'partials/dialog/newAsset.html'
        })
    };

    this.openModal = function(modalName){
        if(!modals[modalName]){
            console.error('Modal "' + modalName + '" does not exist in ModalService');
        }
        modals[modalName].activate();
    };
    this.closeModal = function(modalName){
        if(!modals[modalName]){
            console.error('Modal does not exist in ModalService');
        }
        modals[modalName].deactivate();
    };

    $rootScope.openModal = this.openModal;
    $rootScope.closeModal = this.closeModal;


}]);
app.service('ObjectSelectionService',['$rootScope', 'EditorService', function($rootScope, EditorService) {


    this.init = function(container){
        //only suitable for editor
        var intersects;
        var vector = new THREE.Vector3();
        var raycaster = new THREE.Raycaster();
        var dir = new THREE.Vector3();




        container[0].addEventListener( 'click', function(event){

            if ( EditorService.camera instanceof THREE.OrthographicCamera ) {

                vector.set( ( event.clientX / container[0].clientWidth ) * 2 - 1, - ( (event.clientY - container[0].offsetTop) / container[0].clientHeight ) * 2 + 1, - 1 ); // z = - 1 important!

                vector.unproject( EditorService.camera );

                dir.set( 0, 0, - 1 ).transformDirection( EditorService.camera.matrixWorld );

                raycaster.set( vector, dir );

            } else if ( EditorService.camera instanceof THREE.PerspectiveCamera ) {

                vector.set( ( event.clientX / container[0].clientWidth ) * 2 - 1, - ( (event.clientY - container[0].offsetTop) / container[0].clientHeight ) * 2 + 1, 0.5 ); // z = 0.5 important!

                vector.unproject( EditorService.camera );

                raycaster.set( EditorService.camera.position, vector.sub( EditorService.camera.position ).normalize() );

            }

            intersects = raycaster.intersectObjects( EditorService.scene.children, true );

            if(intersects.length){
                $rootScope.$emit('objectSelected', intersects[0].object);
            }

        }, false );

        return this;
    }


}]);
app.service('PrimitiveObjectService',[ function() {

/*    var supportedObjects = [
        'sphere',
        'cube',
        'plane',
        'cylinder'
    ];*/

    var supportedObjects = [
        {
            title: '3D Primitives',
            items: [
                'sphere',
                'cube',
                'plane',
                'cylinder'
            ]
        }, {
            title: '2D Primitives',
            items: [
                'empty',
                'empty'
            ]
        }, {
            title: 'Models',
            items: [
                'empty',
                'empty'
            ]
        }
    ];

    var container = angular.element(document.getElementById('editor-view-container'))[0];

    function setMaterialProperties(object){
        object.material.side = THREE.DoubleSide;
        object.material.transparent = true;
    }

    this.getObject = function(type) {

//        if(supportedObjects.indexOf(type) == -1){
//            throw 'selected object not supported';
//        }
        var material = new THREE.MeshPhongMaterial( { ambient: 0x030303, color: 0x0088DA, specular: 0x000099, shininess: 30, shading: THREE.FlatShading } );
        var geometry;

        switch(type) {
            case 'sphere':
                geometry = new THREE.SphereGeometry( 1, 100, 100 );
                break;
            case 'cube':
                geometry = new THREE.BoxGeometry( 1, 1, 1 );
                break;
            case 'plane':
                geometry = new THREE.PlaneGeometry( 1, 4, 6 );
                break;
            case 'cylinder':
                geometry = new THREE.CylinderGeometry( 1, 1, 5, 200 );
                break;
        }
        var object = new THREE.Mesh( geometry, material );
        setMaterialProperties(object);

        return object;
    };

    this.getSupportedObjectTypes = function(){
        return supportedObjects;
    };

}]);
app.service('RequestService', ['$http', '$upload', 'SessionService', function ($http, $upload, SessionService) {

    /**
     * getCredentialsObject
     * e.g. getCredentialsObject()
     *
     * @return {Object}
     */
    function getCredentialsObject() {
        return {
            nick: SessionService.nick,
            token: SessionService.token
        };
    }
    /**
     * getFullActionUrl
     * e.g. getFullActionUrl()
     *
     * @param {String} action e.g. 'users/login'
     *
     * @return {String}
     */
    function getFullActionUrl(action) {
        // TODO: Cleanup ENV
        var url = 'http://localhost:3000/api/v1';
        url = 'https://blick.herokuapp.com';
        return url + '/' + action + '.json';
    }
    /**
     * getFullActionUrl
     * e.g. getFullActionUrl()
     *
     * Helper Function for module ng-file-upload
     *
     * TODO: Refactor to Recursive
     */
    function formDataAppender(fd, key, val) {
        if (angular.isObject(val)) {
            angular.forEach(val, function(val_in, key_in) {
                if(angular.isObject(val_in)) {
                    angular.forEach(val_in, function(val_in_in, key_in_in) {
                        fd.append(key + '[' + key_in + '][' + key_in_in + ']', val_in_in);
                    });
                } else {
                    fd.append(key + '[' + key_in + ']', val_in);
                }
            });
        } else {
            fd.append(key, val);
        }
    }
    /**
     * RequestService.post
     * e.g. RequestService.post('users/login', {field: 'content'}, function callback(){}, function errorCallback(){})
     *
     * @param action {String} e.g. 'users/login'
     * @param data {Object} e.g. {field: 'content'}
     * @param callback {Function}
     * @param errorCallback {Function}
     */
    this.post = function(action, data, callback, errorCallback) {

        return $http
            .post(getFullActionUrl(action), { user: getCredentialsObject(), data: data })
            .success(function(res){
                callback(res);
            })
            .error(function(res){
               errorCallback(res);

                /* $rootScope.$broadcast({
                 401: AUTH_EVENTS.notAuthenticated,
                 403: AUTH_EVENTS.notAuthorized,
                 419: AUTH_EVENTS.sessionTimeout,
                 440: AUTH_EVENTS.sessionTimeout
                 */
            });
    };
    /**
     * RequestService.get
     * e.g. RequestService.get('users/login', {field: 'content'}, function callback(){}, function errorCallback(){})
     *
     * NOTE: Auth is not supported with this function
     * It's barely used in this project
     *
     * @param action {String} e.g. 'users/login'
     * @param data {Object} e.g. {field: 'content'}
     * @param callback {Function}
     * @param errorCallback {Function}
     */
    this.get = function(action, data, callback, errorCallback) {

        return $http
            .get(getFullActionUrl(action), { params: data })
            .success(function(res){
                callback(res);
            })
            .error(function(res){
                errorCallback(res);

                /* $rootScope.$broadcast({
                 401: AUTH_EVENTS.notAuthenticated,
                 403: AUTH_EVENTS.notAuthorized,
                 419: AUTH_EVENTS.sessionTimeout,
                 440: AUTH_EVENTS.sessionTimeout
                 */
            });
    };
    /**
     * RequestService.upload
     * e.g. RequestService.upload('projects/assets/create', {field: 'content'}, function callback(){}, function errorCallback(){})
     *
     * @param action {String} e.g. 'projects/assets/create'
     * @param data {Object} e.g. {field: 'content'}
     * @param callback {Function}
     * @param errorCallback {Function}
     * @param progressCallback {Function} e.g. progressCallback(progressPercentage, evt)
     */
    this.upload = function(action, data, file, callback, errorCallback, progressCallback) {
        data = data || {};

        return $upload.upload({
            url: getFullActionUrl(action),
            method: 'post',
            fileFormDataName: 'data[asset][file]',
            formDataAppender: formDataAppender,
            fields: { user: getCredentialsObject(), data: data},
            file: file
        }).progress(function(event) {
            var progressPercentage = parseInt(100.0 * event.loaded / event.total);
            progressCallback(progressPercentage, event);
        }).success(function(res) {
            callback(res);
        }).error(function(res) {
            errorCallback(res);
        });
    };

}]);
app.service('SessionService', ['USER_ROLES', '$crypto', function (USER_ROLES, $crypto) {

    this.token = null;
    this.nick = null;
    this.email = null;
    this.userRole = USER_ROLES.guest;

    var _this = this;

    this.create = function (token, nick, email, userRole) {
        this.token = token;
        this.nick = nick;
        this.email = email;
        this.userRole = userRole;

        this.setLocalCredentials();
    };

    this.destroy = function () {
        this.token = null;
        this.nick = null;
        this.email = null;
        this.userRole = USER_ROLES.guest;

        this.removeLocalCredentials();
    };

    this.getUser = function () {
        return {
            token: this.token,
            nick: this.nick,
            email: this.email,
            userRole: this.userRole
        }
    };

    this.isAdmin = function () {
        return _this.userRole == USER_ROLES.admin;
    };

    this.getRole = function () {
        return this.userRole;
    };
    this.setLocalCredentials = function () {
        var userData = JSON.stringify(this.getUser());
        var encrypted = $crypto.encrypt(userData, '360crd');
        localStorage.setItem('blick-ls', encrypted);
    };

    this.getLocalCredentials = function () {
        var encrypted = localStorage.getItem('blick-ls');

        if(!encrypted) {
            return false;
        }

        var decrypted = $crypto.decrypt(encrypted, '360crd');
        return JSON.parse(decrypted);
    };

    this.removeLocalCredentials = function () {
        localStorage.removeItem('blick-ls');
    };

    this.reloadLocalCredentials = function () {
        var localCredentials = this.getLocalCredentials();

        if(localCredentials) {
            this.create(localCredentials.token, localCredentials.nick, localCredentials.email, localCredentials.userRole);
        }
    };

    return this;
}]);
app.service('WindowResizeService',[ function() {

    this.init = function(renderer, camera, container){
        var callback	= function(){
            // notify the renderer of the size change
//            renderer.setSize( container.clientWidth, container.clientHeight );
            // update the camera
            camera.aspect	= container.clientWidth / container.clientHeight;
            camera.updateProjectionMatrix();
        }
        // bind the resize event
        window.addEventListener('resize', callback, false);
        // return .stop() the function to stop watching window resize
        return {
            /**
             * Stop watching window resize
             */
            stop	: function(){
                window.removeEventListener('resize', callback);
            }
        };
    }


}]);
'use strict';

app.controller('LoginController', ['$scope', '$rootScope', 'AUTH_EVENTS', 'AuthService', function ($scope, $rootScope, AUTH_EVENTS, AuthService) {

    $scope.credentials = {
        nick: '',
        password: ''
    };

    $scope.login = function (credentials) {

        AuthService.login(credentials);
    };
}]);

'use strict';

app.controller('RegisterController', ['$scope', '$rootScope', 'AUTH_EVENTS', 'RequestService', 'SessionService', function ($scope, $rootScope, AUTH_EVENTS, RequestService, SessionService) {

    $scope.credentials = {};

    $scope.close = function (val) {

    };

    $scope.register = function (credentials) {
        RequestService.post('users/register', credentials, function(res){
            SessionService.create(res.token, res.nick, res.email, 'editor');
            $rootScope.$broadcast(AUTH_EVENTS.registerSuccess, {nick: res.nick});
        }, function () {
            $rootScope.$broadcast(AUTH_EVENTS.registerFailed);
        });
    };
}]);

'use strict';

  app.controller('EditorController', ['$scope', '$rootScope', 'AuthService', 'EditorService', 'PrimitiveObjectService', '$stateParams', '$state', 'RequestService', function ($scope, $rootScope, AuthService, EditorService, PrimitiveObjectService, $stateParams, $state, RequestService) {

      $scope.projectId = $stateParams['projectId'];
      $scope.username = $stateParams['username'];


      $scope.zoomIn = function(){
          EditorService.zoomIn(0.9);
      }
      $scope.zoomOut = function(){
          EditorService.zoomIn(1.1);
      }

      $scope.save = function(){
          var exporter = new THREE.SceneExporter();
          var sceneJson = JSON.stringify(exporter.parse(EditorService.scene));

          var scene = {
              file: sceneJson
          };
          var route;

          if($state.current.name == 'template'){
              scene.id = $stateParams['templateId'];
              route = 'templatescenes/update';
          }else{
              scene.id = $stateParams['sceneId'];
              route = 'scenes/update';
          }
          RequestService.post(route, {scene: scene}, function(res) {
                  console.log(res);
              }, function(error) {
                  console.log(error);
              }
          );
      }

      $scope.addNewObject = function(type){
          EditorService.addNewPrimitive(type);
      }

      $scope.getSceneObjects = function(){
          return EditorService.getObjects();
      };


      $scope.getSupportedPrimitiveObjects = function(){
          return PrimitiveObjectService.getSupportedObjectTypes();
      }

  }]);


'use strict';

app.controller('AccountSettingsController', ['$scope', '$stateParams', function ($scope, $stateParams) {
    $scope.username = $stateParams.username;
}]);

'use strict';

app.controller('UserBlickController', ['$scope', '$stateParams', '$state', function ($scope, $stateParams, $state) {
    if (!$stateParams.blickId) {
        $state.go('user');
    }
    $scope.username = $stateParams.username;
    $scope.blickId = $stateParams.blickId;
}]);

'use strict';

app.controller('UserController', ['$scope', '$stateParams', function ($scope, $stateParams) {
    $scope.username = $stateParams.username;
}]);
'use strict';

app.controller('UserProjectsController', ['$scope', '$rootScope', '$stateParams', 'RequestService', 'Project', function ($scope, $rootScope, $stateParams, RequestService, Project) {
    $scope.username = $stateParams['username'];


    $scope.projects = Project.get(function(projects){
        $scope.projects = projects;
    });

    $scope.deleteProject = function(projectId){
        RequestService.post('projects/delete', {projectId: projectId}, function(res) {
                console.log(res);
            }, function(error) {
                console.log(error);
            }
        );

    }

}]);


'use strict';

app.controller('UserSettingsController', ['$scope', '$stateParams', function ($scope, $stateParams) {
    $scope.username = $stateParams.username;
}]);

'use strict';

app.controller('NewSceneTemplateController', ['$scope', 'RequestService', '$rootScope', function ($scope, RequestService, $rootScope) {


    $scope.newScene = {
        title: null,
        description: null
    };

    $scope.createNewSceneTemplate = function(){
        var scene = {
            title: $scope.newSceneTemplate.title
        };

        if($scope.newSceneTemplate.title){
            RequestService.post('templatescenes/create', {scene: scene}, function(res) {
                    $rootScope.$emit('newSceneTemplateCreated', res.data);
                }, function(error) {
                    console.log(error);
                }
            );
        }
    }
}]);

'use strict';

app.controller('SceneTemplatesController', ['$scope', 'SceneTemplate', '$rootScope', '$stateParams', function ($scope, SceneTemplate, $rootScope, $stateParams) {

    $scope.username = $stateParams.username;

    $scope.templates = SceneTemplate.get(function(sceneTemplates){
        $scope.templates = sceneTemplates;
    });

    $rootScope.$on('newSceneTemplateCreated', function(event, data){
        $scope.templates.push(data);
    });

}]);


'use strict';

app.controller('NewAssetController', ['$scope', '$rootScope', '$stateParams', 'RequestService', 'Project', 'Asset',
    function ($scope, $rootScope, $stateParams, RequestService, Project, Asset) {

    $scope.currentProjectId = $stateParams['projectId'];

    $scope.newAsset = {
        title: null,
        file: null,
        description: null,
        uploadData: {project: {id: $scope.currentProjectId}}
    };

    function setCurrentProjectName(){
        for (var i in $scope.projects) {
            if($scope.projects[i].id == $scope.currentProjectId){
                $scope.currentProjectName = $scope.projects[i].title;
                return;
            }
        }
    }

    $scope.projects = Project.get(function(projects){
        $scope.projects = projects;
        setCurrentProjectName();
    });

    if($scope.projects.length > 0){
        setCurrentProjectName();
    }

    $scope.onProjectSelect = function(id){
        $scope.currentProjectId = id;
    };

    $scope.createNewAsset = function() {
        console.log(Asset.create);
        //Asset.create($scope.currentProjectId, $scope.newAsset);
    };

}]);

'use strict';

app.controller('NewProjectController', ['$scope', '$rootScope', '$stateParams', 'RequestService', 'Project', function ($scope, $rootScope, $stateParams, RequestService, Project) {

    $scope.newProject = {
        title: null,
        description: null
    };

    $scope.createNewProject = function(){
        Project.create($scope.newProject);
    }
}]);

'use strict';

app.controller('NewSceneController', ['$scope', 'RequestService', '$stateParams', '$rootScope', 'Project', '$state', 'SceneTemplate', function ($scope, RequestService, $stateParams, $rootScope, Project, $state, SceneTemplate) {


    $scope.currentProjectId = $stateParams['projectId'];

    function setCurrentProjectName(){
        for (var i in $scope.projects) {
            if($scope.projects[i].id == $scope.currentProjectId){
                $scope.currentProjectName = $scope.projects[i].title;
                return;
            }
        }
    }

    $scope.projects = Project.get(function(projects){
        $scope.projects = projects;
        setCurrentProjectName();
    });
    if($scope.projects.length > 0){
        setCurrentProjectName();
    }

    $scope.onProjectSelect = function(id){
        $scope.currentProjectId = id;
    };

    $scope.templates = SceneTemplate.get(function(templates){
        $scope.templates = templates;
    });

    $scope.onTemplateSelect = function(id){
        $scope.currentTemplateId = id;
    };

    $scope.newScene = {
        title: null,
        description: null
    };

    $scope.createNewScene = function(){
        var data = {
            project: {id: $scope.currentProjectId},
            scene: {
                title: $scope.newScene.title,
                template_id: $scope.currentTemplateId
            }
        };

        console.log(data);

        if($scope.newScene.title){
            RequestService.post('scenes/create', data, function(res) {
                    console.log(res);
                    //if a scene is added to another than current project the view is switched to the other project
                    if($stateParams['projectId'] != $scope.currentProjectId){
                        $state.go('user.project.scenes', {username: $stateParams['username'], projectId: $scope.currentProjectId})
                    }
                    $rootScope.$emit('newSceneCreated', res.data);
                }, function(error) {
                    console.log(error);
                }
            );
        }
    }
}]);

'use strict';

app.controller('ProjectAssetsController', ['$scope', '$stateParams', 'RequestService', 'Asset', function ($scope, $stateParams, RequestService, Asset) {
    $scope.username = $stateParams.username;
    var projectId = $stateParams['projectId'];

    $scope.assets = [];

    function removeAssetFromArray(asset) {
        var index = $scope.assets.indexOf(asset);
        $scope.assets.splice(index, 1);
    }

    $scope.getAssetBackgroundImage = function getAssetBackgroundImage(asset) {
        return {
            'background-image': 'url(' + asset.file.url + ')'
        };
    };

    $scope.deleteProjectAsset = function deleteAsset(asset) {
        RequestService.post('projects/assets/delete', {asset: {id: asset.id}}, function(res) {
                removeAssetFromArray(asset);
            }, function(error) {
                console.log(error);
            }
        );
    };

    function getProjectAssets() {

        RequestService.post('projects/assets/get_from_project', {project: {id: projectId}}, function(res) {
                $scope.assets = res.data;
                console.log($scope.assets);
            }, function(error) {
                console.log(error);
            }
        );
    }

    getProjectAssets();

/*    $rootScope.$on('newAssetCreated', function(event, data){
        $scope.scenes.push(data);
    });*/

}]);

'use strict';

app.controller('ProjectController', ['$scope', '$stateParams', 'RequestService', function ($scope, $stateParams, RequestService) {
    $scope.username = $stateParams['username'];
    $scope.projectId = $stateParams['projectId'];


}]);

'use strict';

app.controller('ProjectScenesController', ['$scope', '$stateParams', 'RequestService', '$rootScope', function ($scope, $stateParams, RequestService, $rootScope) {
    $scope.username = $stateParams.username;
    $scope.projectId = $stateParams.projectId;

    $scope.scenes = [];

    function getAllScenes() {
        RequestService.post('scenes/get_scenes', {project: {id: $stateParams['projectId']}}, function(res) {
                $scope.scenes = res.data;
            }, function(error) {
                console.log(error);
            }
        );
    }

    getAllScenes();


    $rootScope.$on('newSceneCreated', function(event, data){
        $scope.scenes.push(data);
    });
}]);

'use strict';

app.controller('ProjectSettingsController', ['$scope', '$stateParams', function ($scope, $stateParams) {
    $scope.username = $stateParams.username;
    $scope.projectId = $stateParams.projectId;
}]);
