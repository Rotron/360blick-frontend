/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.SceneExporter = function () {};

THREE.SceneExporter.prototype = {

    constructor: THREE.SceneExporter,

    parse: function ( scene ) {

        var position = Vector3String( scene.position );
        var rotation = Vector3String( scene.rotation );
        var scale = Vector3String( scene.scale );

        var nobjects = 0;
        var ngeometries = 0;
        var nmaterials = 0;
        var ntextures = 0;

        var objectsArray = [];
        var geometriesArray = [];
        var materialsArray = [];
        var texturesArray = [];
        var fogsArray = [];

        var geometriesMap = {};
        var materialsMap = {};
        var texturesMap = {};

        // extract objects, geometries, materials, textures

        var checkTexture = function ( map ) {

            if ( ! map ) return;

            if ( ! ( map.id in texturesMap ) ) {

                texturesMap[ map.id ] = true;
                texturesArray.push( TextureString( map ) );
                ntextures += 1;

            }

        };

        var linesArray = [];

        function createObjectsList( object, pad ) {

            for ( var i = 0; i < object.children.length; i ++ ) {

                var node = object.children[ i ];

                if ( node instanceof THREE.Mesh ) {

                    linesArray.push( MeshString( node, pad ) );
                    nobjects += 1;

                    if ( ! ( node.geometry.id in geometriesMap ) ) {

                        geometriesMap[ node.geometry.id ] = true;
                        geometriesArray.push( GeometryString( node.geometry ) );
                        ngeometries += 1;

                    }

                    if ( ! ( node.material.id in materialsMap ) ) {

                        materialsMap[ node.material.id ] = true;
                        materialsArray.push( MaterialString( node.material ) );
                        nmaterials += 1;

                        checkTexture( node.material.map );
                        checkTexture( node.material.envMap );
                        checkTexture( node.material.lightMap );
                        checkTexture( node.material.specularMap );
                        checkTexture( node.material.bumpMap );
                        checkTexture( node.material.normalMap );

                    }

                } else if ( node instanceof THREE.Light ) {

                    linesArray.push( LightString( node, pad ) );
                    nobjects += 1;

                } else if ( node instanceof THREE.Camera ) {

                    linesArray.push( CameraString( node, pad ) );
                    nobjects += 1;

                } else if ( node instanceof THREE.Object3D ) {

                    linesArray.push( ObjectString( node, pad ) );
                    nobjects += 1;

                }

                if ( node.children.length > 0 ) {

                    linesArray.push( PaddingString( pad + 1 ) + '\t\t"children" : {' );

                }

                createObjectsList( node, pad + 2 );

                if ( node.children.length > 0 ) {

                    linesArray.push( PaddingString( pad + 1 ) + "\t\t}" );

                }

                linesArray.push( PaddingString( pad ) + "\t\t}" + ( i < object.children.length - 1 ? ",\n" : "" ) );

            }

        }

        createObjectsList( scene, 0 );

        var objects = linesArray.join( "\n" );

        // extract fog

        if ( scene.fog ) {

            fogsArray.push( FogString( scene.fog ) );

        }

        // generate sections

        var geometries = generateMultiLineString( geometriesArray, ",\n\n\t" );
        var materials = generateMultiLineString( materialsArray, ",\n\n\t" );
        var textures = generateMultiLineString( texturesArray, ",\n\n\t" );
        var fogs = generateMultiLineString( fogsArray, ",\n\n\t" );

        // generate defaults

        var activeCamera = null;

        scene.traverse( function ( node ) {

            if ( node instanceof THREE.Camera && node.userData.active ) {

                activeCamera = node;

            }

        } );

        var defcamera = LabelString( activeCamera ? getObjectName( activeCamera ) : "" );
        var deffog = LabelString( scene.fog ? getFogName( scene.fog ) : "" );

        // templates

        function Vector2String( v ) {

            return "[" + v.x + "," + v.y + "]";

        }

        function Vector3String( v ) {

            return "[" + v.x + "," + v.y + "," + v.z + "]";

        }

        function ColorString( c ) {

            return "[" + c.r.toFixed( 3 ) + "," + c.g.toFixed( 3 ) + "," + c.b.toFixed( 3 ) + "]";

        }

        function LabelString( s ) {

            return '"' + s + '"';

        }

        function NumConstantString( c ) {

            var constants = [ "NearestFilter", "NearestMipMapNearestFilter", "NearestMipMapLinearFilter",
                "LinearFilter", "LinearMipMapNearestFilter", "LinearMipMapLinearFilter" ];

            for ( var i = 0; i < constants.length; i ++ ) {

                if ( THREE[ constants[ i ] ] === c ) return LabelString( constants[ i ] );

            };

            return "";

        }

        function PaddingString( n ) {

            var output = "";

            for ( var i = 0; i < n; i ++ ) output += "\t";

            return output;

        }


        //

        function LightString( o, n ) {

            if ( o instanceof THREE.AmbientLight ) {

                var output = [

                    '\t\t' + LabelString( getObjectName( o ) ) + ' : {',
                    '	"type"  : "AmbientLight",',
                    '	"color" : ' + o.color.getHex() + ( o.children.length ? ',' : '' )

                ];

            } else if ( o instanceof THREE.AreaLight ) {

                var output = [

                    '\t\t' + LabelString( getObjectName( o ) ) + ' : {',
                    '	"type"      : "AreaLight",',
                    '	"color"     : ' + o.color.getHex() + ',',
                    '	"position" : ' + Vector3String( o.position ) + ',',
                    '	"rotation" : ' + Vector3String( o.rotation ) + ',',
                    '	"width" : ' + o.width + ',',
                    '	"height" : ' + o.height + ',',
                    '	"intensity" : ' + o.intensity + ( o.children.length ? ',' : '' )

                ];

            } else if ( o instanceof THREE.DirectionalLight ) {

                var output = [

                    '\t\t' + LabelString( getObjectName( o ) ) + ' : {',
                    '	"type"      : "DirectionalLight",',
                    '	"color"     : ' + o.color.getHex() + ',',
                    '	"intensity" : ' + o.intensity + ',',
                    '	"direction" : ' + Vector3String( o.position ) + ',',
                    '	"target"    : ' + LabelString( getObjectName( o.target ) ) + ( o.children.length ? ',' : '' )

                ];

            } else if ( o instanceof THREE.PointLight ) {

                var output = [

                    '\t\t' + LabelString( getObjectName( o ) ) + ' : {',
                    '	"type"           : "PointLight",',
                    '	"color"          : ' + o.color.getHex() + ',',
                    '	"intensity"      : ' + o.intensity + ',',
                    '	"position"       : ' + Vector3String( o.position ) + ',',
                    '	"distance"       : ' + o.distance + ( o.children.length ? ',' : '' )

                ];

            } else if ( o instanceof THREE.SpotLight ) {

                var output = [

                    '\t\t' + LabelString( getObjectName( o ) ) + ' : {',
                    '	"type"           : "SpotLight",',
                    '	"color"          : ' + o.color.getHex() + ',',
                    '	"intensity"      : ' + o.intensity + ',',
                    '	"position"       : ' + Vector3String( o.position ) + ',',
                    '	"distance"       : ' + o.distance + ',',
                    '	"angle"          : ' + o.angle + ',',
                    '	"exponent"       : ' + o.exponent + ',',
                    '	"decay"          : ' + o.decay + ',',
                    '	"target"         : ' + LabelString( getObjectName( o.target ) ) + ( o.children.length ? ',' : '' )

                ];

            } else if ( o instanceof THREE.HemisphereLight ) {

                var output = [

                    '\t\t' + LabelString( getObjectName( o ) ) + ' : {',
                    '	"type"        : "HemisphereLight",',
                    '	"skyColor"    : ' + o.color.getHex() + ',',
                    '	"groundColor" : ' + o.groundColor.getHex() + ',',
                    '	"intensity"   : ' + o.intensity + ',',
                    '	"position"    : ' + Vector3String( o.position ) + ( o.children.length ? ',' : '' )

                ];

            } else {

                var output = [];

            }

            return generateMultiLineString( output, '\n\t\t', n );

        }

        function CameraString( o, n ) {

            if ( o instanceof THREE.PerspectiveCamera ) {

                var output = [

                    '\t\t' + LabelString( getObjectName( o ) ) + ' : {',
                    '	"type"     : "PerspectiveCamera",',
                    '	"fov"      : ' + o.fov + ',',
                    '	"aspect"   : ' + o.aspect + ',',
                    '	"near"     : ' + o.near + ',',
                    '	"far"      : ' + o.far + ',',
                    '	"position" : ' + Vector3String( o.position ) + ( o.children.length ? ',' : '' )

                ];

            } else if ( o instanceof THREE.OrthographicCamera ) {

                var output = [

                    '\t\t' + LabelString( getObjectName( o ) ) + ' : {',
                    '	"type"     : "OrthographicCamera",',
                    '	"left"     : ' + o.left + ',',
                    '	"right"    : ' + o.right + ',',
                    '	"top"      : ' + o.top + ',',
                    '	"bottom"   : ' + o.bottom + ',',
                    '	"near"     : ' + o.near + ',',
                    '	"far"      : ' + o.far + ',',
                    '	"position" : ' + Vector3String( o.position ) + ( o.children.length ? ',' : '' )

                ];

            } else {

                var output = [];

            }

            return generateMultiLineString( output, '\n\t\t', n );

        }

        function ObjectString( o, n ) {

            var output = [

                '\t\t' + LabelString( getObjectName( o ) ) + ' : {',
                '	"position" : ' + Vector3String( o.position ) + ',',
                '	"rotation" : ' + Vector3String( o.rotation ) + ',',
                '	"scale"	   : ' + Vector3String( o.scale ) + ',',
                '	"visible"  : ' + o.visible + ( o.children.length ? ',' : '' )

            ];

            return generateMultiLineString( output, '\n\t\t', n );

        }

        function MeshString( o, n ) {

            var output = [

                '\t\t' + LabelString( getObjectName( o ) ) + ' : {',
                '	"geometry" : ' + LabelString( getGeometryName( o.geometry ) ) + ',',
                '	"material" : ' + LabelString( getMaterialName( o.material ) ) + ',',
                '	"position" : ' + Vector3String( o.position ) + ',',
                '	"rotation" : ' + Vector3String( o.rotation ) + ',',
                '	"scale"	   : ' + Vector3String( o.scale ) + ',',
                '	"visible"  : ' + o.visible + ( o.children.length ? ',' : '' )

            ];

            return generateMultiLineString( output, '\n\t\t', n );

        }

        //

        function GeometryString( g ) {

            if ( g instanceof THREE.SphereGeometry ) {

                var output = [

                    '\t' + LabelString( getGeometryName( g ) ) + ': {',
                    '	"type"    : "sphere",',
                    '	"radius"  : ' 		 + g.parameters.radius + ',',
                    '	"widthSegments"  : ' + g.parameters.widthSegments + ',',
                    '	"heightSegments" : ' + g.parameters.heightSegments,
                    '}'

                ];

            } else if ( g instanceof THREE.BoxGeometry ) {

                var output = [

                    '\t' + LabelString( getGeometryName( g ) ) + ': {',
                    '	"type"    : "cube",',
                    '	"width"  : '  + g.parameters.width  + ',',
                    '	"height"  : ' + g.parameters.height + ',',
                    '	"depth"  : '  + g.parameters.depth  + ',',
                    '	"widthSegments"  : ' + g.widthSegments + ',',
                    '	"heightSegments" : ' + g.heightSegments + ',',
                    '	"depthSegments" : '  + g.depthSegments,
                    '}'

                ];

            } else if ( g instanceof THREE.PlaneGeometry ) {

                console.log(g);

                var output = [

                    '\t' + LabelString( getGeometryName( g ) ) + ': {',
                    '	"type"    : "plane",',
                    '	"width"  : '  + g.parameters.width  + ',',
                    '	"height"  : ' + g.parameters.height + ',',
                    '	"widthSegments"  : ' + (g.parameters.widthSegments || 1) + ',',
                    '	"heightSegments" : ' + (g.parameters.heightSegments || 1),
                    '}'

                ];

            } else if ( g instanceof THREE.CylinderGeometry ) {

                console.log(g);

                var output = [

                    '\t' + LabelString( getGeometryName( g ) ) + ': {',
                    '	"type"    : "cylinder",',
                    '	"radiusTop"  : '  + (g.parameters.radiusTop || 20)  + ',',
                    '	"radiusBottom"  : ' + (g.parameters.radiusBottom || 20) + ',',
                    '	"height"  : ' + (g.parameters.height || 100) + ',',
                    '	"radiusSegments"  : ' + (g.parameters.radiusSegments || 8) + ',',
                    '	"heightSegments"  : ' + (g.parameters.heightSegments || 1) + ',',
                    '	"openEnded"  : ' + (g.parameters.openEnded || 0) + ',',
                    '	"thetaStart"  : ' + (g.parameters.thetaStart || 0) + ',',
                    '	"thetaLength"  : ' + (g.parameters.thetaLength || (2 * Math.PI)),
                    '}'

                ];

            } else if ( g instanceof THREE.Geometry ) {

                if ( g.sourceType === "ascii" || g.sourceType === "ctm" || g.sourceType === "stl" || g.sourceType === "vtk" ) {

                    var output = [

                        '\t' + LabelString( getGeometryName( g ) ) + ': {',
                        '	"type" : ' + LabelString( g.sourceType ) + ',',
                        '	"url"  : ' + LabelString( g.sourceFile ),
                        '}'

                    ];

                } else {

                    var output = [];

                }

            } else {

                var output = [];

            }

            return generateMultiLineString( output, '\n\t\t' );

        }

        function MaterialString( m ) {

            if ( m instanceof THREE.MeshBasicMaterial ) {

                var output = [

                    '\t' + LabelString( getMaterialName( m ) ) + ': {',
                    '	"type"    : "MeshBasicMaterial",',
                    '	"parameters"  : {',
                    '		"color"  : ' 	+ m.color.getHex() + ',',

                    m.map ? 		'		"map" : ' + LabelString( getTextureName( m.map ) ) + ',' : '',
                    m.envMap ? 		'		"envMap" : ' + LabelString( getTextureName( m.envMap ) ) + ',' : '',
                    m.specularMap ? '		"specularMap" : ' + LabelString( getTextureName( m.specularMap ) ) + ',' : '',
                    m.lightMap ? 	'		"lightMap" : ' + LabelString( getTextureName( m.lightMap ) ) + ',' : '',

                    '		"reflectivity"  : ' + m.reflectivity + ',',
                    '		"transparent" : ' + m.transparent + ',',
                    '		"opacity" : ' 	+ m.opacity + ',',
                    '		"side" : ' 	+ m.side + ',',
                    '		"wireframe" : ' + m.wireframe + ',',
                    '		"wireframeLinewidth" : ' + m.wireframeLinewidth,
                    '	}',
                    '}'

                ];


            } else if ( m instanceof THREE.MeshLambertMaterial ) {

                var output = [

                    '\t' + LabelString( getMaterialName( m ) ) + ': {',
                    '	"type"    : "MeshLambertMaterial",',
                    '	"parameters"  : {',
                    '		"color"  : ' 	+ m.color.getHex() + ',',
                    '		"emissive"  : ' + m.emissive.getHex() + ',',

                    m.map ? 		'		"map" : ' + LabelString( getTextureName( m.map ) ) + ',' : '',
                    m.envMap ? 		'		"envMap" : ' + LabelString( getTextureName( m.envMap ) ) + ',' : '',
                    m.specularMap ? '		"specularMap" : ' + LabelString( getTextureName( m.specularMap ) ) + ',' : '',
                    m.lightMap ? 	'		"lightMap" : ' + LabelString( getTextureName( m.lightMap ) ) + ',' : '',

                    '		"reflectivity"  : ' + m.reflectivity + ',',
                    '		"transparent" : ' + m.transparent + ',',
                    '		"opacity" : ' 	+ m.opacity + ',',
                    '		"side" : ' 	+ m.side + ',',
                    '		"wireframe" : ' + m.wireframe + ',',
                    '		"wireframeLinewidth" : ' + m.wireframeLinewidth,
                    '	}',
                    '}'

                ];

            } else if ( m instanceof THREE.MeshPhongMaterial ) {

                var output = [

                    '\t' + LabelString( getMaterialName( m ) ) + ': {',
                    '	"type"    : "MeshPhongMaterial",',
                    '	"parameters"  : {',
                    '		"color"  : ' 	+ m.color.getHex() + ',',
                    '		"emissive"  : ' + m.emissive.getHex() + ',',
                    '		"specular"  : ' + m.specular.getHex() + ',',
                    '		"shininess" : ' + m.shininess + ',',

                    m.map ? 		'		"map" : ' + LabelString( getTextureName( m.map ) ) + ',' : '',
                    m.envMap ? 		'		"envMap" : ' + LabelString( getTextureName( m.envMap ) ) + ',' : '',
                    m.specularMap ? '		"specularMap" : ' + LabelString( getTextureName( m.specularMap ) ) + ',' : '',
                    m.lightMap ? 	'		"lightMap" : ' + LabelString( getTextureName( m.lightMap ) ) + ',' : '',
                    m.normalMap ? 	'		"normalMap" : ' + LabelString( getTextureName( m.normalMap ) ) + ',' : '',
                    m.bumpMap ? 	'		"bumpMap" : ' + LabelString( getTextureName( m.bumpMap ) ) + ',' : '',

                    '		"bumpScale"  : ' + m.bumpScale + ',',
                    '		"reflectivity"  : ' + m.reflectivity + ',',
                    '		"transparent" : ' + m.transparent + ',',
                    '		"opacity" : ' 	+ m.opacity + ',',
                    '		"side" : ' 	+ m.side + ',',
                    '		"wireframe" : ' + m.wireframe + ',',
                    '		"wireframeLinewidth" : ' + m.wireframeLinewidth,
                    '	}',
                    '}'

                ];

            } else if ( m instanceof THREE.MeshDepthMaterial ) {

                var output = [

                    '\t' + LabelString( getMaterialName( m ) ) + ': {',
                    '	"type"    : "MeshDepthMaterial",',
                    '	"parameters"  : {',
                    '		"transparent" : ' + m.transparent + ',',
                    '		"opacity" : ' 	+ m.opacity + ',',
                    '		"side" : ' 	+ m.side + ',',
                    '		"wireframe" : ' + m.wireframe + ',',
                    '		"wireframeLinewidth" : ' + m.wireframeLinewidth,
                    '	}',
                    '}'

                ];

            } else if ( m instanceof THREE.MeshNormalMaterial ) {

                var output = [

                    '\t' + LabelString( getMaterialName( m ) ) + ': {',
                    '	"type"    : "MeshNormalMaterial",',
                    '	"parameters"  : {',
                    '		"transparent" : ' + m.transparent + ',',
                    '		"opacity" : ' 	+ m.opacity + ',',
                    '		"side" : ' 	+ m.side + ',',
                    '		"wireframe" : ' + m.wireframe + ',',
                    '		"wireframeLinewidth" : ' + m.wireframeLinewidth,
                    '	}',
                    '}'

                ];

            } else if ( m instanceof THREE.MeshFaceMaterial ) {

                var output = [

                    '\t' + LabelString( getMaterialName( m ) ) + ': {',
                    '	"type"    : "MeshFaceMaterial",',
                    '	"parameters"  : {}',
                    '}'

                ];

            }

            return generateMultiLineString( output, '\n\t\t' );

        }

        function TextureString( t ) {

            // here would be also an option to use data URI
            // with embedded image from "t.image.src"
            // (that's a side effect of using FileReader to load images)
            console.log(t);
            var url = t.sourceFile || t.image.src;
            var output = [

                '\t' + LabelString( getTextureName( t ) ) + ': {',
                '	"url"    : "' + url + '",',
                '	"repeat" : ' + Vector2String( t.repeat ) + ',',
                '	"offset" : ' + Vector2String( t.offset ) + ',',
                '	"magFilter" : ' + NumConstantString( t.magFilter ) + ',',
                '	"minFilter" : ' + NumConstantString( t.minFilter ) + ',',
                '	"anisotropy" : ' + t.anisotropy,
                '}'

            ];

            console.log('output:', output);
            return generateMultiLineString( output, '\n\t\t' );

        }

        //

        function FogString( f ) {

            if ( f instanceof THREE.Fog ) {

                var output = [

                    '\t' + LabelString( getFogName( f ) ) + ': {',
                    '	"type"  : "linear",',
                    '	"color" : ' + ColorString( f.color ) + ',',
                    '	"near"  : '  + f.near + ',',
                    '	"far"   : '    + f.far,
                    '}'

                ];

            } else if ( f instanceof THREE.FogExp2 ) {

                var output = [

                    '\t' + LabelString( getFogName( f ) ) + ': {',
                    '	"type"    : "exp2",',
                    '	"color"   : '  + ColorString( f.color ) + ',',
                    '	"density" : ' + f.density,
                    '}'

                ];

            } else {

                var output = [];

            }

            return generateMultiLineString( output, '\n\t\t' );

        }

        //

        function generateMultiLineString( lines, separator, padding ) {

            var cleanLines = [];

            for ( var i = 0; i < lines.length; i ++ ) {

                var line = lines[ i ];

                if ( line ) {

                    if ( padding ) line = PaddingString( padding ) + line;
                    cleanLines.push(  line );

                }

            }

            return cleanLines.join( separator );

        }

        function getObjectName( o ) {

            return o.name ? o.name : "Object_" + o.id;

        }

        function getGeometryName( g ) {

            return g.name ? g.name : "Geometry_" + g.id;

        }

        function getMaterialName( m ) {

            return m.name ? m.name : "Material_" + m.id;

        }

        function getTextureName( t ) {

            return t.name ? t.name : "Texture_" + t.id;

        }

        function getFogName( f ) {

            return f.name ? f.name : "Default fog";

        }

        //

        var output = [
            '{',
            '	"metadata": {',
            '		"formatVersion" : 3.2,',
            '		"type"		: "scene",',
            '		"generatedBy"	: "SceneExporter",',
            '		"objects"       : ' + nobjects + ',',
            '		"geometries"    : ' + ngeometries + ',',
            '		"materials"     : ' + nmaterials + ',',
            '		"textures"      : ' + ntextures,
            '	},',
            '',
            '	"urlBaseType": "relativeToScene",',
            '',

            '	"objects" :',
            '	{',
            objects,
            '	},',
            '',

            '	"geometries" :',
            '	{',
            '\t' + 	geometries,
            '	},',
            '',

            '	"materials" :',
            '	{',
            '\t' + 	materials,
            '	},',
            '',

            '	"textures" :',
            '	{',
            '\t' + 	textures,
            '	},',
            '',

            '	"fogs" :',
            '	{',
            '\t' + 	fogs,
            '	},',
            '',

            '	"transform" :',
            '	{',
            '		"position"  : ' + position + ',',
            '		"rotation"  : ' + rotation + ',',
            '		"scale"     : ' + scale,
            '	},',
            '',
            '	"defaults" :',
            '	{',
            '		"camera"  : ' + defcamera + ',',
            '		"fog"  	  : ' + deffog,
            '	}',
            '}'
        ].join( '\n' );

        return JSON.parse( output );

    }

}
/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.SceneLoader = function ( manager ) {

    this.onLoadStart = function () {};
    this.onLoadProgress = function() {};
    this.onLoadComplete = function () {};

    this.callbackSync = function () {};
    this.callbackProgress = function () {};

    this.geometryHandlers = {};
    this.hierarchyHandlers = {};

    this.addGeometryHandler( "ascii", THREE.JSONLoader );

    this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

};

THREE.SceneLoader.prototype = {

    constructor: THREE.SceneLoader,

    load: function ( url, onLoad, onProgress, onError ) {

        var scope = this;

        var loader = new THREE.XHRLoader( scope.manager );
        loader.setCrossOrigin( this.crossOrigin );
        loader.load( url, function ( text ) {

            scope.parse( JSON.parse( text ), onLoad, url );

        }, onProgress, onError );

    },

    setCrossOrigin: function ( value ) {

        this.crossOrigin = value;

    },

    addGeometryHandler: function ( typeID, loaderClass ) {

        this.geometryHandlers[ typeID ] = { "loaderClass": loaderClass };

    },

    addHierarchyHandler: function ( typeID, loaderClass ) {

        this.hierarchyHandlers[ typeID ] = { "loaderClass": loaderClass };

    },

    parse: function ( json, callbackFinished, url ) {

        var scope = this;

        var urlBase = THREE.Loader.prototype.extractUrlBase( url );

        var geometry, material, camera, fog,
            texture, images, color,
            light, hex, intensity,
            counter_models, counter_textures,
            total_models, total_textures,
            result;

        var target_array = [];

        var data = json;

        // async geometry loaders

        for ( var typeID in this.geometryHandlers ) {

            var loaderClass = this.geometryHandlers[ typeID ][ "loaderClass" ];
            this.geometryHandlers[ typeID ][ "loaderObject" ] = new loaderClass();

        }

        // async hierachy loaders

        for ( var typeID in this.hierarchyHandlers ) {

            var loaderClass = this.hierarchyHandlers[ typeID ][ "loaderClass" ];
            this.hierarchyHandlers[ typeID ][ "loaderObject" ] = new loaderClass();

        }

        counter_models = 0;
        counter_textures = 0;

        result = {

            scene: new THREE.Scene(),
            geometries: {},
            face_materials: {},
            materials: {},
            textures: {},
            objects: {},
            cameras: {},
            lights: {},
            fogs: {},
            empties: {},
            groups: {}

        };

        if ( data.transform ) {

            var position = data.transform.position,
                rotation = data.transform.rotation,
                scale = data.transform.scale;

            if ( position ) {

                result.scene.position.fromArray( position );

            }

            if ( rotation ) {

                result.scene.rotation.fromArray( rotation );

            }

            if ( scale ) {

                result.scene.scale.fromArray( scale );

            }

            if ( position || rotation || scale ) {

                result.scene.updateMatrix();
                result.scene.updateMatrixWorld();

            }

        }

        function get_url( source_url, url_type ) {

            if ( url_type == "relativeToHTML" ) {

                return source_url;

            } else {
                if(source_url.substr(0, 4) == 'http'){
                    return source_url;
                }

                return urlBase + source_url;

            }

        };

        // toplevel loader function, delegates to handle_children

        function handle_objects() {

            handle_children( result.scene, data.objects );

        }

        // handle all the children from the loaded json and attach them to given parent

        function handle_children( parent, children ) {

            var mat, dst, pos, rot, scl, quat;

            for ( var objID in children ) {
                // check by id if child has already been handled,
                // if not, create new object
                // if not, create new object

                var object = result.objects[ objID ];
                var objJSON = children[ objID ];

                if ( object === undefined ) {

                    // meshes

                    if ( objJSON.type && ( objJSON.type in scope.hierarchyHandlers ) ) {

                        if ( objJSON.loading === undefined ) {

                            material = result.materials[ objJSON.material ];


                            objJSON.loading = true;

                            var loader = scope.hierarchyHandlers[ objJSON.type ][ "loaderObject" ];

                            // ColladaLoader

                            if ( loader.options ) {

                                loader.load( get_url( objJSON.url, data.urlBaseType ), create_callback_hierachy( objID, parent, material, objJSON ) );

                                // UTF8Loader
                                // OBJLoader

                            } else {

                                loader.load( get_url( objJSON.url, data.urlBaseType ), create_callback_hierachy( objID, parent, material, objJSON ) );

                            }

                        }

                    } else if ( objJSON.geometry !== undefined ) {

                        geometry = result.geometries[ objJSON.geometry ];

                        // geometry already loaded

                        if ( geometry ) {

                            var needsTangents = false;

                            material = result.materials[ objJSON.material ];
                            needsTangents = material instanceof THREE.ShaderMaterial;

                            pos = objJSON.position;
                            rot = objJSON.rotation;
                            scl = objJSON.scale;
                            mat = objJSON.matrix;
                            quat = objJSON.quaternion;

                            // use materials from the model file
                            // if there is no material specified in the object

                            if ( ! objJSON.material ) {

                                material = new THREE.MeshFaceMaterial( result.face_materials[ objJSON.geometry ] );

                            }

                            // use materials from the model file
                            // if there is just empty face material
                            // (must create new material as each model has its own face material)

                            if ( ( material instanceof THREE.MeshFaceMaterial ) && material.materials.length === 0 ) {

                                material = new THREE.MeshFaceMaterial( result.face_materials[ objJSON.geometry ] );

                            }

                            if ( material instanceof THREE.MeshFaceMaterial ) {

                                for ( var i = 0; i < material.materials.length; i ++ ) {

                                    needsTangents = needsTangents || ( material.materials[ i ] instanceof THREE.ShaderMaterial );

                                }

                            }

                            if ( needsTangents ) {

                                geometry.computeTangents();

                            }

                            if ( objJSON.skin ) {

                                object = new THREE.SkinnedMesh( geometry, material );

                            } else if ( objJSON.morph ) {

                                object = new THREE.MorphAnimMesh( geometry, material );

                                if ( objJSON.duration !== undefined ) {

                                    object.duration = objJSON.duration;

                                }

                                if ( objJSON.time !== undefined ) {

                                    object.time = objJSON.time;

                                }

                                if ( objJSON.mirroredLoop !== undefined ) {

                                    object.mirroredLoop = objJSON.mirroredLoop;

                                }

                                if ( material.morphNormals ) {

                                    geometry.computeMorphNormals();

                                }

                            } else {
                                object = new THREE.Mesh( geometry, material );

                            }

                            object.name = objID;

                            if ( mat ) {

                                object.matrixAutoUpdate = false;
                                object.matrix.set(
                                    mat[0],  mat[1],  mat[2],  mat[3],
                                    mat[4],  mat[5],  mat[6],  mat[7],
                                    mat[8],  mat[9],  mat[10], mat[11],
                                    mat[12], mat[13], mat[14], mat[15]
                                );

                            } else {

                                object.position.fromArray( pos );

                                if ( quat ) {

                                    object.quaternion.fromArray( quat );

                                } else {

                                    object.rotation.fromArray( rot );

                                }

                                object.scale.fromArray( scl );

                            }
                            object.visible = objJSON.visible;
                            object.castShadow = objJSON.castShadow;
                            object.receiveShadow = objJSON.receiveShadow;

                            parent.add( object );

                            result.objects[ objID ] = object;

                        }

                        // lights

                    } else if ( objJSON.type === "AmbientLight" || objJSON.type === "PointLight" ||
                        objJSON.type === "DirectionalLight" || objJSON.type === "SpotLight" ||
                        objJSON.type === "HemisphereLight" || objJSON.type === "AreaLight" ) {

                        var color = objJSON.color;
                        var intensity = objJSON.intensity;
                        var distance = objJSON.distance;
                        var position = objJSON.position;
                        var rotation = objJSON.rotation || [1, 0, 1];
                        switch ( objJSON.type ) {

                            case 'AmbientLight':
                                light = new THREE.AmbientLight( color );
                                break;

                            case 'PointLight':
                                light = new THREE.PointLight( color, intensity, distance );
                                light.position.fromArray( position );
                                break;

                            case 'DirectionalLight':
                                light = new THREE.DirectionalLight( color, intensity );
                                light.position.fromArray( objJSON.direction );
                                break;

                            case 'SpotLight':
                                light = new THREE.SpotLight( color, intensity, distance, 1 );
                                light.angle = objJSON.angle;
                                light.position.fromArray( position );
                                light.target.position.set( position[ 0 ], position[ 1 ] - distance, position[ 2 ] );
                                light.target.position.applyEuler( new THREE.Euler( rotation[ 0 ], rotation[ 1 ], rotation[ 2 ], 'XYZ' ) );
                                break;

                            case 'HemisphereLight':
                                light = new THREE.HemisphereLight( objJSON.skyColor, objJSON.groundColor, objJSON.intensity );
                                light.position.set( objJSON.position[0], objJSON.position[1], objJSON.position[2] );
                                break;

                            case 'AreaLight':
                                light = new THREE.AreaLight(color, intensity);
                                light.position.set(  objJSON.position[0], objJSON.position[1], objJSON.position[2]  );
                                light.rotation.set(  objJSON.rotation[0], objJSON.rotation[1], objJSON.rotation[2]  );
                                light.width = objJSON.width;
                                light.height = objJSON.height;
                                break;

                        }

                        parent.add( light );

                        light.name = objID;
                        result.lights[ objID ] = light;
                        result.objects[ objID ] = light;

                        // cameras

                    } else if ( objJSON.type === "PerspectiveCamera" || objJSON.type === "OrthographicCamera" ) {

                        pos = objJSON.position;
                        rot = objJSON.rotation;
                        quat = objJSON.quaternion;

                        if ( objJSON.type === "PerspectiveCamera" ) {

                            camera = new THREE.PerspectiveCamera( objJSON.fov, objJSON.aspect, objJSON.near, objJSON.far );

                        } else if ( objJSON.type === "OrthographicCamera" ) {

                            camera = new THREE.OrthographicCamera( objJSON.left, objJSON.right, objJSON.top, objJSON.bottom, objJSON.near, objJSON.far );

                        }

                        camera.name = objID;
                        camera.position.fromArray( pos );

                        if ( quat !== undefined ) {

                            camera.quaternion.fromArray( quat );

                        } else if ( rot !== undefined ) {

                            camera.rotation.fromArray( rot );

                        } else if ( objJSON.target ) {

                            camera.lookAt( new THREE.Vector3().fromArray( objJSON.target ) );

                        }

                        parent.add( camera );

                        result.cameras[ objID ] = camera;
                        result.objects[ objID ] = camera;

                        // pure Object3D

                    } else {

                        pos = objJSON.position;
                        rot = objJSON.rotation;
                        scl = objJSON.scale;
                        quat = objJSON.quaternion;

                        object = new THREE.Object3D();
                        object.name = objID;
                        object.position.fromArray( pos );

                        if ( quat ) {

                            object.quaternion.fromArray( quat );

                        } else {

                            object.rotation.fromArray( rot );

                        }

                        object.scale.fromArray( scl );
                        object.visible = ( objJSON.visible !== undefined ) ? objJSON.visible : false;

                        parent.add( object );

                        result.objects[ objID ] = object;
                        result.empties[ objID ] = object;

                    }

                    if ( object ) {

                        if ( objJSON.userData !== undefined ) {

                            for ( var key in objJSON.userData ) {

                                var value = objJSON.userData[ key ];
                                object.userData[ key ] = value;

                            }

                        }

                        if ( objJSON.groups !== undefined ) {

                            for ( var i = 0; i < objJSON.groups.length; i ++ ) {

                                var groupID = objJSON.groups[ i ];

                                if ( result.groups[ groupID ] === undefined ) {

                                    result.groups[ groupID ] = [];

                                }

                                result.groups[ groupID ].push( objID );

                            }

                        }

                    }

                }

                if ( object !== undefined && objJSON.children !== undefined ) {

                    handle_children( object, objJSON.children );
                }
            }

        };

        function handle_mesh( geo, mat, id ) {

            result.geometries[ id ] = geo;
            result.face_materials[ id ] = mat;
            handle_objects();

        };

        function handle_hierarchy( node, id, parent, material, obj ) {

            var p = obj.position;
            var r = obj.rotation;
            var q = obj.quaternion;
            var s = obj.scale;

            node.position.fromArray( p );

            if ( q ) {

                node.quaternion.fromArray( q );

            } else {

                node.rotation.fromArray( r );

            }

            node.scale.fromArray( s );

            // override children materials
            // if object material was specified in JSON explicitly

            if ( material ) {

                node.traverse( function ( child ) {

                    child.material = material;

                } );

            }

            // override children visibility
            // with root node visibility as specified in JSON

            var visible = ( obj.visible !== undefined ) ? obj.visible : true;

            node.traverse( function ( child ) {

                child.visible = visible;

            } );

            parent.add( node );

            node.name = id;

            result.objects[ id ] = node;
            handle_objects();

        };

        function create_callback_geometry( id ) {

            return function ( geo, mat ) {

                geo.name = id;

                handle_mesh( geo, mat, id );

                counter_models -= 1;

                scope.onLoadComplete();

                async_callback_gate();

            }

        };

        function create_callback_hierachy( id, parent, material, obj ) {

            return function ( event ) {

                var result;

                // loaders which use EventDispatcher

                if ( event.content ) {

                    result = event.content;

                    // ColladaLoader

                } else if ( event.dae ) {

                    result = event.scene;


                    // UTF8Loader

                } else {

                    result = event;

                }

                handle_hierarchy( result, id, parent, material, obj );

                counter_models -= 1;

                scope.onLoadComplete();

                async_callback_gate();

            }

        };

        function create_callback_embed( id ) {

            return function ( geo, mat ) {

                geo.name = id;

                result.geometries[ id ] = geo;
                result.face_materials[ id ] = mat;

            }

        };

        function async_callback_gate() {
            var progress = {

                totalModels : total_models,
                totalTextures : total_textures,
                loadedModels : total_models - counter_models,
                loadedTextures : total_textures - counter_textures

            };

            scope.callbackProgress( progress, result );

            scope.onLoadProgress();
            if ( counter_models === 0 && counter_textures === 0 ) {

                finalize();
                callbackFinished( result );

            }

        };

        function finalize() {

            // take care of targets which could be asynchronously loaded objects

            for ( var i = 0; i < target_array.length; i ++ ) {

                var ta = target_array[ i ];

                var target = result.objects[ ta.targetName ];

                if ( target ) {

                    ta.object.target = target;

                } else {

                    // if there was error and target of specified name doesn't exist in the scene file
                    // create instead dummy target
                    // (target must be added to scene explicitly as parent is already added)

                    ta.object.target = new THREE.Object3D();
                    result.scene.add( ta.object.target );

                }

                ta.object.target.userData.targetInverse = ta.object;

            }

        };

        var callbackTexture = function ( count ) {
            counter_textures -= count;
            async_callback_gate();

            scope.onLoadComplete();

        };

        // must use this instead of just directly calling callbackTexture
        // because of closure in the calling context loop

        var generateTextureCallback = function ( count ) {
            return function () {
                callbackTexture( count );

            };

        };

        function traverse_json_hierarchy( objJSON, callback ) {

            callback( objJSON );

            if ( objJSON.children !== undefined ) {

                for ( var objChildID in objJSON.children ) {

                    traverse_json_hierarchy( objJSON.children[ objChildID ], callback );

                }

            }

        };

        // first go synchronous elements

        // fogs

        var fogID, fogJSON;

        for ( fogID in data.fogs ) {

            fogJSON = data.fogs[ fogID ];

            if ( fogJSON.type === "linear" ) {

                fog = new THREE.Fog( 0x000000, fogJSON.near, fogJSON.far );

            } else if ( fogJSON.type === "exp2" ) {

                fog = new THREE.FogExp2( 0x000000, fogJSON.density );

            }

            color = fogJSON.color;
            fog.color.setRGB( color[0], color[1], color[2] );

            result.fogs[ fogID ] = fog;

        }

        // now come potentially asynchronous elements

        // geometries

        // count how many geometries will be loaded asynchronously

        var geoID, geoJSON;

        for ( geoID in data.geometries ) {

            geoJSON = data.geometries[ geoID ];

            if ( geoJSON.type in this.geometryHandlers ) {

                counter_models += 1;

                scope.onLoadStart();

            }

        }

        // count how many hierarchies will be loaded asynchronously

        for ( var objID in data.objects ) {

            traverse_json_hierarchy( data.objects[ objID ], function ( objJSON ) {

                if ( objJSON.type && ( objJSON.type in scope.hierarchyHandlers ) ) {

                    counter_models += 1;

                    scope.onLoadStart();

                }

            });

        }

        total_models = counter_models;

        for ( geoID in data.geometries ) {

            geoJSON = data.geometries[ geoID ];

            if ( geoJSON.type === "cube" ) {

                geometry = new THREE.BoxGeometry( geoJSON.width, geoJSON.height, geoJSON.depth, geoJSON.widthSegments, geoJSON.heightSegments, geoJSON.depthSegments );
                geometry.name = geoID;
                result.geometries[ geoID ] = geometry;

            } else if ( geoJSON.type === "plane" ) {

                geometry = new THREE.PlaneGeometry( geoJSON.width, geoJSON.height, geoJSON.widthSegments, geoJSON.heightSegments );
                geometry.name = geoID;
                result.geometries[ geoID ] = geometry;

            } else if ( geoJSON.type === "sphere" ) {

                geometry = new THREE.SphereGeometry( geoJSON.radius, geoJSON.widthSegments, geoJSON.heightSegments );
                geometry.name = geoID;
                result.geometries[ geoID ] = geometry;

            } else if ( geoJSON.type === "cylinder" ) {

                geometry = new THREE.CylinderGeometry( geoJSON.radiusTop, geoJSON.radiusBottom, geoJSON.height, geoJSON.radiusSegments, geoJSON.heightSegments, geoJSON.openEnded, geoJSON.thetaStart, geoJSON.thetaLength );
                geometry.name = geoID;
                result.geometries[ geoID ] = geometry;

            } else if ( geoJSON.type === "torus" ) {

                geometry = new THREE.TorusGeometry( geoJSON.radius, geoJSON.tube, geoJSON.segmentsR, geoJSON.segmentsT );
                geometry.name = geoID;
                result.geometries[ geoID ] = geometry;

            } else if ( geoJSON.type === "icosahedron" ) {

                geometry = new THREE.IcosahedronGeometry( geoJSON.radius, geoJSON.subdivisions );
                geometry.name = geoID;
                result.geometries[ geoID ] = geometry;

            } else if ( geoJSON.type in this.geometryHandlers ) {

                var loader = this.geometryHandlers[ geoJSON.type ][ "loaderObject" ];
                loader.load( get_url( geoJSON.url, data.urlBaseType ), create_callback_geometry( geoID ) );

            } else if ( geoJSON.type === "embedded" ) {

                var modelJson = data.embeds[ geoJSON.id ],
                    texture_path = "";

                // pass metadata along to jsonLoader so it knows the format version

                modelJson.metadata = data.metadata;

                if ( modelJson ) {

                    var jsonLoader = this.geometryHandlers[ "ascii" ][ "loaderObject" ];
                    var model = jsonLoader.parse( modelJson, texture_path );
                    create_callback_embed( geoID )( model.geometry, model.materials );

                }

            }

        }

        // textures

        // count how many textures will be loaded asynchronously

        var textureID, textureJSON;

        for ( textureID in data.textures ) {

            textureJSON = data.textures[ textureID ];

            if ( textureJSON.url instanceof Array ) {

                counter_textures += textureJSON.url.length;

                for ( var n = 0; n < textureJSON.url.length; n ++ ) {

                    scope.onLoadStart();

                }

            } else {

                counter_textures += 1;
                scope.onLoadStart();

            }

        }

        total_textures = counter_textures;

        for ( textureID in data.textures ) {

            textureJSON = data.textures[ textureID ];

            if ( textureJSON.mapping !== undefined && THREE[ textureJSON.mapping ] !== undefined ) {

                textureJSON.mapping = THREE[ textureJSON.mapping ];

            }

            var texture;

            if ( textureJSON.url instanceof Array ) {

                var count = textureJSON.url.length;
                var url_array = [];

                for ( var i = 0; i < count; i ++ ) {

                    url_array[ i ] = get_url( textureJSON.url[ i ], data.urlBaseType );

                }

                var loader = THREE.Loader.Handlers.get( url_array[ 0 ] );

                if ( loader !== null ) {
                    texture = loader.load( url_array, generateTextureCallback( count ) );

                    if ( textureJSON.mapping !== undefined )
                        texture.mapping = textureJSON.mapping;

                } else {
                    texture = THREE.ImageUtils.loadTextureCube( url_array, textureJSON.mapping, generateTextureCallback( count ) );

                }

            } else {
                var fullUrl = get_url( textureJSON.url, data.urlBaseType );
                var textureCallback = generateTextureCallback( 1 );

                var loader = THREE.Loader.Handlers.get( fullUrl );

                if ( loader !== null ) {

                    texture = loader.load( fullUrl, textureCallback );

                } else {
                    texture = new THREE.Texture();
                    loader = new THREE.ImageLoader();
                    loader.crossOrigin = '';//for loading images from foreign servers

                    ( function ( texture ) {
                        loader.load( fullUrl, function ( image ) {

                            texture.image = image;
                            texture.needsUpdate = true;

                            textureCallback();

                        } );

                    } )( texture )


                }

                if ( textureJSON.mapping !== undefined )
                    texture.mapping = textureJSON.mapping;

                if ( THREE[ textureJSON.minFilter ] !== undefined )
                    texture.minFilter = THREE[ textureJSON.minFilter ];

                if ( THREE[ textureJSON.magFilter ] !== undefined )
                    texture.magFilter = THREE[ textureJSON.magFilter ];

                if ( textureJSON.anisotropy ) texture.anisotropy = textureJSON.anisotropy;

                if ( textureJSON.repeat ) {

                    texture.repeat.set( textureJSON.repeat[ 0 ], textureJSON.repeat[ 1 ] );

                    if ( textureJSON.repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;
                    if ( textureJSON.repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;

                }

                if ( textureJSON.offset ) {

                    texture.offset.set( textureJSON.offset[ 0 ], textureJSON.offset[ 1 ] );

                }

                // handle wrap after repeat so that default repeat can be overriden

                if ( textureJSON.wrap ) {

                    var wrapMap = {
                        "repeat": THREE.RepeatWrapping,
                        "mirror": THREE.MirroredRepeatWrapping
                    }

                    if ( wrapMap[ textureJSON.wrap[ 0 ] ] !== undefined ) texture.wrapS = wrapMap[ textureJSON.wrap[ 0 ] ];
                    if ( wrapMap[ textureJSON.wrap[ 1 ] ] !== undefined ) texture.wrapT = wrapMap[ textureJSON.wrap[ 1 ] ];

                }

            }

            result.textures[ textureID ] = texture;

        }

        // materials

        var matID, matJSON;
        var parID;

        for ( matID in data.materials ) {

            matJSON = data.materials[ matID ];

            for ( parID in matJSON.parameters ) {

                if ( parID === "envMap" || parID === "map" || parID === "lightMap" || parID === "bumpMap" || parID === "normalMap" || parID === "alphaMap" ) {

                    matJSON.parameters[ parID ] = result.textures[ matJSON.parameters[ parID ] ];

                } else if ( parID === "shading" ) {

                    matJSON.parameters[ parID ] = ( matJSON.parameters[ parID ] === "flat" ) ? THREE.FlatShading : THREE.SmoothShading;

                } else if ( parID === "blending" ) {

                    matJSON.parameters[ parID ] = matJSON.parameters[ parID ] in THREE ? THREE[ matJSON.parameters[ parID ] ] : THREE.NormalBlending;

                } else if ( parID === "combine" ) {

                    matJSON.parameters[ parID ] = matJSON.parameters[ parID ] in THREE ? THREE[ matJSON.parameters[ parID ] ] : THREE.MultiplyOperation;

                } else if ( parID === "vertexColors" ) {

                    if ( matJSON.parameters[ parID ] == "face" ) {

                        matJSON.parameters[ parID ] = THREE.FaceColors;

                        // default to vertex colors if "vertexColors" is anything else face colors or 0 / null / false

                    } else if ( matJSON.parameters[ parID ] ) {

                        matJSON.parameters[ parID ] = THREE.VertexColors;

                    }

                } else if ( parID === "wrapRGB" ) {

                    var v3 = matJSON.parameters[ parID ];
                    matJSON.parameters[ parID ] = new THREE.Vector3( v3[ 0 ], v3[ 1 ], v3[ 2 ] );

                } else if ( parID === "normalScale" ) {

                    var v2 = matJSON.parameters[ parID ];
                    matJSON.parameters[ parID ] = new THREE.Vector2( v2[ 0 ], v2[ 1 ] );

                }

            }

            if ( matJSON.parameters.opacity !== undefined && matJSON.parameters.opacity < 1.0 && matJSON.parameters.transparent == 'undefined') {

                matJSON.parameters.transparent = true;

            }

            material = new THREE[ matJSON.type ]( matJSON.parameters );
            material.name = matID;

            result.materials[ matID ] = material;

        }

        // second pass through all materials to initialize MeshFaceMaterials
        // that could be referring to other materials out of order

        for ( matID in data.materials ) {

            matJSON = data.materials[ matID ];

            if ( matJSON.parameters.materials ) {

                var materialArray = [];

                for ( var i = 0; i < matJSON.parameters.materials.length; i ++ ) {

                    var label = matJSON.parameters.materials[ i ];
                    materialArray.push( result.materials[ label ] );

                }

                result.materials[ matID ].materials = materialArray;

            }

        }

        // objects ( synchronous init of procedural primitives )

        handle_objects();

        // defaults

        if ( result.cameras && data.defaults.camera ) {

            result.currentCamera = result.cameras[ data.defaults.camera ];

        }

        if ( result.fogs && data.defaults.fog ) {

            result.scene.fog = result.fogs[ data.defaults.fog ];

        }

        // synchronous callback

        scope.callbackSync( result );

        // just in case there are no async elements

        async_callback_gate();

    }

}

/*
 *
 * More info at [www.dropzonejs.com](http://www.dropzonejs.com)
 *
 * Copyright (c) 2012, Matias Meno
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

;(function() {
    var Dropzone, Emitter, camelize, contentLoaded, detectVerticalSquash, drawImageIOSFix, noop, without,
        __slice = [].slice,
        __hasProp = {}.hasOwnProperty,
        __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

    noop = function() {};

    Emitter = (function() {
        function Emitter() {}

        Emitter.prototype.addEventListener = Emitter.prototype.on;

        Emitter.prototype.on = function(event, fn) {
            this._callbacks = this._callbacks || {};
            if (!this._callbacks[event]) {
                this._callbacks[event] = [];
            }
            this._callbacks[event].push(fn);
            return this;
        };

        Emitter.prototype.emit = function() {
            var args, callback, callbacks, event, _i, _len;
            event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
            this._callbacks = this._callbacks || {};
            callbacks = this._callbacks[event];
            if (callbacks) {
                for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
                    callback = callbacks[_i];
                    callback.apply(this, args);
                }
            }
            return this;
        };

        Emitter.prototype.removeListener = Emitter.prototype.off;

        Emitter.prototype.removeAllListeners = Emitter.prototype.off;

        Emitter.prototype.removeEventListener = Emitter.prototype.off;

        Emitter.prototype.off = function(event, fn) {
            var callback, callbacks, i, _i, _len;
            if (!this._callbacks || arguments.length === 0) {
                this._callbacks = {};
                return this;
            }
            callbacks = this._callbacks[event];
            if (!callbacks) {
                return this;
            }
            if (arguments.length === 1) {
                delete this._callbacks[event];
                return this;
            }
            for (i = _i = 0, _len = callbacks.length; _i < _len; i = ++_i) {
                callback = callbacks[i];
                if (callback === fn) {
                    callbacks.splice(i, 1);
                    break;
                }
            }
            return this;
        };

        return Emitter;

    })();

    Dropzone = (function(_super) {
        var extend, resolveOption;

        __extends(Dropzone, _super);

        Dropzone.prototype.Emitter = Emitter;


        /*
         This is a list of all available events you can register on a dropzone object.

         You can register an event handler like this:

         dropzone.on("dragEnter", function() { });
         */

        Dropzone.prototype.events = ["drop", "dragstart", "dragend", "dragenter", "dragover", "dragleave", "addedfile", "removedfile", "thumbnail", "error", "errormultiple", "processing", "processingmultiple", "uploadprogress", "totaluploadprogress", "sending", "sendingmultiple", "success", "successmultiple", "canceled", "canceledmultiple", "complete", "completemultiple", "reset", "maxfilesexceeded", "maxfilesreached", "queuecomplete"];

        Dropzone.prototype.defaultOptions = {
            url: null,
            method: "post",
            withCredentials: false,
            parallelUploads: 2,
            uploadMultiple: false,
            maxFilesize: 256,
            paramName: "file",
            createImageThumbnails: true,
            maxThumbnailFilesize: 10,
            thumbnailWidth: 120,
            thumbnailHeight: 120,
            filesizeBase: 1000,
            maxFiles: null,
            filesizeBase: 1000,
            params: {},
            clickable: true,
            ignoreHiddenFiles: true,
            acceptedFiles: null,
            acceptedMimeTypes: null,
            autoProcessQueue: true,
            autoQueue: true,
            addRemoveLinks: false,
            previewsContainer: null,
            capture: null,
            dictDefaultMessage: "Drop files here to upload",
            dictFallbackMessage: "Your browser does not support drag'n'drop file uploads.",
            dictFallbackText: "Please use the fallback form below to upload your files like in the olden days.",
            dictFileTooBig: "File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.",
            dictInvalidFileType: "You can't upload files of this type.",
            dictResponseError: "Server responded with {{statusCode}} code.",
            dictCancelUpload: "Cancel upload",
            dictCancelUploadConfirmation: "Are you sure you want to cancel this upload?",
            dictRemoveFile: "Remove file",
            dictRemoveFileConfirmation: null,
            dictMaxFilesExceeded: "You can not upload any more files.",
            accept: function(file, done) {
                return done();
            },
            init: function() {
                return noop;
            },
            forceFallback: false,
            fallback: function() {
                var child, messageElement, span, _i, _len, _ref;
                this.element.className = "" + this.element.className + " dz-browser-not-supported";
                _ref = this.element.getElementsByTagName("div");
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    child = _ref[_i];
                    if (/(^| )dz-message($| )/.test(child.className)) {
                        messageElement = child;
                        child.className = "dz-message";
                        continue;
                    }
                }
                if (!messageElement) {
                    messageElement = Dropzone.createElement("<div class=\"dz-message\"><span></span></div>");
                    this.element.appendChild(messageElement);
                }
                span = messageElement.getElementsByTagName("span")[0];
                if (span) {
                    span.textContent = this.options.dictFallbackMessage;
                }
                return this.element.appendChild(this.getFallbackForm());
            },
            resize: function(file) {
                var info, srcRatio, trgRatio;
                info = {
                    srcX: 0,
                    srcY: 0,
                    srcWidth: file.width,
                    srcHeight: file.height
                };
                srcRatio = file.width / file.height;
                info.optWidth = this.options.thumbnailWidth;
                info.optHeight = this.options.thumbnailHeight;
                if ((info.optWidth == null) && (info.optHeight == null)) {
                    info.optWidth = info.srcWidth;
                    info.optHeight = info.srcHeight;
                } else if (info.optWidth == null) {
                    info.optWidth = srcRatio * info.optHeight;
                } else if (info.optHeight == null) {
                    info.optHeight = (1 / srcRatio) * info.optWidth;
                }
                trgRatio = info.optWidth / info.optHeight;
                if (file.height < info.optHeight || file.width < info.optWidth) {
                    info.trgHeight = info.srcHeight;
                    info.trgWidth = info.srcWidth;
                } else {
                    if (srcRatio > trgRatio) {
                        info.srcHeight = file.height;
                        info.srcWidth = info.srcHeight * trgRatio;
                    } else {
                        info.srcWidth = file.width;
                        info.srcHeight = info.srcWidth / trgRatio;
                    }
                }
                info.srcX = (file.width - info.srcWidth) / 2;
                info.srcY = (file.height - info.srcHeight) / 2;
                return info;
            },

            /*
             Those functions register themselves to the events on init and handle all
             the user interface specific stuff. Overwriting them won't break the upload
             but can break the way it's displayed.
             You can overwrite them if you don't like the default behavior. If you just
             want to add an additional event handler, register it on the dropzone object
             and don't overwrite those options.
             */
            drop: function(e) {
                return this.element.classList.remove("dz-drag-hover");
            },
            dragstart: noop,
            dragend: function(e) {
                return this.element.classList.remove("dz-drag-hover");
            },
            dragenter: function(e) {
                return this.element.classList.add("dz-drag-hover");
            },
            dragover: function(e) {
                return this.element.classList.add("dz-drag-hover");
            },
            dragleave: function(e) {
                return this.element.classList.remove("dz-drag-hover");
            },
            paste: noop,
            reset: function() {
                return this.element.classList.remove("dz-started");
            },
            addedfile: function(file) {
                var node, removeFileEvent, removeLink, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
                if (this.element === this.previewsContainer) {
                    this.element.classList.add("dz-started");
                }
                if (this.previewsContainer) {
                    file.previewElement = Dropzone.createElement(this.options.previewTemplate.trim());
                    file.previewTemplate = file.previewElement;
                    this.previewsContainer.appendChild(file.previewElement);
                    _ref = file.previewElement.querySelectorAll("[data-dz-name]");
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                        node = _ref[_i];
                        node.textContent = file.name;
                    }
                    _ref1 = file.previewElement.querySelectorAll("[data-dz-size]");
                    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                        node = _ref1[_j];
                        node.innerHTML = this.filesize(file.size);
                    }
                    if (this.options.addRemoveLinks) {
                        file._removeLink = Dropzone.createElement("<a class=\"dz-remove\" href=\"javascript:undefined;\" data-dz-remove>" + this.options.dictRemoveFile + "</a>");
                        file.previewElement.appendChild(file._removeLink);
                    }
                    removeFileEvent = (function(_this) {
                        return function(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            if (file.status === Dropzone.UPLOADING) {
                                return Dropzone.confirm(_this.options.dictCancelUploadConfirmation, function() {
                                    return _this.removeFile(file);
                                });
                            } else {
                                if (_this.options.dictRemoveFileConfirmation) {
                                    return Dropzone.confirm(_this.options.dictRemoveFileConfirmation, function() {
                                        return _this.removeFile(file);
                                    });
                                } else {
                                    return _this.removeFile(file);
                                }
                            }
                        };
                    })(this);
                    _ref2 = file.previewElement.querySelectorAll("[data-dz-remove]");
                    _results = [];
                    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                        removeLink = _ref2[_k];
                        _results.push(removeLink.addEventListener("click", removeFileEvent));
                    }
                    return _results;
                }
            },
            removedfile: function(file) {
                var _ref;
                if (file.previewElement) {
                    if ((_ref = file.previewElement) != null) {
                        _ref.parentNode.removeChild(file.previewElement);
                    }
                }
                return this._updateMaxFilesReachedClass();
            },
            thumbnail: function(file, dataUrl) {
                var thumbnailElement, _i, _len, _ref;
                if (file.previewElement) {
                    file.previewElement.classList.remove("dz-file-preview");
                    _ref = file.previewElement.querySelectorAll("[data-dz-thumbnail]");
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                        thumbnailElement = _ref[_i];
                        thumbnailElement.alt = file.name;
                        thumbnailElement.src = dataUrl;
                    }
                    return setTimeout(((function(_this) {
                        return function() {
                            return file.previewElement.classList.add("dz-image-preview");
                        };
                    })(this)), 1);
                }
            },
            error: function(file, message) {
                var node, _i, _len, _ref, _results;
                if (file.previewElement) {
                    file.previewElement.classList.add("dz-error");
                    if (typeof message !== "String" && message.error) {
                        message = message.error;
                    }
                    _ref = file.previewElement.querySelectorAll("[data-dz-errormessage]");
                    _results = [];
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                        node = _ref[_i];
                        _results.push(node.textContent = message);
                    }
                    return _results;
                }
            },
            errormultiple: noop,
            processing: function(file) {
                if (file.previewElement) {
                    file.previewElement.classList.add("dz-processing");
                    if (file._removeLink) {
                        return file._removeLink.textContent = this.options.dictCancelUpload;
                    }
                }
            },
            processingmultiple: noop,
            uploadprogress: function(file, progress, bytesSent) {
                var node, _i, _len, _ref, _results;
                if (file.previewElement) {
                    _ref = file.previewElement.querySelectorAll("[data-dz-uploadprogress]");
                    _results = [];
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                        node = _ref[_i];
                        if (node.nodeName === 'PROGRESS') {
                            _results.push(node.value = progress);
                        } else {
                            _results.push(node.style.width = "" + progress + "%");
                        }
                    }
                    return _results;
                }
            },
            totaluploadprogress: noop,
            sending: noop,
            sendingmultiple: noop,
            success: function(file) {
                if (file.previewElement) {
                    return file.previewElement.classList.add("dz-success");
                }
            },
            successmultiple: noop,
            canceled: function(file) {
                return this.emit("error", file, "Upload canceled.");
            },
            canceledmultiple: noop,
            complete: function(file) {
                if (file._removeLink) {
                    file._removeLink.textContent = this.options.dictRemoveFile;
                }
                if (file.previewElement) {
                    return file.previewElement.classList.add("dz-complete");
                }
            },
            completemultiple: noop,
            maxfilesexceeded: noop,
            maxfilesreached: noop,
            queuecomplete: noop,
            previewTemplate: "<div class=\"dz-preview dz-file-preview\">\n  <div class=\"dz-image\"><img data-dz-thumbnail /></div>\n  <div class=\"dz-details\">\n    <div class=\"dz-size\"><span data-dz-size></span></div>\n    <div class=\"dz-filename\"><span data-dz-name></span></div>\n  </div>\n  <div class=\"dz-progress\"><span class=\"dz-upload\" data-dz-uploadprogress></span></div>\n  <div class=\"dz-error-message\"><span data-dz-errormessage></span></div>\n  <div class=\"dz-success-mark\">\n    <svg width=\"54px\" height=\"54px\" viewBox=\"0 0 54 54\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">\n      <title>Check</title>\n      <defs></defs>\n      <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n        <path d=\"M23.5,31.8431458 L17.5852419,25.9283877 C16.0248253,24.3679711 13.4910294,24.366835 11.9289322,25.9289322 C10.3700136,27.4878508 10.3665912,30.0234455 11.9283877,31.5852419 L20.4147581,40.0716123 C20.5133999,40.1702541 20.6159315,40.2626649 20.7218615,40.3488435 C22.2835669,41.8725651 24.794234,41.8626202 26.3461564,40.3106978 L43.3106978,23.3461564 C44.8771021,21.7797521 44.8758057,19.2483887 43.3137085,17.6862915 C41.7547899,16.1273729 39.2176035,16.1255422 37.6538436,17.6893022 L23.5,31.8431458 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\" id=\"Oval-2\" stroke-opacity=\"0.198794158\" stroke=\"#747474\" fill-opacity=\"0.816519475\" fill=\"#FFFFFF\" sketch:type=\"MSShapeGroup\"></path>\n      </g>\n    </svg>\n  </div>\n  <div class=\"dz-error-mark\">\n    <svg width=\"54px\" height=\"54px\" viewBox=\"0 0 54 54\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">\n      <title>Error</title>\n      <defs></defs>\n      <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n        <g id=\"Check-+-Oval-2\" sketch:type=\"MSLayerGroup\" stroke=\"#747474\" stroke-opacity=\"0.198794158\" fill=\"#FFFFFF\" fill-opacity=\"0.816519475\">\n          <path d=\"M32.6568542,29 L38.3106978,23.3461564 C39.8771021,21.7797521 39.8758057,19.2483887 38.3137085,17.6862915 C36.7547899,16.1273729 34.2176035,16.1255422 32.6538436,17.6893022 L27,23.3431458 L21.3461564,17.6893022 C19.7823965,16.1255422 17.2452101,16.1273729 15.6862915,17.6862915 C14.1241943,19.2483887 14.1228979,21.7797521 15.6893022,23.3461564 L21.3431458,29 L15.6893022,34.6538436 C14.1228979,36.2202479 14.1241943,38.7516113 15.6862915,40.3137085 C17.2452101,41.8726271 19.7823965,41.8744578 21.3461564,40.3106978 L27,34.6568542 L32.6538436,40.3106978 C34.2176035,41.8744578 36.7547899,41.8726271 38.3137085,40.3137085 C39.8758057,38.7516113 39.8771021,36.2202479 38.3106978,34.6538436 L32.6568542,29 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\" id=\"Oval-2\" sketch:type=\"MSShapeGroup\"></path>\n        </g>\n      </g>\n    </svg>\n  </div>\n</div>"
        };

        extend = function() {
            var key, object, objects, target, val, _i, _len;
            target = arguments[0], objects = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
            for (_i = 0, _len = objects.length; _i < _len; _i++) {
                object = objects[_i];
                for (key in object) {
                    val = object[key];
                    target[key] = val;
                }
            }
            return target;
        };

        function Dropzone(element, options) {
            var elementOptions, fallback, _ref;
            this.element = element;
            this.version = Dropzone.version;
            this.defaultOptions.previewTemplate = this.defaultOptions.previewTemplate.replace(/\n*/g, "");
            this.clickableElements = [];
            this.listeners = [];
            this.files = [];
            if (typeof this.element === "string") {
                this.element = document.querySelector(this.element);
            }
            if (!(this.element && (this.element.nodeType != null))) {
                throw new Error("Invalid dropzone element.");
            }
            if (this.element.dropzone) {
                throw new Error("Dropzone already attached.");
            }
            Dropzone.instances.push(this);
            this.element.dropzone = this;
            elementOptions = (_ref = Dropzone.optionsForElement(this.element)) != null ? _ref : {};
            this.options = extend({}, this.defaultOptions, elementOptions, options != null ? options : {});
            if (this.options.forceFallback || !Dropzone.isBrowserSupported()) {
                return this.options.fallback.call(this);
            }
            if (this.options.url == null) {
                this.options.url = this.element.getAttribute("action");
            }
            if (!this.options.url) {
                throw new Error("No URL provided.");
            }
            if (this.options.acceptedFiles && this.options.acceptedMimeTypes) {
                throw new Error("You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated.");
            }
            if (this.options.acceptedMimeTypes) {
                this.options.acceptedFiles = this.options.acceptedMimeTypes;
                delete this.options.acceptedMimeTypes;
            }
            this.options.method = this.options.method.toUpperCase();
            if ((fallback = this.getExistingFallback()) && fallback.parentNode) {
                fallback.parentNode.removeChild(fallback);
            }
            if (this.options.previewsContainer !== false) {
                if (this.options.previewsContainer) {
                    this.previewsContainer = Dropzone.getElement(this.options.previewsContainer, "previewsContainer");
                } else {
                    this.previewsContainer = this.element;
                }
            }
            if (this.options.clickable) {
                if (this.options.clickable === true) {
                    this.clickableElements = [this.element];
                } else {
                    this.clickableElements = Dropzone.getElements(this.options.clickable, "clickable");
                }
            }
            this.init();
        }

        Dropzone.prototype.getAcceptedFiles = function() {
            var file, _i, _len, _ref, _results;
            _ref = this.files;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                file = _ref[_i];
                if (file.accepted) {
                    _results.push(file);
                }
            }
            return _results;
        };

        Dropzone.prototype.getRejectedFiles = function() {
            var file, _i, _len, _ref, _results;
            _ref = this.files;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                file = _ref[_i];
                if (!file.accepted) {
                    _results.push(file);
                }
            }
            return _results;
        };

        Dropzone.prototype.getFilesWithStatus = function(status) {
            var file, _i, _len, _ref, _results;
            _ref = this.files;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                file = _ref[_i];
                if (file.status === status) {
                    _results.push(file);
                }
            }
            return _results;
        };

        Dropzone.prototype.getQueuedFiles = function() {
            return this.getFilesWithStatus(Dropzone.QUEUED);
        };

        Dropzone.prototype.getUploadingFiles = function() {
            return this.getFilesWithStatus(Dropzone.UPLOADING);
        };

        Dropzone.prototype.getActiveFiles = function() {
            var file, _i, _len, _ref, _results;
            _ref = this.files;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                file = _ref[_i];
                if (file.status === Dropzone.UPLOADING || file.status === Dropzone.QUEUED) {
                    _results.push(file);
                }
            }
            return _results;
        };

        Dropzone.prototype.init = function() {
            var eventName, noPropagation, setupHiddenFileInput, _i, _len, _ref, _ref1;
            if (this.element.tagName === "form") {
                this.element.setAttribute("enctype", "multipart/form-data");
            }
            if (this.element.classList.contains("dropzone") && !this.element.querySelector(".dz-message")) {
                this.element.appendChild(Dropzone.createElement("<div class=\"dz-default dz-message\"><span>" + this.options.dictDefaultMessage + "</span></div>"));
            }
            if (this.clickableElements.length) {
                setupHiddenFileInput = (function(_this) {
                    return function() {
                        if (_this.hiddenFileInput) {
                            document.body.removeChild(_this.hiddenFileInput);
                        }
                        _this.hiddenFileInput = document.createElement("input");
                        _this.hiddenFileInput.setAttribute("type", "file");
                        if ((_this.options.maxFiles == null) || _this.options.maxFiles > 1) {
                            _this.hiddenFileInput.setAttribute("multiple", "multiple");
                        }
                        _this.hiddenFileInput.className = "dz-hidden-input";
                        if (_this.options.acceptedFiles != null) {
                            _this.hiddenFileInput.setAttribute("accept", _this.options.acceptedFiles);
                        }
                        if (_this.options.capture != null) {
                            _this.hiddenFileInput.setAttribute("capture", _this.options.capture);
                        }
                        _this.hiddenFileInput.style.visibility = "hidden";
                        _this.hiddenFileInput.style.position = "absolute";
                        _this.hiddenFileInput.style.top = "0";
                        _this.hiddenFileInput.style.left = "0";
                        _this.hiddenFileInput.style.height = "0";
                        _this.hiddenFileInput.style.width = "0";
                        document.body.appendChild(_this.hiddenFileInput);
                        return _this.hiddenFileInput.addEventListener("change", function() {
                            var file, files, _i, _len;
                            files = _this.hiddenFileInput.files;
                            if (files.length) {
                                for (_i = 0, _len = files.length; _i < _len; _i++) {
                                    file = files[_i];
                                    _this.addFile(file);
                                }
                            }
                            return setupHiddenFileInput();
                        });
                    };
                })(this);
                setupHiddenFileInput();
            }
            this.URL = (_ref = window.URL) != null ? _ref : window.webkitURL;
            _ref1 = this.events;
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                eventName = _ref1[_i];
                this.on(eventName, this.options[eventName]);
            }
            this.on("uploadprogress", (function(_this) {
                return function() {
                    return _this.updateTotalUploadProgress();
                };
            })(this));
            this.on("removedfile", (function(_this) {
                return function() {
                    return _this.updateTotalUploadProgress();
                };
            })(this));
            this.on("canceled", (function(_this) {
                return function(file) {
                    return _this.emit("complete", file);
                };
            })(this));
            this.on("complete", (function(_this) {
                return function(file) {
                    if (_this.getUploadingFiles().length === 0 && _this.getQueuedFiles().length === 0) {
                        return setTimeout((function() {
                            return _this.emit("queuecomplete");
                        }), 0);
                    }
                };
            })(this));
            noPropagation = function(e) {
                e.stopPropagation();
                if (e.preventDefault) {
                    return e.preventDefault();
                } else {
                    return e.returnValue = false;
                }
            };
            this.listeners = [
                {
                    element: this.element,
                    events: {
                        "dragstart": (function(_this) {
                            return function(e) {
                                return _this.emit("dragstart", e);
                            };
                        })(this),
                        "dragenter": (function(_this) {
                            return function(e) {
                                noPropagation(e);
                                return _this.emit("dragenter", e);
                            };
                        })(this),
                        "dragover": (function(_this) {
                            return function(e) {
                                var efct;
                                try {
                                    efct = e.dataTransfer.effectAllowed;
                                } catch (_error) {}
                                e.dataTransfer.dropEffect = 'move' === efct || 'linkMove' === efct ? 'move' : 'copy';
                                noPropagation(e);
                                return _this.emit("dragover", e);
                            };
                        })(this),
                        "dragleave": (function(_this) {
                            return function(e) {
                                return _this.emit("dragleave", e);
                            };
                        })(this),
                        "drop": (function(_this) {
                            return function(e) {
                                noPropagation(e);
                                return _this.drop(e);
                            };
                        })(this),
                        "dragend": (function(_this) {
                            return function(e) {
                                return _this.emit("dragend", e);
                            };
                        })(this)
                    }
                }
            ];
            this.clickableElements.forEach((function(_this) {
                return function(clickableElement) {
                    return _this.listeners.push({
                        element: clickableElement,
                        events: {
                            "click": function(evt) {
                                if ((clickableElement !== _this.element) || (evt.target === _this.element || Dropzone.elementInside(evt.target, _this.element.querySelector(".dz-message")))) {
                                    return _this.hiddenFileInput.click();
                                }
                            }
                        }
                    });
                };
            })(this));
            this.enable();
            return this.options.init.call(this);
        };

        Dropzone.prototype.destroy = function() {
            var _ref;
            this.disable();
            this.removeAllFiles(true);
            if ((_ref = this.hiddenFileInput) != null ? _ref.parentNode : void 0) {
                this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput);
                this.hiddenFileInput = null;
            }
            delete this.element.dropzone;
            return Dropzone.instances.splice(Dropzone.instances.indexOf(this), 1);
        };

        Dropzone.prototype.updateTotalUploadProgress = function() {
            var activeFiles, file, totalBytes, totalBytesSent, totalUploadProgress, _i, _len, _ref;
            totalBytesSent = 0;
            totalBytes = 0;
            activeFiles = this.getActiveFiles();
            if (activeFiles.length) {
                _ref = this.getActiveFiles();
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    file = _ref[_i];
                    totalBytesSent += file.upload.bytesSent;
                    totalBytes += file.upload.total;
                }
                totalUploadProgress = 100 * totalBytesSent / totalBytes;
            } else {
                totalUploadProgress = 100;
            }
            return this.emit("totaluploadprogress", totalUploadProgress, totalBytes, totalBytesSent);
        };

        Dropzone.prototype._getParamName = function(n) {
            if (typeof this.options.paramName === "function") {
                return this.options.paramName(n);
            } else {
                return "" + this.options.paramName + (this.options.uploadMultiple ? "[" + n + "]" : "");
            }
        };

        Dropzone.prototype.getFallbackForm = function() {
            var existingFallback, fields, fieldsString, form;
            if (existingFallback = this.getExistingFallback()) {
                return existingFallback;
            }
            fieldsString = "<div class=\"dz-fallback\">";
            if (this.options.dictFallbackText) {
                fieldsString += "<p>" + this.options.dictFallbackText + "</p>";
            }
            fieldsString += "<input type=\"file\" name=\"" + (this._getParamName(0)) + "\" " + (this.options.uploadMultiple ? 'multiple="multiple"' : void 0) + " /><input type=\"submit\" value=\"Upload!\"></div>";
            fields = Dropzone.createElement(fieldsString);
            if (this.element.tagName !== "FORM") {
                form = Dropzone.createElement("<form action=\"" + this.options.url + "\" enctype=\"multipart/form-data\" method=\"" + this.options.method + "\"></form>");
                form.appendChild(fields);
            } else {
                this.element.setAttribute("enctype", "multipart/form-data");
                this.element.setAttribute("method", this.options.method);
            }
            return form != null ? form : fields;
        };

        Dropzone.prototype.getExistingFallback = function() {
            var fallback, getFallback, tagName, _i, _len, _ref;
            getFallback = function(elements) {
                var el, _i, _len;
                for (_i = 0, _len = elements.length; _i < _len; _i++) {
                    el = elements[_i];
                    if (/(^| )fallback($| )/.test(el.className)) {
                        return el;
                    }
                }
            };
            _ref = ["div", "form"];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                tagName = _ref[_i];
                if (fallback = getFallback(this.element.getElementsByTagName(tagName))) {
                    return fallback;
                }
            }
        };

        Dropzone.prototype.setupEventListeners = function() {
            var elementListeners, event, listener, _i, _len, _ref, _results;
            _ref = this.listeners;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                elementListeners = _ref[_i];
                _results.push((function() {
                    var _ref1, _results1;
                    _ref1 = elementListeners.events;
                    _results1 = [];
                    for (event in _ref1) {
                        listener = _ref1[event];
                        _results1.push(elementListeners.element.addEventListener(event, listener, false));
                    }
                    return _results1;
                })());
            }
            return _results;
        };

        Dropzone.prototype.removeEventListeners = function() {
            var elementListeners, event, listener, _i, _len, _ref, _results;
            _ref = this.listeners;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                elementListeners = _ref[_i];
                _results.push((function() {
                    var _ref1, _results1;
                    _ref1 = elementListeners.events;
                    _results1 = [];
                    for (event in _ref1) {
                        listener = _ref1[event];
                        _results1.push(elementListeners.element.removeEventListener(event, listener, false));
                    }
                    return _results1;
                })());
            }
            return _results;
        };

        Dropzone.prototype.disable = function() {
            var file, _i, _len, _ref, _results;
            this.clickableElements.forEach(function(element) {
                return element.classList.remove("dz-clickable");
            });
            this.removeEventListeners();
            _ref = this.files;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                file = _ref[_i];
                _results.push(this.cancelUpload(file));
            }
            return _results;
        };

        Dropzone.prototype.enable = function() {
            this.clickableElements.forEach(function(element) {
                return element.classList.add("dz-clickable");
            });
            return this.setupEventListeners();
        };

        Dropzone.prototype.filesize = function(size) {
            var cutoff, i, selectedSize, selectedUnit, unit, units, _i, _len;
            units = ['TB', 'GB', 'MB', 'KB', 'b'];
            selectedSize = selectedUnit = null;
            for (i = _i = 0, _len = units.length; _i < _len; i = ++_i) {
                unit = units[i];
                cutoff = Math.pow(this.options.filesizeBase, 4 - i) / 10;
                if (size >= cutoff) {
                    selectedSize = size / Math.pow(this.options.filesizeBase, 4 - i);
                    selectedUnit = unit;
                    break;
                }
            }
            selectedSize = Math.round(10 * selectedSize) / 10;
            return "<strong>" + selectedSize + "</strong> " + selectedUnit;
        };

        Dropzone.prototype._updateMaxFilesReachedClass = function() {
            if ((this.options.maxFiles != null) && this.getAcceptedFiles().length >= this.options.maxFiles) {
                if (this.getAcceptedFiles().length === this.options.maxFiles) {
                    this.emit('maxfilesreached', this.files);
                }
                return this.element.classList.add("dz-max-files-reached");
            } else {
                return this.element.classList.remove("dz-max-files-reached");
            }
        };

        Dropzone.prototype.drop = function(e) {
            var files, items;
            if (!e.dataTransfer) {
                return;
            }
            this.emit("drop", e);
            files = e.dataTransfer.files;
            if (files.length) {
                items = e.dataTransfer.items;
                if (items && items.length && (items[0].webkitGetAsEntry != null)) {
                    this._addFilesFromItems(items);
                } else {
                    this.handleFiles(files);
                }
            }
        };

        Dropzone.prototype.paste = function(e) {
            var items, _ref;
            if ((e != null ? (_ref = e.clipboardData) != null ? _ref.items : void 0 : void 0) == null) {
                return;
            }
            this.emit("paste", e);
            items = e.clipboardData.items;
            if (items.length) {
                return this._addFilesFromItems(items);
            }
        };

        Dropzone.prototype.handleFiles = function(files) {
            var file, _i, _len, _results;
            _results = [];
            for (_i = 0, _len = files.length; _i < _len; _i++) {
                file = files[_i];
                _results.push(this.addFile(file));
            }
            return _results;
        };

        Dropzone.prototype._addFilesFromItems = function(items) {
            var entry, item, _i, _len, _results;
            _results = [];
            for (_i = 0, _len = items.length; _i < _len; _i++) {
                item = items[_i];
                if ((item.webkitGetAsEntry != null) && (entry = item.webkitGetAsEntry())) {
                    if (entry.isFile) {
                        _results.push(this.addFile(item.getAsFile()));
                    } else if (entry.isDirectory) {
                        _results.push(this._addFilesFromDirectory(entry, entry.name));
                    } else {
                        _results.push(void 0);
                    }
                } else if (item.getAsFile != null) {
                    if ((item.kind == null) || item.kind === "file") {
                        _results.push(this.addFile(item.getAsFile()));
                    } else {
                        _results.push(void 0);
                    }
                } else {
                    _results.push(void 0);
                }
            }
            return _results;
        };

        Dropzone.prototype._addFilesFromDirectory = function(directory, path) {
            var dirReader, entriesReader;
            dirReader = directory.createReader();
            entriesReader = (function(_this) {
                return function(entries) {
                    var entry, _i, _len;
                    for (_i = 0, _len = entries.length; _i < _len; _i++) {
                        entry = entries[_i];
                        if (entry.isFile) {
                            entry.file(function(file) {
                                if (_this.options.ignoreHiddenFiles && file.name.substring(0, 1) === '.') {
                                    return;
                                }
                                file.fullPath = "" + path + "/" + file.name;
                                return _this.addFile(file);
                            });
                        } else if (entry.isDirectory) {
                            _this._addFilesFromDirectory(entry, "" + path + "/" + entry.name);
                        }
                    }
                };
            })(this);
            return dirReader.readEntries(entriesReader, function(error) {
                return typeof console !== "undefined" && console !== null ? typeof console.log === "function" ? console.log(error) : void 0 : void 0;
            });
        };

        Dropzone.prototype.accept = function(file, done) {
            if (file.size > this.options.maxFilesize * 1024 * 1024) {
                return done(this.options.dictFileTooBig.replace("{{filesize}}", Math.round(file.size / 1024 / 10.24) / 100).replace("{{maxFilesize}}", this.options.maxFilesize));
            } else if (!Dropzone.isValidFile(file, this.options.acceptedFiles)) {
                return done(this.options.dictInvalidFileType);
            } else if ((this.options.maxFiles != null) && this.getAcceptedFiles().length >= this.options.maxFiles) {
                done(this.options.dictMaxFilesExceeded.replace("{{maxFiles}}", this.options.maxFiles));
                return this.emit("maxfilesexceeded", file);
            } else {
                return this.options.accept.call(this, file, done);
            }
        };

        Dropzone.prototype.addFile = function(file) {
            file.upload = {
                progress: 0,
                total: file.size,
                bytesSent: 0
            };
            this.files.push(file);
            file.status = Dropzone.ADDED;
            this.emit("addedfile", file);
            this._enqueueThumbnail(file);
            return this.accept(file, (function(_this) {
                return function(error) {
                    if (error) {
                        file.accepted = false;
                        _this._errorProcessing([file], error);
                    } else {
                        file.accepted = true;
                        if (_this.options.autoQueue) {
                            _this.enqueueFile(file);
                        }
                    }
                    return _this._updateMaxFilesReachedClass();
                };
            })(this));
        };

        Dropzone.prototype.enqueueFiles = function(files) {
            var file, _i, _len;
            for (_i = 0, _len = files.length; _i < _len; _i++) {
                file = files[_i];
                this.enqueueFile(file);
            }
            return null;
        };

        Dropzone.prototype.enqueueFile = function(file) {
            if (file.status === Dropzone.ADDED && file.accepted === true) {
                file.status = Dropzone.QUEUED;
                if (this.options.autoProcessQueue) {
                    return setTimeout(((function(_this) {
                        return function() {
                            return _this.processQueue();
                        };
                    })(this)), 0);
                }
            } else {
                throw new Error("This file can't be queued because it has already been processed or was rejected.");
            }
        };

        Dropzone.prototype._thumbnailQueue = [];

        Dropzone.prototype._processingThumbnail = false;

        Dropzone.prototype._enqueueThumbnail = function(file) {
            if (this.options.createImageThumbnails && file.type.match(/image.*/) && file.size <= this.options.maxThumbnailFilesize * 1024 * 1024) {
                this._thumbnailQueue.push(file);
                return setTimeout(((function(_this) {
                    return function() {
                        return _this._processThumbnailQueue();
                    };
                })(this)), 0);
            }
        };

        Dropzone.prototype._processThumbnailQueue = function() {
            if (this._processingThumbnail || this._thumbnailQueue.length === 0) {
                return;
            }
            this._processingThumbnail = true;
            return this.createThumbnail(this._thumbnailQueue.shift(), (function(_this) {
                return function() {
                    _this._processingThumbnail = false;
                    return _this._processThumbnailQueue();
                };
            })(this));
        };

        Dropzone.prototype.removeFile = function(file) {
            if (file.status === Dropzone.UPLOADING) {
                this.cancelUpload(file);
            }
            this.files = without(this.files, file);
            this.emit("removedfile", file);
            if (this.files.length === 0) {
                return this.emit("reset");
            }
        };

        Dropzone.prototype.removeAllFiles = function(cancelIfNecessary) {
            var file, _i, _len, _ref;
            if (cancelIfNecessary == null) {
                cancelIfNecessary = false;
            }
            _ref = this.files.slice();
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                file = _ref[_i];
                if (file.status !== Dropzone.UPLOADING || cancelIfNecessary) {
                    this.removeFile(file);
                }
            }
            return null;
        };

        Dropzone.prototype.createThumbnail = function(file, callback) {
            var fileReader;
            fileReader = new FileReader;
            fileReader.onload = (function(_this) {
                return function() {
                    if (file.type === "image/svg+xml") {
                        _this.emit("thumbnail", file, fileReader.result);
                        if (callback != null) {
                            callback();
                        }
                        return;
                    }
                    return _this.createThumbnailFromUrl(file, fileReader.result, callback);
                };
            })(this);
            return fileReader.readAsDataURL(file);
        };

        Dropzone.prototype.createThumbnailFromUrl = function(file, imageUrl, callback) {
            var img;
            img = document.createElement("img");
            img.onload = (function(_this) {
                return function() {
                    var canvas, ctx, resizeInfo, thumbnail, _ref, _ref1, _ref2, _ref3;
                    file.width = img.width;
                    file.height = img.height;
                    resizeInfo = _this.options.resize.call(_this, file);
                    if (resizeInfo.trgWidth == null) {
                        resizeInfo.trgWidth = resizeInfo.optWidth;
                    }
                    if (resizeInfo.trgHeight == null) {
                        resizeInfo.trgHeight = resizeInfo.optHeight;
                    }
                    canvas = document.createElement("canvas");
                    ctx = canvas.getContext("2d");
                    canvas.width = resizeInfo.trgWidth;
                    canvas.height = resizeInfo.trgHeight;
                    drawImageIOSFix(ctx, img, (_ref = resizeInfo.srcX) != null ? _ref : 0, (_ref1 = resizeInfo.srcY) != null ? _ref1 : 0, resizeInfo.srcWidth, resizeInfo.srcHeight, (_ref2 = resizeInfo.trgX) != null ? _ref2 : 0, (_ref3 = resizeInfo.trgY) != null ? _ref3 : 0, resizeInfo.trgWidth, resizeInfo.trgHeight);
                    thumbnail = canvas.toDataURL("image/png");
                    _this.emit("thumbnail", file, thumbnail);
                    if (callback != null) {
                        return callback();
                    }
                };
            })(this);
            if (callback != null) {
                img.onerror = callback;
            }
            return img.src = imageUrl;
        };

        Dropzone.prototype.processQueue = function() {
            var i, parallelUploads, processingLength, queuedFiles;
            parallelUploads = this.options.parallelUploads;
            processingLength = this.getUploadingFiles().length;
            i = processingLength;
            if (processingLength >= parallelUploads) {
                return;
            }
            queuedFiles = this.getQueuedFiles();
            if (!(queuedFiles.length > 0)) {
                return;
            }
            if (this.options.uploadMultiple) {
                return this.processFiles(queuedFiles.slice(0, parallelUploads - processingLength));
            } else {
                while (i < parallelUploads) {
                    if (!queuedFiles.length) {
                        return;
                    }
                    this.processFile(queuedFiles.shift());
                    i++;
                }
            }
        };

        Dropzone.prototype.processFile = function(file) {
            return this.processFiles([file]);
        };

        Dropzone.prototype.processFiles = function(files) {
            var file, _i, _len;
            for (_i = 0, _len = files.length; _i < _len; _i++) {
                file = files[_i];
                file.processing = true;
                file.status = Dropzone.UPLOADING;
                this.emit("processing", file);
            }
            if (this.options.uploadMultiple) {
                this.emit("processingmultiple", files);
            }
            return this.uploadFiles(files);
        };

        Dropzone.prototype._getFilesWithXhr = function(xhr) {
            var file, files;
            return files = (function() {
                var _i, _len, _ref, _results;
                _ref = this.files;
                _results = [];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    file = _ref[_i];
                    if (file.xhr === xhr) {
                        _results.push(file);
                    }
                }
                return _results;
            }).call(this);
        };

        Dropzone.prototype.cancelUpload = function(file) {
            var groupedFile, groupedFiles, _i, _j, _len, _len1, _ref;
            if (file.status === Dropzone.UPLOADING) {
                groupedFiles = this._getFilesWithXhr(file.xhr);
                for (_i = 0, _len = groupedFiles.length; _i < _len; _i++) {
                    groupedFile = groupedFiles[_i];
                    groupedFile.status = Dropzone.CANCELED;
                }
                file.xhr.abort();
                for (_j = 0, _len1 = groupedFiles.length; _j < _len1; _j++) {
                    groupedFile = groupedFiles[_j];
                    this.emit("canceled", groupedFile);
                }
                if (this.options.uploadMultiple) {
                    this.emit("canceledmultiple", groupedFiles);
                }
            } else if ((_ref = file.status) === Dropzone.ADDED || _ref === Dropzone.QUEUED) {
                file.status = Dropzone.CANCELED;
                this.emit("canceled", file);
                if (this.options.uploadMultiple) {
                    this.emit("canceledmultiple", [file]);
                }
            }
            if (this.options.autoProcessQueue) {
                return this.processQueue();
            }
        };

        resolveOption = function() {
            var args, option;
            option = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
            if (typeof option === 'function') {
                return option.apply(this, args);
            }
            return option;
        };

        Dropzone.prototype.uploadFile = function(file) {
            return this.uploadFiles([file]);
        };

        Dropzone.prototype.uploadFiles = function(files) {
            var file, formData, handleError, headerName, headerValue, headers, i, input, inputName, inputType, key, method, option, progressObj, response, updateProgress, url, value, xhr, _i, _j, _k, _l, _len, _len1, _len2, _len3, _m, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
            xhr = new XMLHttpRequest();
            for (_i = 0, _len = files.length; _i < _len; _i++) {
                file = files[_i];
                file.xhr = xhr;
            }
            method = resolveOption(this.options.method, files);
            url = resolveOption(this.options.url, files);
            xhr.open(method, url, true);
            xhr.withCredentials = !!this.options.withCredentials;
            response = null;
            handleError = (function(_this) {
                return function() {
                    var _j, _len1, _results;
                    _results = [];
                    for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
                        file = files[_j];
                        _results.push(_this._errorProcessing(files, response || _this.options.dictResponseError.replace("{{statusCode}}", xhr.status), xhr));
                    }
                    return _results;
                };
            })(this);
            updateProgress = (function(_this) {
                return function(e) {
                    var allFilesFinished, progress, _j, _k, _l, _len1, _len2, _len3, _results;
                    if (e != null) {
                        progress = 100 * e.loaded / e.total;
                        for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
                            file = files[_j];
                            file.upload = {
                                progress: progress,
                                total: e.total,
                                bytesSent: e.loaded
                            };
                        }
                    } else {
                        allFilesFinished = true;
                        progress = 100;
                        for (_k = 0, _len2 = files.length; _k < _len2; _k++) {
                            file = files[_k];
                            if (!(file.upload.progress === 100 && file.upload.bytesSent === file.upload.total)) {
                                allFilesFinished = false;
                            }
                            file.upload.progress = progress;
                            file.upload.bytesSent = file.upload.total;
                        }
                        if (allFilesFinished) {
                            return;
                        }
                    }
                    _results = [];
                    for (_l = 0, _len3 = files.length; _l < _len3; _l++) {
                        file = files[_l];
                        _results.push(_this.emit("uploadprogress", file, progress, file.upload.bytesSent));
                    }
                    return _results;
                };
            })(this);
            xhr.onload = (function(_this) {
                return function(e) {
                    var _ref;
                    if (files[0].status === Dropzone.CANCELED) {
                        return;
                    }
                    if (xhr.readyState !== 4) {
                        return;
                    }
                    response = xhr.responseText;
                    if (xhr.getResponseHeader("content-type") && ~xhr.getResponseHeader("content-type").indexOf("application/json")) {
                        try {
                            response = JSON.parse(response);
                        } catch (_error) {
                            e = _error;
                            response = "Invalid JSON response from server.";
                        }
                    }
                    updateProgress();
                    if (!((200 <= (_ref = xhr.status) && _ref < 300))) {
                        return handleError();
                    } else {
                        return _this._finished(files, response, e);
                    }
                };
            })(this);
            xhr.onerror = (function(_this) {
                return function() {
                    if (files[0].status === Dropzone.CANCELED) {
                        return;
                    }
                    return handleError();
                };
            })(this);
            progressObj = (_ref = xhr.upload) != null ? _ref : xhr;
            progressObj.onprogress = updateProgress;
            headers = {
                "Accept": "application/json",
                "Cache-Control": "no-cache",
                "X-Requested-With": "XMLHttpRequest"
            };
            if (this.options.headers) {
                extend(headers, this.options.headers);
            }
            for (headerName in headers) {
                headerValue = headers[headerName];
                xhr.setRequestHeader(headerName, headerValue);
            }
            formData = new FormData();
            if (this.options.params) {
                _ref1 = this.options.params;
                for (key in _ref1) {
                    value = _ref1[key];
                    formData.append(key, value);
                }
            }
            for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
                file = files[_j];
                this.emit("sending", file, xhr, formData);
            }
            if (this.options.uploadMultiple) {
                this.emit("sendingmultiple", files, xhr, formData);
            }
            if (this.element.tagName === "FORM") {
                _ref2 = this.element.querySelectorAll("input, textarea, select, button");
                for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                    input = _ref2[_k];
                    inputName = input.getAttribute("name");
                    inputType = input.getAttribute("type");
                    if (input.tagName === "SELECT" && input.hasAttribute("multiple")) {
                        _ref3 = input.options;
                        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
                            option = _ref3[_l];
                            if (option.selected) {
                                formData.append(inputName, option.value);
                            }
                        }
                    } else if (!inputType || ((_ref4 = inputType.toLowerCase()) !== "checkbox" && _ref4 !== "radio") || input.checked) {
                        formData.append(inputName, input.value);
                    }
                }
            }
            for (i = _m = 0, _ref5 = files.length - 1; 0 <= _ref5 ? _m <= _ref5 : _m >= _ref5; i = 0 <= _ref5 ? ++_m : --_m) {
                formData.append(this._getParamName(i), files[i], files[i].name);
            }
            return xhr.send(formData);
        };

        Dropzone.prototype._finished = function(files, responseText, e) {
            var file, _i, _len;
            for (_i = 0, _len = files.length; _i < _len; _i++) {
                file = files[_i];
                file.status = Dropzone.SUCCESS;
                this.emit("success", file, responseText, e);
                this.emit("complete", file);
            }
            if (this.options.uploadMultiple) {
                this.emit("successmultiple", files, responseText, e);
                this.emit("completemultiple", files);
            }
            if (this.options.autoProcessQueue) {
                return this.processQueue();
            }
        };

        Dropzone.prototype._errorProcessing = function(files, message, xhr) {
            var file, _i, _len;
            for (_i = 0, _len = files.length; _i < _len; _i++) {
                file = files[_i];
                file.status = Dropzone.ERROR;
                this.emit("error", file, message, xhr);
                this.emit("complete", file);
            }
            if (this.options.uploadMultiple) {
                this.emit("errormultiple", files, message, xhr);
                this.emit("completemultiple", files);
            }
            if (this.options.autoProcessQueue) {
                return this.processQueue();
            }
        };

        return Dropzone;

    })(Emitter);

    Dropzone.version = "4.0.1";

    Dropzone.options = {};

    Dropzone.optionsForElement = function(element) {
        if (element.getAttribute("id")) {
            return Dropzone.options[camelize(element.getAttribute("id"))];
        } else {
            return void 0;
        }
    };

    Dropzone.instances = [];

    Dropzone.forElement = function(element) {
        if (typeof element === "string") {
            element = document.querySelector(element);
        }
        if ((element != null ? element.dropzone : void 0) == null) {
            throw new Error("No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone.");
        }
        return element.dropzone;
    };

    Dropzone.autoDiscover = true;

    Dropzone.discover = function() {
        var checkElements, dropzone, dropzones, _i, _len, _results;
        if (document.querySelectorAll) {
            dropzones = document.querySelectorAll(".dropzone");
        } else {
            dropzones = [];
            checkElements = function(elements) {
                var el, _i, _len, _results;
                _results = [];
                for (_i = 0, _len = elements.length; _i < _len; _i++) {
                    el = elements[_i];
                    if (/(^| )dropzone($| )/.test(el.className)) {
                        _results.push(dropzones.push(el));
                    } else {
                        _results.push(void 0);
                    }
                }
                return _results;
            };
            checkElements(document.getElementsByTagName("div"));
            checkElements(document.getElementsByTagName("form"));
        }
        _results = [];
        for (_i = 0, _len = dropzones.length; _i < _len; _i++) {
            dropzone = dropzones[_i];
            if (Dropzone.optionsForElement(dropzone) !== false) {
                _results.push(new Dropzone(dropzone));
            } else {
                _results.push(void 0);
            }
        }
        return _results;
    };

    Dropzone.blacklistedBrowsers = [/opera.*Macintosh.*version\/12/i];

    Dropzone.isBrowserSupported = function() {
        var capableBrowser, regex, _i, _len, _ref;
        capableBrowser = true;
        if (window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector) {
            if (!("classList" in document.createElement("a"))) {
                capableBrowser = false;
            } else {
                _ref = Dropzone.blacklistedBrowsers;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    regex = _ref[_i];
                    if (regex.test(navigator.userAgent)) {
                        capableBrowser = false;
                        continue;
                    }
                }
            }
        } else {
            capableBrowser = false;
        }
        return capableBrowser;
    };

    without = function(list, rejectedItem) {
        var item, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = list.length; _i < _len; _i++) {
            item = list[_i];
            if (item !== rejectedItem) {
                _results.push(item);
            }
        }
        return _results;
    };

    camelize = function(str) {
        return str.replace(/[\-_](\w)/g, function(match) {
            return match.charAt(1).toUpperCase();
        });
    };

    Dropzone.createElement = function(string) {
        var div;
        div = document.createElement("div");
        div.innerHTML = string;
        return div.childNodes[0];
    };

    Dropzone.elementInside = function(element, container) {
        if (element === container) {
            return true;
        }
        while (element = element.parentNode) {
            if (element === container) {
                return true;
            }
        }
        return false;
    };

    Dropzone.getElement = function(el, name) {
        var element;
        if (typeof el === "string") {
            element = document.querySelector(el);
        } else if (el.nodeType != null) {
            element = el;
        }
        if (element == null) {
            throw new Error("Invalid `" + name + "` option provided. Please provide a CSS selector or a plain HTML element.");
        }
        return element;
    };

    Dropzone.getElements = function(els, name) {
        var e, el, elements, _i, _j, _len, _len1, _ref;
        if (els instanceof Array) {
            elements = [];
            try {
                for (_i = 0, _len = els.length; _i < _len; _i++) {
                    el = els[_i];
                    elements.push(this.getElement(el, name));
                }
            } catch (_error) {
                e = _error;
                elements = null;
            }
        } else if (typeof els === "string") {
            elements = [];
            _ref = document.querySelectorAll(els);
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                el = _ref[_j];
                elements.push(el);
            }
        } else if (els.nodeType != null) {
            elements = [els];
        }
        if (!((elements != null) && elements.length)) {
            throw new Error("Invalid `" + name + "` option provided. Please provide a CSS selector, a plain HTML element or a list of those.");
        }
        return elements;
    };

    Dropzone.confirm = function(question, accepted, rejected) {
        if (window.confirm(question)) {
            return accepted();
        } else if (rejected != null) {
            return rejected();
        }
    };

    Dropzone.isValidFile = function(file, acceptedFiles) {
        var baseMimeType, mimeType, validType, _i, _len;
        if (!acceptedFiles) {
            return true;
        }
        acceptedFiles = acceptedFiles.split(",");
        mimeType = file.type;
        baseMimeType = mimeType.replace(/\/.*$/, "");
        for (_i = 0, _len = acceptedFiles.length; _i < _len; _i++) {
            validType = acceptedFiles[_i];
            validType = validType.trim();
            if (validType.charAt(0) === ".") {
                if (file.name.toLowerCase().indexOf(validType.toLowerCase(), file.name.length - validType.length) !== -1) {
                    return true;
                }
            } else if (/\/\*$/.test(validType)) {
                if (baseMimeType === validType.replace(/\/.*$/, "")) {
                    return true;
                }
            } else {
                if (mimeType === validType) {
                    return true;
                }
            }
        }
        return false;
    };

    if (typeof jQuery !== "undefined" && jQuery !== null) {
        jQuery.fn.dropzone = function(options) {
            return this.each(function() {
                return new Dropzone(this, options);
            });
        };
    }

    if (typeof module !== "undefined" && module !== null) {
        module.exports = Dropzone;
    } else {
        window.Dropzone = Dropzone;
    }

    Dropzone.ADDED = "added";

    Dropzone.QUEUED = "queued";

    Dropzone.ACCEPTED = Dropzone.QUEUED;

    Dropzone.UPLOADING = "uploading";

    Dropzone.PROCESSING = Dropzone.UPLOADING;

    Dropzone.CANCELED = "canceled";

    Dropzone.ERROR = "error";

    Dropzone.SUCCESS = "success";


    /*

     Bugfix for iOS 6 and 7
     Source: http://stackoverflow.com/questions/11929099/html5-canvas-drawimage-ratio-bug-ios
     based on the work of https://github.com/stomita/ios-imagefile-megapixel
     */

    detectVerticalSquash = function(img) {
        var alpha, canvas, ctx, data, ey, ih, iw, py, ratio, sy;
        iw = img.naturalWidth;
        ih = img.naturalHeight;
        canvas = document.createElement("canvas");
        canvas.width = 1;
        canvas.height = ih;
        ctx = canvas.getContext("2d");
        ctx.drawImage(img, 0, 0);
        data = ctx.getImageData(0, 0, 1, ih).data;
        sy = 0;
        ey = ih;
        py = ih;
        while (py > sy) {
            alpha = data[(py - 1) * 4 + 3];
            if (alpha === 0) {
                ey = py;
            } else {
                sy = py;
            }
            py = (ey + sy) >> 1;
        }
        ratio = py / ih;
        if (ratio === 0) {
            return 1;
        } else {
            return ratio;
        }
    };

    drawImageIOSFix = function(ctx, img, sx, sy, sw, sh, dx, dy, dw, dh) {
        var vertSquashRatio;
        vertSquashRatio = detectVerticalSquash(img);
        return ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh / vertSquashRatio);
    };


    /*
     * contentloaded.js
     *
     * Author: Diego Perini (diego.perini at gmail.com)
     * Summary: cross-browser wrapper for DOMContentLoaded
     * Updated: 20101020
     * License: MIT
     * Version: 1.2
     *
     * URL:
     * http://javascript.nwbox.com/ContentLoaded/
     * http://javascript.nwbox.com/ContentLoaded/MIT-LICENSE
     */

    contentLoaded = function(win, fn) {
        var add, doc, done, init, poll, pre, rem, root, top;
        done = false;
        top = true;
        doc = win.document;
        root = doc.documentElement;
        add = (doc.addEventListener ? "addEventListener" : "attachEvent");
        rem = (doc.addEventListener ? "removeEventListener" : "detachEvent");
        pre = (doc.addEventListener ? "" : "on");
        init = function(e) {
            if (e.type === "readystatechange" && doc.readyState !== "complete") {
                return;
            }
            (e.type === "load" ? win : doc)[rem](pre + e.type, init, false);
            if (!done && (done = true)) {
                return fn.call(win, e.type || e);
            }
        };
        poll = function() {
            var e;
            try {
                root.doScroll("left");
            } catch (_error) {
                e = _error;
                setTimeout(poll, 50);
                return;
            }
            return init("poll");
        };
        if (doc.readyState !== "complete") {
            if (doc.createEventObject && root.doScroll) {
                try {
                    top = !win.frameElement;
                } catch (_error) {}
                if (top) {
                    poll();
                }
            }
            doc[add](pre + "DOMContentLoaded", init, false);
            doc[add](pre + "readystatechange", init, false);
            return win[add](pre + "load", init, false);
        }
    };

    Dropzone._autoDiscoverFunction = function() {
        if (Dropzone.autoDiscover) {
            return Dropzone.discover();
        }
    };

    contentLoaded(window, Dropzone._autoDiscoverFunction);

}).call(this);
'use strict';
var app = angular.module('360blickFrontendApp', [
    'constants',
    'ngCookies',
    'ngResource',
    'ngSanitize',
    'ngAnimate',
    'ui.router',
    'btford.modal',
    'templates',
    'sun.scrollable',
    'mdo-angular-cryptography'
]);

// TODO: Cleanup ENV
var api_url = 'http://localhost:3000/api/v1';
var assets_url = 'http://localhost:3000';
api_url = 'https://blick.herokuapp.com/api/v1';
assets_url = 'https://blick.herokuapp.com';
app.constant('ENV_CONFIG', {
    api: api_url,
    assets: assets_url
});

app.config(['$stateProvider', '$urlRouterProvider', '$locationProvider', '$httpProvider', 'USER_ROLES',
    function ($stateProvider, $urlRouterProvider, $locationProvider, $httpProvider, USER_ROLES) {

    $httpProvider.defaults.useXDomain = true;
    delete $httpProvider.defaults.headers.common['X-Requested-With'];

    $stateProvider
        .state('app', {
            url: "/",
            views: {
                "app": {
                    templateUrl: "landingpage/index.html",
                    controller: "LandingpageController"
                }
            },
            data: {
                authorizedRoles: false
            }
        })
        .state('gettingStarted', {
            url: "/getting-started",
            views: {
                "app": {
                    templateUrl: "gettingStarted/index.html",
                    controller: "GettingStartedController"
                }
            },
            data: {
                authorizedRoles: false
            }
        })
        .state('documentation', {
            url: "/documentation",
            views: {
                "app": {
                    templateUrl: "documentation/index.html",
                    controller: "DocumentationController"
                }
            },
            data: {
                authorizedRoles: false
            }
        })
        .state('newsletter', {
            url: "/newsletter",
            views: {
                "app": {
                    templateUrl: "newsletter/index.html",
                    controller: "NewsletterController"
                }
            },
            data: {
                authorizedRoles: false
            }
        })
        .state('register', {
            url: "/register",
            views: {
                "app": {
                    templateUrl: "auth/register.html",
                    controller: "RegisterController"
                }
            },
            data: {
                authorizedRoles: false
            }
        })
        .state('login', {
            url: "/login",
            views: {
                "app": {
                    templateUrl: "auth/login.html",
                    controller: "LoginController"
                }
            },
            data: {
                authorizedRoles: false
            }
        })
        .state('reset', {
            url: "/reset",
            views: {
                "app": {
                    templateUrl: "auth/reset.html",
                    controller: "ResetController"
                }
            },
            data: {
                authorizedRoles: false
            }
        })
        .state('user.scenetemplates', {
            url: "/scenetemplates",
            views: {
                "app": {
                    templateUrl: "user/index.html",
                    controller: "UserController"
                },
                "userContent@user": {
                    templateUrl: "sceneTemplates/sceneTemplates.html",
                    controller: "SceneTemplatesController"
                },
                "subNavigation@user": {
                    templateUrl: "subNavigation/projects.html",
                    controller: "UserProjectsController"
                }
            },
            data: {
                authorizedRoles: [USER_ROLES.admin]
            }
        })
        .state('template', {
            url: "/:username/template/:templateId",
            views: {
                "app": {
                    templateUrl: "editor/editor.html",
                    controller: "EditorController"
                },
                "subNavigation@template": {
                    templateUrl: "subNavigation/editor.html",
                    controller: "EditorController"
                }
            },
            data: {
                authorizedRoles: [USER_ROLES.admin]
            }
        })
        .state('user', {
            url: "/:username",
            views: {
                "app": {
                    templateUrl: "user/index.html",
                    controller: "UserController"
                },
                "userContent@user": {
                    templateUrl: "user/projects.html",
                    controller: "UserProjectsController"
                },
                "subNavigation@user": {
                    templateUrl: "subNavigation/projects.html",
                    controller: "UserProjectsController"
                }
            },
            data: {
                authorizedRoles: [USER_ROLES.admin, USER_ROLES.editor]
            }
        })
        .state('user.settings', {
            url: "/settings",
            views: {
                "userContent@user": {
                    templateUrl: "user/settings.html",
                    controller: "UserSettingsController"
                },
                "subNavigation@user": {
                    templateUrl: "subNavigation/settings.html",
                    controller: "UserSettingsController"
                }
            },
            data: {
                authorizedRoles: [USER_ROLES.admin, USER_ROLES.editor]
            }
        })
        .state('user.settings.account', {
            url: "/account",
            views: {
                "userContent@user": {
                    templateUrl: "user/accountSettings.html",
                    controller: "AccountSettingsController"
                }
            },
            data: {
                authorizedRoles: [USER_ROLES.admin, USER_ROLES.editor]
            }
        })
        .state('user.project', {
            url: "/project/:projectId",
            views: {
                "userContent@user": {
                    templateUrl: "project/index.html",
                    controller: "ProjectController"
                },
                "projectContent@user.project": {
                    templateUrl: "project/scenes.html",
                    controller: "ProjectScenesController"
                },
                "subNavigation@user": {
                    templateUrl: "subNavigation/project.html",
                    controller: "ProjectController"
                }
            },
            data: {
                authorizedRoles: [USER_ROLES.admin, USER_ROLES.editor]
            }
        })
        .state('user.project.scenes', {
            url: "/scenes",
            views: {
                "projectContent@user.project": {
                    templateUrl: "project/scenes.html",
                    controller: "ProjectScenesController"
                }
            },
            data: {
                authorizedRoles: [USER_ROLES.admin, USER_ROLES.editor]
            }
        })
        .state('user.project.scenes.settings', {
            url: "/:sceneId/settings",
            views: {
                "projectContent@user.project": {
                    templateUrl: "project/sceneSettings.html",
                    controller: "ProjectSceneSettingsController"
                }
            },
            data: {
                authorizedRoles: [USER_ROLES.admin, USER_ROLES.editor]
            }
        })
        .state('user.project.assets', {
            url: "/assets",
            views: {
                "projectContent@user.project": {
                    templateUrl: "project/assets.html",
                    controller: "ProjectAssetsController"
                }
            },
            data: {
                authorizedRoles: [USER_ROLES.admin, USER_ROLES.editor]
            }
        })
        .state('user.project.assets.settings', {
            url: "/:assetId/settings",
            views: {
                "projectContent@user.project": {
                    templateUrl: "project/assetSettings.html",
                    controller: "ProjectAssetsSettingsController"
                }
            },
            data: {
                authorizedRoles: [USER_ROLES.admin, USER_ROLES.editor]
            }
        })
        .state('user.project.settings', {
            url: "/settings",
            views: {
                "projectContent@user.project": {
                    templateUrl: "project/settings.html",
                    controller: "ProjectSettingsController"
                }
            },
            data: {
                authorizedRoles: [USER_ROLES.admin, USER_ROLES.editor]
            }
        })
        .state('editor', {
            url: "/:username/project/:projectId/scenes/:sceneId",
            views: {
                "app": {
                    templateUrl: "editor/editor.html",
                    controller: "EditorController"
                },
                "subNavigation@editor": {
                    templateUrl: "subNavigation/editor.html",
                    controller: "EditorController"
                }
            },
            data: {
                authorizedRoles: [USER_ROLES.admin, USER_ROLES.editor]
            }
        });

    $locationProvider.html5Mode(true);

    $urlRouterProvider.otherwise("/");
}]);

app.run(['$rootScope', 'AuthService', 'EventService', 'SessionService', 'USER_ROLES', 'AUTH_EVENTS', 'ModalService',
    function ($rootScope, AuthService, EventService, SessionService, USER_ROLES, AUTH_EVENTS, ModalService) {

        $rootScope.editorControllerLoaded = false;

        AuthService.reloadLocalCredentials();

//        console.log(SessionService.getUser());

        $rootScope.currentUser = SessionService.getUser().nick;
        $rootScope.userRoles = USER_ROLES;
        $rootScope.isAuthorized = AuthService.isAuthorized;
        $rootScope.isAdmin = SessionService.isAdmin;

        $rootScope.sidebarMenu = { isActive: true };
        // debugging
        $rootScope.console = console;

        $rootScope.$on('$stateChangeStart', function (event, next, nextParams) {

            var authorizedRoles = next.data.authorizedRoles;

            if (authorizedRoles === false) {
                return;
            }

            if (!AuthService.isAuthorized(authorizedRoles)) {
                event.preventDefault();
                if (AuthService.isAuthenticated()) {
                    // user is not allowed
                    console.log(AuthService.isAuthenticated());
                    $rootScope.$broadcast(AUTH_EVENTS.notAuthorized, {next: next, params: nextParams});
                } else {
                    // user is not logged in
                    $rootScope.$broadcast(AUTH_EVENTS.notAuthenticated, {next: next, params: nextParams});
                }
            }
         });
}]);

angular.module('templates', []);
'use strict';
angular.module('constants', [])

    .constant('USER_ROLES', {
        all: '*',
        admin: 'admin',
        editor: 'editor',
        guest: 'guest'
    })

    .constant('AUTH_EVENTS', {
        loginSuccess: 'auth-login-success',
        loginFailed: 'auth-login-failed',
        logoutSuccess: 'auth-logout-success',
        logoutFailed: 'auth-logout-failed',
        registerSuccess: 'auth-register-success',
        registerFailed: 'auth-register-failed',
        sessionTimeout: 'auth-session-timeout',
        notAuthenticated: 'auth-not-authenticated',
        notAuthorized: 'auth-not-authorized'
    })

    .constant('SUPPORTED_INTERACTIONS', {
        'goToScene': {
            title: 'Go to Scene:',
            parameters: [
                'scene',
                'effectIn',
                'effectOut'
            ]
        },
        'goToObject': {
            title: 'Go to Object:',
            parameters: [
                'object'
            ]
        }
    })

    .constant('SUPPORTED_OBJECTS', [
        {
            title: '3D Primitives',
            items: [
                {
                    name: 'Sphere',
                    objecttype: 'SphereGeometry'
                },
                {
                    name: 'Cube',
                    objecttype: 'BoxGeometry'
                },
                {
                    name: 'Plane',
                    objecttype: 'PlaneGeometry'
                },
                {
                    name: 'Cylinder',
                    objecttype: 'CylinderGeometry'
                }
            ]
        }, {
            title: '2D Primitives',
            items: [
                {
                    name: 'empty1',
                    objecttype: 'empty1'
                },
                {
                    name: 'empty1',
                    objecttype: 'empty1'
                }
            ]
        }
    ]);
'use strict';angular.module('templates', []).run(['$templateCache', function($templateCache) {$templateCache.put("auth/login.html","<div id=\"view--login\" class=\"view container\">\n    <div id=\"view--login__wrapper\" class=\"view__wrapper\">\n        <h1><a href=\"/\">360blick</a></h1>\n        <form name=\"loginForm\" class=\"container\"\n              ng-submit=\"login(credentials)\" novalidate>\n            <fieldset class=\"row\">\n                <placeholder-input value=\"credentials.login\" label=\"Username\" type=\"text\" has-initial-focus=\"true\"></placeholder-input>\n            </fieldset>\n            <fieldset class=\"row\">\n                <placeholder-input value=\"credentials.password\" label=\"Password\" type=\"password\"></placeholder-input>\n            </fieldset>\n            <div class=\"row\">\n                <button class=\"btn btn--round btn--submit\">Login</button>\n            </div>\n        </form>\n        <ul class=\"tiny-list\">\n            <li class=\"tiny-list__item\"><a ui-sref=\"reset\">Forgot your password or username?</a></li>\n            <li class=\"tiny-list__item\"><a ui-sref=\"register\">Create an Account</a></li>\n        </ul>\n    </div>\n</div>");
$templateCache.put("auth/register.html","<div id=\"view--register\" class=\"view container\">\n    <div id=\"view--register__wrapper\" class=\"view__wrapper\">\n        <h1><a href=\"/\">360blick</a></h1>\n        <form name=\"registerForm\" class=\"container\"\n              ng-submit=\"register(credentials)\" novalidate>\n            <fieldset class=\"row\">\n                <placeholder-input value=\"credentials.nick\" label=\"Username\" type=\"text\" has-initial-focus=\"true\"></placeholder-input>\n            </fieldset>\n            <fieldset class=\"row\">\n                <placeholder-input value=\"credentials.email\" label=\"Email\" type=\"email\"></placeholder-input>\n            </fieldset>\n            <fieldset class=\"row\">\n                <placeholder-input value=\"credentials.password\" label=\"Password\" type=\"password\"></placeholder-input>\n            </fieldset>\n            <div class=\"row\">\n                <button class=\"btn btn--round btn--submit\">Login</button>\n            </div>\n        </form>\n        <p class=\"auth-message auth-message--success\" ng-if=\"states.reset.success\">An email with reset information has been sent.</p>\n        <ul class=\"tiny-list\">\n            <li class=\"tiny-list__item\"><a ui-sref=\"login\">Already got an Account?</a></li>\n        </ul>\n    </div>\n</div>\n\n");
$templateCache.put("auth/reset.html","<div id=\"view--reset\" class=\"view container\">\n    <div id=\"view--reset__wrapper\" class=\"view__wrapper\">\n        <h1><a href=\"/\">360blick</a></h1>\n        <form name=\"resetRequestForm\" class=\"container\" ng-submit=\"reset(credentials)\" ng-if=\"states.resetRequest.showForm\" novalidate>\n            <fieldset class=\"row\">\n                <placeholder-input value=\"credentials.email\" label=\"Email\" type=\"text\" has-initial-focus=\"true\"></placeholder-input>\n            </fieldset>\n            <div class=\"row\">\n                <button class=\"btn btn--round btn--submit\">Reset Password</button>\n            </div>\n        </form>\n        <form name=\"resetConfirmForm\" class=\"container\" ng-submit=\"confirm(credentials)\" ng-if=\"states.resetConfirm.showForm\" novalidate>\n            <fieldset class=\"row\">\n                <placeholder-input value=\"credentials.password\" label=\"New Password\" type=\"password\" has-initial-focus=\"true\"></placeholder-input>\n            </fieldset>\n            <div class=\"row\">\n                <button class=\"btn btn--round btn--submit\">Save Password</button>\n            </div>\n        </form>\n        <div class=\"auth-message auth-message--success\" ng-if=\"states.resetRequest.showSuccessMessage\">\n            <p>An email with reset information has been sent.</p>\n        </div>\n        <div class=\"auth-message auth-message--error\" ng-if=\"states.resetRequest.showErrorMessage\">\n            <p>Email not found.</p>\n        </div>\n        <div class=\"auth-message auth-message--success\" ng-if=\"states.resetConfirm.showSuccessMessage\">\n            <p>Success.</p>\n        </div>\n        <div class=\"auth-message auth-message--error\" ng-if=\"states.resetConfirm.showErrorMessage\">\n            <p>Error.</p>\n        </div>\n        <ul class=\"tiny-list\">\n            <li class=\"tiny-list__item\"><a ui-sref=\"login\">Login Page</a></li>\n        </ul>\n    </div>\n</div>");
$templateCache.put("documentation/index.html","documentation");
$templateCache.put("editor/editor.html","<nav-header></nav-header>\n<nav class=\"editor-toolbar\">\n    <scrollable>\n        <ul class=\"editor-toolbar__list\">\n            <li class=\"editor-toolbar__item has-bottom-seperator active\">\n                <i class=\"fa fa-location-arrow\"></i>\n                <h2 class=\"editor-toolbar__title\">Selection</h2>\n            </li>\n            <li class=\"editor-toolbar__item has-bottom-seperator\">\n                <i class=\"fa fa-trash-o\"></i>\n                <h2 class=\"editor-toolbar__title\">Trash / Rubber</h2>\n            </li>\n            <li class=\"editor-toolbar__item\">\n                <i class=\"fa fa-expand\"></i>\n                <h2 class=\"editor-toolbar__title\">Scale</h2>\n            </li>\n            <li class=\"editor-toolbar__item\">\n                <i class=\"fa fa-arrows\"></i>\n                <h2 class=\"editor-toolbar__title\">Translate</h2>\n            </li>\n            <li class=\"editor-toolbar__item has-bottom-seperator\">\n                <i class=\"fa fa-arrows-h\"></i>\n                <h2 class=\"editor-toolbar__title\">Move</h2>\n            </li>\n            <li class=\"editor-toolbar__item\">\n                <i class=\"fa fa-camera\"></i>\n                <h2 class=\"editor-toolbar__title\">Camera 1</h2>\n            </li>\n            <li class=\"editor-toolbar__item\">\n                <i class=\"fa fa-camera\"></i>\n                <h2 class=\"editor-toolbar__title\">Camera 2</h2>\n            </li>\n            <li class=\"editor-toolbar__item active\">\n                <i class=\"fa fa-camera\"></i>\n                <h2 class=\"editor-toolbar__title\">Camera 3</h2>\n            </li>\n        </ul>\n    </scrollable>\n</nav>\n<editor-scene class=\"editor-scene\"></editor-scene>\n<div class=\"editor-sidebar\">\n    <scrollable>\n        <div class=\"editor-sidebar__top\">\n            <nav class=\"filter-switch\">\n                <button class=\"filter-switch__option active\">Objects</button>\n                <button class=\"filter-switch__option\">Settings</button>\n            </nav>\n            <div class=\"editor-settings\">Editor Settings</div>\n            <div class=\"editor-objects\">\n                <ul class=\"toggle-list\">\n                    <editor-object ng-repeat=\"item in getSceneObjects()\" ng-if=\"!hiddenTypes[item.type]\"></editor-object>\n                </ul>\n            </div>\n        </div>\n\n        <div class=\"editor-sidebar__bottom\">\n            <button class=\"editor-sidebar__ellipsis\">\n                <i class=\"fa fa-ellipsis-h\"></i>\n            </button>\n            <nav class=\"filter-switch\">\n                <button class=\"filter-switch__option\">POI</button>\n                <button class=\"filter-switch__option\">Media</button>\n                <button class=\"filter-switch__option active\">Objects</button>\n                <button class=\"filter-switch__option\">Effects</button>\n            </nav>\n            <ul class=\"toggle-list--small\">\n                <li class=\"toggle-list--small__item\" ng-repeat=\"primitives in getSupportedPrimitiveObjects()\">\n                    <div class=\"toggle-list--small__header\">\n                        <h2 class=\"toggle-list--small__title\">{{primitives.title}}</h2>\n                    </div>\n                    <ul class=\"selection-list container\">\n                        <li class=\"selection-list__item col span-3\" ng-repeat=\"primitive in primitives.items track by $index\"  ng-click=\"addNewObject(primitive.objecttype)\">\n                            <i class=\"fa fa-cube\"></i>\n                            <h4 class=\"selection-list__title\">{{primitive.name}}</h4>\n                        </li>\n                    </ul>\n                </li>\n            </ul>\n        </div>\n    </scrollable>\n</div>");
$templateCache.put("gettingStarted/index.html","getting started");
$templateCache.put("landingpage/index.html","<div id=\"view--root\" class=\"container\">\n    <section class=\"section section--gallery row\">\n        <h1 class=\"section--gallery__title\">360blick</h1>\n        <p class=\"section--gallery__subtitle\">interactive panorama experiences</p>\n        <button ui-sref=\"register\" class=\"btn btn--cta section--gallery__sign-up\" ng-if=\"!isAuthenticated()\">sign up</button>\n        <button class=\"section--gallery__login\" ui-sref=\"login\">\n            Already got an Account? <a ui-sref=\"login\" ng-if=\"!isAuthenticated()\">Login</a>\n        </button>\n        <button ui-sref=\"user({username: currentUser})\" class=\"btn btn--cta section--gallery__sign-up\" ng-if=\"isAuthenticated()\">Your profile</button>\n    </section>\n    <section class=\"section section--features row\">\n        <ul class=\"icon-list\">\n            <li class=\"icon-list__item\">\n                <i class=\"fa fa-cube\"></i>\n                <span class=\"icon-list__title icon-list__title--divided\">Scenes & Text</span>\n                <span class=\"icon-list__text\">Add your content and make it interactive.</span>\n            </li>\n            <li class=\"icon-list__item\">\n                <i class=\"fa fa-link\"></i>\n                <span class=\"icon-list__title icon-list__title--divided\">Navigation</span>\n                <span class=\"icon-list__text\">Define Relations and link between Panormas.</span>\n            </li>\n            <li class=\"icon-list__item\">\n                <i class=\"fa fa-magic\"></i>\n                <span class=\"icon-list__title icon-list__title--divided\">Effects</span>\n                <span class=\"icon-list__text\">Add Animations and Transitions for more emotion.</span>\n            </li>\n        </ul>\n    </section>\n    <section class=\"section section--toggle row\">\n        <hgroup>\n            <h2 class=\"section__title\">Interactive Editing</h2>\n            <h3 class=\"section__subtitle\">Interactive panorama experiences with more perspective, you will actually love to edit and share.</h3>\n        </hgroup>\n        <div class=\"section--toggle__images\"></div>\n    </section>\n    <section class=\"section section--options row\">\n        <hgroup>\n            <h2 class=\"section__title\">Show some Awesomeness</h2>\n            <h3 class=\"section__subtitle\">Import your favourite assets with ease and make them even more awesome.</h3>\n        </hgroup>\n        <ul class=\"icon-list icon-list--minor\">\n            <li class=\"icon-list__item\">\n                <i class=\"fa fa-picture-o\"></i>\n                <span class=\"icon-list__text\">Images</span>\n            </li>\n            <li class=\"icon-list__item\">\n                <i class=\"fa fa-cube\"></i>\n                <span class=\"icon-list__text\">3D Models</span>\n            </li>\n            <li class=\"icon-list__item\">\n                <i class=\"fa fa-magic\"></i>\n                <span class=\"icon-list__text\">Filters</span>\n            </li>\n            <li class=\"icon-list__item\">\n                <i class=\"fa fa-video-camera\"></i>\n                <span class=\"icon-list__text\">Videos</span>\n            </li>\n            <li class=\"icon-list__item\">\n                <i class=\"fa fa-font\"></i>\n                <span class=\"icon-list__text\">Text</span>\n            </li>\n        </ul>\n    </section>\n    <footer class=\"footer\">\n        <nav>\n            <ul>\n                <li>\n                    <a href=\"#\">Help</a>\n                </li>\n                <li>\n                    <a href=\"#\">Blog</a>\n                </li>\n                <li>\n                    <a href=\"#\">Documentation</a>\n                </li>\n                <li>\n                    <a href=\"#\">About</a>\n                </li>\n                <li>\n                    <a href=\"#\">Imprint</a>\n                </li>\n            </ul>\n        </nav>\n    </footer>\n</div>\n\n");
$templateCache.put("landingpage/slideshow.html","");
$templateCache.put("newsletter/index.html","<div id=\"view--newsletter\" class=\"view container\">\n    <div id=\"view--newsletter__wrapper\" class=\"view__wrapper\">\n        <h1><a href=\"/\">360blick Newsletter</a></h1>\n        <form name=\"loginForm\" class=\"container\"\n              ng-submit=\"login(credentials)\" novalidate>\n            <fieldset class=\"row\">\n                <placeholder-input value=\"credentials.login\" label=\"Username\" type=\"text\" has-initial-focus=\"true\"></placeholder-input>\n            </fieldset>\n            <fieldset class=\"row\">\n                <placeholder-input value=\"credentials.email\" label=\"Email\" type=\"email\"></placeholder-input>\n            </fieldset>\n            <div class=\"row\">\n                <button class=\"btn btn--round btn--submit\">Subscribe</button>\n            </div>\n        </form>\n        <ul class=\"tiny-list\">\n            <li class=\"tiny-list__item\"><a ui-sref=\"app\">Landingpage</a></li>\n        </ul>\n    </div>\n</div>");
$templateCache.put("partials/dropzone.html","<div class=\"dropzone fade\" dropzone>\n    <div class=\"dz-message\" data-dz-message>\n        <i class=\"fa fa-upload\"></i>\n        <p>click or drop files</p>\n    </div>\n</div>");
$templateCache.put("partials/feedback.html","<div class=\"dialog\">\n    <div class=\"dialog__content\">\n        <div class=\"dialog__header\">\n            <button class=\"dialog__close\" ng-click=\"closeIt()\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n            <h4 class=\"dialog__title\">Feedback</h4>\n        </div>\n        <div class=\"dialog__body\">\n            <!--<form name=\"loginForm\" class=\"container\"-->\n                  <!--ng-submit=\"login(credentials)\" novalidate>-->\n                <!--<fieldset class=\"row\">-->\n                    <!--<placeholder-input value=\"credentials.login\" label=\"Username\" type=\"text\"></placeholder-input>-->\n                <!--</fieldset>-->\n                <!--<fieldset class=\"row\">-->\n                    <!--<placeholder-input value=\"credentials.password\" label=\"Password\" type=\"password\"></placeholder-input>-->\n                <!--</fieldset>-->\n                <!--<div class=\"row\">-->\n                    <!--<button class=\"btn btn--round btn--submit\">Login</button>-->\n                <!--</div>-->\n            <!--</form>-->\n        </div>\n    </div>\n</div>\n\n");
$templateCache.put("partials/navHeader.html","<header class=\"header\">\n    <div class=\"header__subnav\" ui-view=\"subNavigation\"></div>\n    <div class=\"header__info container\">\n        <div class=\"col span-12 has-text-right\">\n            <profile-info-box></profile-info-box>\n        </div>\n    </div>\n</header>");
$templateCache.put("partials/placeholderInput.html","<div class=\"input input--{{classSuffix}}\" ng-class=\"{\'is-filled\': value, \'is-focused\': isFocused}\">\n    <label class=\"input__label input__label--{{classSuffix}}\" ng-click=\"setFocus()\">{{label}}</label>\n    <input type=\"{{type}}\" class=\"input__field input--{{classSuffix}}__field\" ng-model=\"value\" ng-focus=\"onFocus()\" ng-blur=\"onBlur()\">\n</div>");
$templateCache.put("partials/profileInfoBox.html","<div class=\"profile-info-box\">\n    <button ui-sref=\"login\" class=\"btn btn--cta\" ng-if=\"!isAuthenticated()\">Sign in</button>\n    <div ng-if=\"isAuthenticated()\">\n        <dropdown template-name=\"user\" on-select=\"onDropdownSelect\" data=\"{\'items\': options.items, \'user\': user}\"></dropdown>\n    </div>\n</div>");
$templateCache.put("partials/sidebarMenu.html","<nav class=\"sidebar-menu\">\n    <scrollable>\n        <a ui-sref=\"user\" ui-sref-active=\"is-active\" class=\"sidebar-menu__title\">360blick</a>\n        <ul class=\"menu-list\">\n            <!--    Projects   -->\n            <li class=\"menu-primary__item\">\n                <a ui-sref=\"user\" ui-sref-active-eq=\"is-active\" class=\"menu-primary__title has-menu-seperator\"><i class=\"fa fa-folder-open\"></i>Projects</a>\n                <ul class=\"menu-secondary\">\n                    <li class=\"menu-secondary__item\">\n                        <a ng-click=\"openModal(\'newProject\')\" ui-sref-active=\"is-active\" class=\"menu-secondary__title\"><i class=\"fa fa-plus\"></i>New Project</a>\n                    </li>\n                    <li class=\"menu-secondary__item\" ng-repeat=\"project in projects | orderBy:\'title\'\">\n                        <a ui-sref=\"user.project({projectId: project.id})\" ui-sref-active=\"is-active\" class=\"menu-secondary__title\">{{project.title}}</a>\n                    </li>\n                </ul>\n            </li>\n            <!--    Scenetemplates   -->\n            <li class=\"menu-primary__item\" ng-if=\"isAdmin()\">\n                <a ui-sref=\"user.scenetemplates\" ui-sref-active-eq=\"is-active\" class=\"menu-primary__title has-menu-seperator\"><i class=\"fa fa-folder-open\"></i>Templates</a>\n                <ul class=\"menu-secondary\">\n                    <li class=\"menu-secondary__item\">\n                        <a ng-click=\"openModal(\'newSceneTemplate\')\" ui-sref-active=\"is-active\" class=\"menu-secondary__title\"><i class=\"fa fa-plus\"></i>New Scenetemplate</a>\n                    </li>\n                    <li class=\"menu-secondary__item\" ng-repeat=\"template in sceneTemplates | orderBy:\'title\' track by $index\">\n                        <a ui-sref=\"template({username: username, templateId: template.id})\" ui-sref-active=\"is-active\" class=\"menu-secondary__title\">{{template.title}}</a>\n                    </li>\n                </ul>\n            </li>\n            <li class=\"menu-primary__item\">\n                <a ui-sref=\"user.settings.account\" ui-sref-active=\"is-active\" class=\"menu-primary__title\"><i class=\"fa fa-user\"></i>Account</a>\n            </li>\n            <li class=\"menu-primary__item\">\n                <a ui-sref=\"user.settings\" ui-sref-active-eq=\"is-active\" class=\"menu-primary__title\"><i class=\"fa fa-cog\"></i>Settings</a>\n            </li>\n            <li class=\"menu-primary__item\">\n                <a ng-click=\"openModal(\'help\')\" ui-sref-active=\"is-active\" class=\"menu-primary__title has-menu-seperator\"><i class=\"fa fa-question-circle\"></i>Learn & Help</a>\n                <ul class=\"menu-secondary\">\n                    <li class=\"menu-secondary__item\">\n                        <a ui-sref=\"gettingStarted\" target=\"_blank\" ui-sref-active=\"is-active\" class=\"menu-secondary__title\">Getting Started</a>\n                    </li>\n                    <li class=\"menu-secondary__item\">\n                        <a ui-sref=\"documentation\" target=\"_blank\" ui-sref-active=\"is-active\" class=\"menu-secondary__title\">Documentation</a>\n                    </li>\n                    <li class=\"menu-secondary__item\">\n                        <a ng-click=\"openModal(\'help\')\" ui-sref-active=\"is-active\" class=\"menu-secondary__title\">Help</a>\n                    </li>\n                </ul>\n            </li>\n            <li class=\"menu-primary__item\">\n                <a ui-sref=\"newsletter\" target=\"_blank\" ui-sref-active=\"is-active\" class=\"menu-primary__title\"><i class=\"fa fa-paper-plane-o\"></i>Newsletter</a>\n            </li>\n            <li class=\"menu-primary__item\">\n                <a ng-click=\"openModal(\'feedback\')\" ui-sref-active=\"is-active\" class=\"menu-primary__title has-menu-seperator\"><i class=\"fa fa-comments-o\"></i>Feedback</a>\n            </li>\n        </ul>\n    </scrollable>\n</nav>");
$templateCache.put("partials/siteHeader.html","<div class=\"site-header\">\n    360blick\n</div>");
$templateCache.put("project/assetSettings.html","asset settings");
$templateCache.put("project/assets.html","<div class=\"interaction-bar container\">\n    <div class=\"col span-6\">\n        <button ng-click=\"openModal(\'newAsset\')\" class=\"btn btn--dotted\"><i class=\"fa fa-plus\"></i>New Asset</button>\n    </div>\n    <div class=\"col span-6 has-text-right\">\n        <dropdown template-name=\"select\" on-select=\"onOrderSelect\" data=\"{\'currentItemId\': order.items[0].title, \'items\': order.items}\" class-suffix=\"light\"></dropdown>\n    </div>\n</div>\n\n<ul class=\"overview-list container\">\n    <li ng-repeat=\"asset in assets | orderBy:order.predicate:order.reverse\" ui-sref=\"user.project.assets({assetId: asset.id})\" class=\"overview-list__item col span-6\">\n        <div class=\"overview-list__asset\" ng-style=\"getAssetBackgroundImage(asset)\">\n            <div class=\"overview-list__color\" ng-style=\"{\'background-color\': asset.color}\"></div>\n            <div class=\"overview-list__content container\">\n                <div class=\"col span-8\">\n                    <h2 class=\"overview-list__title\">{{asset.title | truncate:false:18}}</h2>\n                    <time class=\"overview-list__modified\" datetime=\"{{asset.updated_at | date:\'yyyy-MM-dd hh:mm\'}}\">Last modified: {{asset.updated_at | date:\'medium\'}}</time>\n                </div>\n                <div class=\"col span-4 has-text-right\">\n                    <dropdown template-name=\"edit\" on-select=\"onEditSelect\" parent-item=\"asset\" data=\"{\'items\': edit.items}\" class-suffix=\"light\"></dropdown>\n                </div>\n            </div>\n        </div>\n    </li>\n</ul>");
$templateCache.put("project/index.html","<div ui-view=\"projectContent\" class=\"reveal-animation\"></div>");
$templateCache.put("project/sceneSettings.html","scene settings");
$templateCache.put("project/scenes.html","<div class=\"interaction-bar container\">\n    <div class=\"col span-6\">\n        <button ng-click=\"openModal(\'newScene\')\" class=\"btn btn--dotted\"><i class=\"fa fa-plus\"></i>New Scene</button>\n    </div>\n    <div class=\"col span-6 has-text-right\">\n        <dropdown template-name=\"select\" on-select=\"onOrderSelect\" data=\"{\'currentItemId\': order.items[0].title, \'items\': order.items}\" class-suffix=\"light\"></dropdown>\n    </div>\n</div>\n\n<ul class=\"overview-list container\">\n    <li ng-repeat=\"scene in scenes | orderBy:order.predicate:order.reverse\" ui-sref=\"editor({username: username, projectId: projectId, sceneId: scene.id})\" class=\"overview-list__item col span-6\">\n        <div class=\"overview-list__asset\" style=\"background-image:url(http://upload.wikimedia.org/wikipedia/commons/6/60/Matterhorn_from_Domh%C3%BCtte_-_2.jpg);\">\n            <div class=\"overview-list__color\" style=\"background-color:rgb(100,100,160);\"></div>\n            <div class=\"overview-list__content container\">\n                <div class=\"col span-8\">\n                    <h2 class=\"overview-list__title\">{{scene.title}}</h2>\n                    <time class=\"overview-list__modified\" datetime=\"{{scene.updated_at | date:\'yyyy-MM-dd hh:mm\'}}\">Last modified: {{scene.updated_at | date:\'medium\'}}</time>\n                </div>\n                <div class=\"col span-4 has-text-right\">\n                    <dropdown template-name=\"edit\" on-select=\"onEditSelect\" parent-item=\"scene\" data=\"{\'items\': edit.items}\" class-suffix=\"light\"></dropdown>\n                </div>\n            </div>\n        </div>\n    </li>\n</ul>");
$templateCache.put("project/settings.html","<div class=\"interaction-bar container settings\">\n    <form name=\"settingsForm\" class=\"container\" ng-submit=\"updateProjectSettings($event)\" novalidate>\n        <fieldset class=\"row\">\n            <placeholder-input value=\"project.title\" label=\"Project Title\" type=\"text\"></placeholder-input>\n        </fieldset>\n        <fieldset class=\"row\">\n            <placeholder-input value=\"project.description\" label=\"Project Description\" type=\"text\"></placeholder-input>\n        </fieldset>\n        <div class=\"row\">\n            <button class=\"btn btn--round btn--submit\">Update Settings</button>\n        </div>\n    </form>\n    <br>\n    <div>\n        <button ng-click=\"openModal(\'newAsset\', uploadOptions)\" class=\"btn btn--dotted\"><i class=\"fa fa-upload\"></i>Change Asset</button>\n        {{project.preview_image}}\n    </div>\n</div>\n\n<div class=\"interaction-bar container\">\n    <div class=\"col span-6\">\n        <button ng-click=\"generateExport($event)\" class=\"btn btn--cta\">Generate Export</button>\n    </div>\n    <div class=\"col span-6 has-text-right\">\n    </div>\n</div>\n\n<ol class=\"export-list\">\n    <li class=\"export-list__item\" ng-repeat=\"export in exports\" ng-click=\"startDownload(export)\">\n        <div>project: {{export.project_title}}</div>\n        <div>Amount Assets: {{export.amount_assets}}</div>\n        <div>Created at: {{export.created_at | date:\'yyyy-MM-dd hh:mm:ss\'}}</div>\n        <div>size: {{export.size | fileSize}}</div>\n    </li>\n</ol>");
$templateCache.put("sceneTemplates/sceneTemplates.html","<div class=\"interaction-bar container\">\n    <div class=\"col span-6\">\n        <button ng-click=\"openModal(\'newSceneTemplate\')\" class=\"btn btn--dotted\"><i class=\"fa fa-plus\"></i>New Template</button>\n    </div>\n    <div class=\"col span-6 has-text-right\">\n        <dropdown template-name=\"select\" on-select=\"onOrderSelect\" data=\"{\'currentItemId\': order.items[0].title, \'items\': order.items}\" class-suffix=\"light\"></dropdown>\n    </div>\n</div>\n\n<ul class=\"overview-list container\">\n    <li ng-repeat=\"template in sceneTemplates | orderBy:order.predicate:order.reverse\" ui-sref=\"template({username: username, templateId: template.id})\" class=\"overview-list__item col span-6\">\n        <div class=\"overview-list__asset\" style=\"background-image:url(http://upload.wikimedia.org/wikipedia/commons/6/60/Matterhorn_from_Domh%C3%BCtte_-_2.jpg);\">\n            <div class=\"overview-list__color\" style=\"background-color:rgba(100,100,160, 0.5);\"></div>\n            <div class=\"overview-list__content container\">\n                <div class=\"col span-8\">\n                    <h2 class=\"overview-list__title\">{{template.title}}</h2>\n                    <time class=\"overview-list__modified\" datetime=\"{{template.updated_at | date:\'yyyy-MM-dd hh:mm\'}}\">Last modified: {{template.updated_at | date:\'medium\'}}</time>\n                </div>\n                <div class=\"col span-4 has-text-right\">\n                    <dropdown template-name=\"edit\" on-select=\"onEditSelect\" parent-item=\"template\" data=\"{\'items\': edit.items}\" class-suffix=\"light\"></dropdown>\n                </div>\n            </div>\n        </div>\n    </li>\n</ul>");
$templateCache.put("subNavigation/account.html","account");
$templateCache.put("subNavigation/editor.html","<div class=\"container\">\n    <nav class=\"col span-4\">\n        <ul class=\"nav-tabs\">\n            <li class=\"nav-tabs__item\">\n                <button class=\"nav-tabs__btn nav-tabs__btn--menu\"  ui-sref=\"user.project.scenes({username: username, projectId: projectId})\"><i class=\"fa fa-arrow-left\"></i></button>\n            </li>\n            <li class=\"nav-tabs__item\">\n                <button ng-click=\"openModal(\'newScene\')\" class=\"nav-tabs__btn\" ><i class=\"fa fa-plus-square-o\"></i>Create Scene</button>\n            </li>\n        </ul>\n    </nav>\n    <div class=\"col span-4 has-header-pad has-text-center\">\n        <!--<dropdown template-name=\"select\" on-select=\"onSceneSelect\" data=\"{\'currentItemId\': currentSceneId, \'items\': scenes, \'currentItemName\': currentSceneName}\"></dropdown>-->\n    </div>\n    <div class=\"col span-4 has-text-right\">\n        <ul class=\"nav-tabs--label\">\n            <li class=\"nav-tabs--label__item\">\n                <button class=\"nav-tabs--label__btn\">\n                    <i ng-click=\"zoomOut()\" class=\"fa fa-search-minus\"></i>\n                    <span class=\"nav-tabs--label__title\">Zoom</span>\n                </button>\n            </li>\n            <li class=\"nav-tabs--label__item has-right-splitter\">\n                <button class=\"nav-tabs--label__btn\">\n                    <i ng-click=\"zoomIn()\" class=\"fa fa-search-plus\"></i>\n                    <span class=\"nav-tabs--label__title\">Zoom</span>\n                </button>\n            </li>\n            <li class=\"nav-tabs--label__item has-right-splitter\">\n                <button class=\"nav-tabs--label__btn\">\n                    <i class=\"fa fa-eye-slash\"></i>\n                    <span class=\"nav-tabs--label__title\">Toolbar</span>\n                </button>\n            </li>\n            <li class=\"nav-tabs--label__item\">\n                <button class=\"nav-tabs--label__btn\" ng-click=\"goBack()\">\n                    <i class=\"fa fa-undo\"></i>\n                    <span class=\"nav-tabs--label__title\">Undo</span>\n                </button>\n            </li>\n            <li class=\"nav-tabs--label__item\">\n                <button class=\"nav-tabs--label__btn\">\n                    <i class=\"fa fa-repeat\"></i>\n                    <span class=\"nav-tabs--label__title\">Redo</span>\n                </button>\n            </li>\n            <li class=\"nav-tabs--label__item\">\n                <button class=\"nav-tabs--label__btn\" ng-click=\"save()\">\n                    <i class=\"fa fa-floppy-o\"></i>\n                    <span class=\"nav-tabs--label__title\">Save</span>\n                </button>\n            </li>\n        </ul>\n    </div>\n</div>\n\n\n");
$templateCache.put("subNavigation/project.html","<nav>\n    <ul class=\"nav-tabs\">\n        <li class=\"nav-tabs__item\">\n            <button class=\"nav-tabs__btn nav-tabs__btn--menu\" ng-click=\"sidebarMenu.isActive = !sidebarMenu.isActive\"><i class=\"fa fa-bars\"></i></button>\n        </li>\n        <li class=\"nav-tabs__item\">\n            <button ui-sref=\"user.project.scenes({projectId: projectId})\" class=\"nav-tabs__btn\" ui-sref-active=\"is-active\"><i class=\"fa fa-cube\"></i>Scenes</button>\n        </li>\n        <li class=\"nav-tabs__item\">\n            <button ui-sref=\"user.project.assets({projectId: projectId})\" class=\"nav-tabs__btn\" ui-sref-active=\"is-active\"><i class=\"fa fa-picture-o\"></i>Assets</button>\n        </li>\n        <li class=\"nav-tabs__item\">\n            <button ui-sref=\"user.project.settings({projectId: projectId})\" class=\"nav-tabs__btn\" ui-sref-active=\"is-active\"><i class=\"fa fa-cog\"></i>Settings</button>\n        </li>\n    </ul>\n</nav>");
$templateCache.put("subNavigation/projects.html","<nav>\n    <ul class=\"nav-tabs\">\n        <li class=\"nav-tabs__item\">\n            <button class=\"nav-tabs__btn nav-tabs__btn--menu\" ng-click=\"sidebarMenu.isActive = !sidebarMenu.isActive\"><i class=\"fa fa-bars\"></i></button>\n        </li>\n    </ul>\n</nav>");
$templateCache.put("subNavigation/settings.html","<nav>\n    <ul class=\"nav-tabs\">\n        <li class=\"nav-tabs__item\">\n            <button class=\"nav-tabs__btn nav-tabs__btn--menu\" ng-click=\"sidebarMenu.isActive = !sidebarMenu.isActive\"><i class=\"fa fa-bars\"></i></button>\n        </li>\n        <li class=\"nav-tabs__item\">\n            <button ui-sref=\"user.settings.account\" class=\"nav-tabs__btn\" ui-sref-active=\"is-active\"><i class=\"fa fa-cube\"></i>Account</button>\n        </li>\n\n    </ul>\n</nav>");
$templateCache.put("user/accountSettings.html","<div>\n    Settings von User {{username}}\n</div>\n");
$templateCache.put("user/index.html","<div id=\"view--user\" class=\"view container\">\n    <sidebar-menu></sidebar-menu>\n    <div id=\"view--user__wrapper\" class=\"view__wrapper has-sidebar-menu\">\n        <nav-header></nav-header>\n        <div ui-view=\"userContent\" id=\"view--user__wrapper__content\" class=\"reveal-animation\"></div>\n    </div>\n</div>\n\n");
$templateCache.put("user/projects.html","<div class=\"interaction-bar container\">\n    <div class=\"col span-6\">\n        <button ng-click=\"openModal(\'newProject\')\" class=\"btn btn--dotted\"><i class=\"fa fa-plus\"></i>New Project</button>\n    </div>\n    <div class=\"col span-6 has-text-right\">\n        <dropdown template-name=\"select\" on-select=\"onOrderSelect\" data=\"{\'currentItemId\': order.items[0].title, \'items\': order.items}\" class-suffix=\"light\"></dropdown>\n    </div>\n</div>\n\n<ul class=\"overview-list container\">\n    <li ng-repeat=\"project in projects | orderBy:order.predicate:order.reverse\" ui-sref=\"user.project.scenes({projectId: project.id})\" class=\"overview-list__item col span-6\">\n        <div class=\"overview-list__asset\" style=\"background-image:url(http://upload.wikimedia.org/wikipedia/commons/6/60/Matterhorn_from_Domh%C3%BCtte_-_2.jpg);\">\n            <div class=\"overview-list__color\" style=\"background-color:rgba(100,100,160, 0.5);\"></div>\n            <div class=\"overview-list__content container\">\n                <div class=\"col span-8\">\n                    <h2 class=\"overview-list__title\">{{project.title}}</h2>\n                    <time class=\"overview-list__modified\" datetime=\"{{project.updated_at | date:\'yyyy-MM-dd hh:mm\'}}\">Last modified: {{project.updated_at | date:\'medium\'}}</time>\n                </div>\n                <div class=\"col span-4 has-text-right\">\n                    <dropdown template-name=\"edit\" on-select=\"onEditSelect\" parent-item=\"project\" data=\"{\'items\': edit.items}\" class-suffix=\"light\"></dropdown>\n                </div>\n            </div>\n        </div>\n    </li>\n</ul>");
$templateCache.put("user/settings.html","<div id=\"view--settings\" class=\"view conainer\">\n    <div id=\"view--settings__wrapper\" class=\"view__wrapper\">\n        <div class=\"interaction-bar settings\">\n            <form name=\"settingsForm\" class=\"settings__form container\" ng-submit=\"updateUserSettings($event)\" novalidate>\n                <fieldset class=\"row\">\n                    <placeholder-input value=\"user.nick\" label=\"Nick\" type=\"text\"></placeholder-input>\n                </fieldset>\n                <fieldset class=\"row\">\n                    <placeholder-input value=\"user.email\" label=\"Email\" type=\"email\"></placeholder-input>\n                </fieldset>\n                <div class=\"row\">\n                    <button class=\"btn btn--round btn--submit\">Update Profile</button>\n                </div>\n            </form>\n            <div class=\"settings__profile-image\">\n                <img ng-src=\"{{user.profileImage}}\" ng-click=\"openModal(\'newAsset\', uploadOptions)\" alt=\"Profile Image\">\n                <button ng-click=\"openModal(\'newAsset\', uploadOptions)\" class=\"btn btn--dotted\"><i class=\"fa fa-upload\"></i>Change Profile Image</button>\n            </div>\n        </div>\n    </div>\n</div>");
$templateCache.put("partials/dialog/confirm.html","<div class=\"dialog\" ng-click=\"checkCloseIt($event)\">\n    <div class=\"dialog__content\">\n        <div class=\"dialog__header\">\n            <button class=\"dialog__close\" ng-click=\"closeIt()\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n            <h4 class=\"dialog__title\">{{title}}</h4>\n        </div>\n        <div class=\"dialog__body\">\n            <div class=\"row\">\n                {{message}}\n            </div>\n            <div class=\"row\">\n                <button ng-click=\"confirmCallback(); closeIt()\" class=\"btn btn--submit btn--cta\">Confirm</button>\n                <button ng-click=\"cancelCallback(); closeIt()\" class=\"btn btn--submit btn--danger\">Cancel</button>\n            </div>\n        </div>\n    </div>\n</div>\n");
$templateCache.put("partials/dialog/error.html","<div class=\"dialog\" ng-click=\"checkCloseIt($event)\">\n    <div class=\"dialog__content\">\n        <div class=\"dialog__header\">\n            <button class=\"dialog__close\" ng-click=\"closeIt()\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n            <h4 class=\"dialog__title\">{{modalHeader}}</h4>\n        </div>\n        <div class=\"dialog__body\">\n            <div class=\"row\">\n                {{message}}\n            </div>\n            <div class=\"row\">\n                <button ng-click=\"okCallback(); closeIt()\" class=\"btn btn--submit\">Ok</button>\n            </div>\n        </div>\n    </div>\n</div>\n");
$templateCache.put("partials/dialog/help.html","<div class=\"dialog\" ng-click=\"checkCloseIt($event)\">\n    <div class=\"dialog__content\">\n        <div class=\"dialog__header\">\n            <button class=\"dialog__close\" ng-click=\"closeIt()\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n            <h4 class=\"dialog__title\">Help</h4>\n        </div>\n        <div class=\"dialog__body\">\n            <!--<form name=\"loginForm\" class=\"container\"-->\n                  <!--ng-submit=\"login(credentials)\" novalidate>-->\n                <!--<fieldset class=\"row\">-->\n                    <!--<placeholder-input value=\"credentials.login\" label=\"Username\" type=\"text\"></placeholder-input>-->\n                <!--</fieldset>-->\n                <!--<fieldset class=\"row\">-->\n                    <!--<placeholder-input value=\"credentials.password\" label=\"Password\" type=\"password\"></placeholder-input>-->\n                <!--</fieldset>-->\n                <!--<div class=\"row\">-->\n                    <!--<button class=\"btn btn--round btn--submit\">Login</button>-->\n                <!--</div>-->\n            <!--</form>-->\n        </div>\n    </div>\n</div>\n\n");
$templateCache.put("partials/dialog/login.html","<div class=\"dialog\" ng-click=\"checkCloseIt($event)\">\n    <div class=\"dialog__content\">\n        <div class=\"dialog__header\">\n            <button class=\"dialog__close\" ng-click=\"closeIt()\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n            <h4 class=\"dialog__title\">Login</h4>\n        </div>\n        <div class=\"dialog__body\">\n            <form name=\"loginForm\" class=\"container\"\n                  ng-submit=\"login(credentials)\" novalidate>\n                <fieldset class=\"row\">\n                    <placeholder-input value=\"credentials.login\" label=\"Username\" type=\"text\"></placeholder-input>\n                </fieldset>\n                <fieldset class=\"row\">\n                    <placeholder-input value=\"credentials.password\" label=\"Password\" type=\"password\"></placeholder-input>\n                </fieldset>\n                <div class=\"row\">\n                    <button class=\"btn btn--round btn--submit\">Login</button>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>\n\n");
$templateCache.put("partials/dialog/newAsset.html","<div class=\"dialog\" ng-click=\"checkCloseIt($event)\">\n    <div class=\"dialog__content\">\n        <div class=\"dialog__header\">\n            <button class=\"dialog__close\" ng-click=\"closeIt()\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n            <h4 class=\"dialog__title\">{{modalHeader}}</h4>\n        </div>\n        <div class=\"dialog__body\">\n            <fieldset class=\"row\">\n                <dropzone upload-data=\"upload.data\" upload-settings=\"upload.settings\"></dropzone>\n            </fieldset>\n            <div class=\"row\">\n                <button ng-click=\"createNewAsset(); closeIt()\" class=\"btn btn--submit\">Ok</button>\n            </div>\n        </div>\n    </div>\n</div>\n");
$templateCache.put("partials/dialog/newInteraction.html","<div class=\"dialog\">\n    <div class=\"dialog__content\">\n        <div class=\"dialog__header\">\n            <button class=\"dialog__close\" ng-click=\"closeIt()\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n            <h4 class=\"dialog__title\">Interaction</h4>\n        </div>\n        <div class=\"dialog__body\">\n            <div class=\"col span-6\">\n                Interaction\n                <fieldset class=\"row\">\n                    <dropdown template-name=\"select\" on-select=\"onInteractionSelect\" data=\"{\'currentItemId\': currentInteractionId, \'items\': interactionsList}\"></dropdown>\n                </fieldset>\n                <div ng-if=\"isNeededParameter(\'scene\')\">\n                    Scenes\n                    <fieldset class=\"row\">\n                        <dropdown template-name=\"select\" on-select=\"onParameterSelect\" data=\"{\'items\': (scenes | filter: {id: \'!\'+currentSceneId}), type: \'scene\'}\"></dropdown>\n                    </fieldset>\n                </div>\n                <div ng-if=\"isNeededParameter(\'object\')\">\n                    Objects\n                    <fieldset class=\"row\">\n                        <dropdown template-name=\"select\" on-select=\"onParameterSelect\" data=\"{\'items\': sceneObjects, type: \'object\'}\"></dropdown>\n                    </fieldset>\n                </div>\n                <div class=\"row\">\n                    <button ng-click=\"addInteraction(); closeIt()\" class=\"btn btn--cta btn--submit\">Add</button>\n                </div>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n");
$templateCache.put("partials/dialog/newProject.html","<div class=\"dialog\" ng-click=\"checkCloseIt($event)\">\n    <div class=\"dialog__content\">\n        <div class=\"dialog__header\">\n            <button class=\"dialog__close\" ng-click=\"closeIt()\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n            <h4 class=\"dialog__title\">New Project</h4>\n        </div>\n        <div class=\"dialog__body\">\n            <fieldset class=\"row\">\n                <placeholder-input value=\"newProject.title\" label=\"Title\" type=\"text\" class-suffix=\"text\"></placeholder-input>\n            </fieldset>\n            <fieldset class=\"row\">\n                <placeholder-input value=\"newProject.description\" label=\"Description\" type=\"text\" class-suffix=\"text\"></placeholder-input>\n            </fieldset>\n            <div class=\"row\">\n                <button ng-click=\"createNewProject(); closeIt()\" class=\"btn btn--round btn--submit\" class-suffix=\"text\">Create</button>\n            </div>\n        </div>\n    </div>\n</div>\n");
$templateCache.put("partials/dialog/newScene.html","<div class=\"dialog\" ng-click=\"checkCloseIt($event)\">\n    <div class=\"dialog__content\">\n        <div class=\"dialog__header\">\n            <button class=\"dialog__close\" ng-click=\"closeIt()\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n            <h4 class=\"dialog__title\">New Scene</h4>\n        </div>\n        <div class=\"dialog__body container\">\n            <div class=\"col span-6\">\n                Template\n                <fieldset class=\"row\">\n                    <dropdown template-name=\"select\" on-select=\"onTemplateSelect\" data=\"{\'currentItemId\': currentTemplateId, \'items\': sceneTemplates}\"></dropdown>\n                </fieldset>\n                <fieldset class=\"row\">\n                    <placeholder-input value=\"newScene.title\" label=\"Title\" type=\"text\" class-suffix=\"text\"></placeholder-input>\n                </fieldset>\n                <fieldset class=\"row\">\n                    <placeholder-input value=\"newScene.description\" label=\"Description\" type=\"text\" class-suffix=\"text\"></placeholder-input>\n                </fieldset>\n                <div class=\"row\">\n                    <button ng-click=\"createNewScene(); closeIt()\" class=\"btn btn--cta btn--submit\">Create</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n");
$templateCache.put("partials/dialog/newSceneTemplate.html","<div class=\"dialog\" ng-click=\"checkCloseIt($event)\">\n    <div class=\"dialog__content\">\n        <div class=\"dialog__header\">\n            <button class=\"dialog__close\" ng-click=\"closeIt()\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n            <h4 class=\"dialog__title\">New Scenetemplate</h4>\n        </div>\n        <div class=\"dialog__body container\">\n            <div class=\"col span-6\">\n                <fieldset class=\"row\">\n                    <placeholder-input value=\"newSceneTemplate.title\" label=\"Title\" type=\"text\" class-suffix=\"select\"></placeholder-input>\n                </fieldset>\n                <fieldset class=\"row\">\n                    <placeholder-input value=\"newSceneTemplate.description\" label=\"Description\" type=\"text\" class-suffix=\"select\"></placeholder-input>\n                </fieldset>\n                <div class=\"row\">\n                    <button ng-click=\"createNewSceneTemplate(); closeIt()\" class=\"btn btn--cta btn--submit\">Create</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n");
$templateCache.put("partials/dialog/selectTexture.html","<div class=\"dialog\" ng-click=\"checkCloseIt($event)\">\n    <div class=\"dialog__content\">\n        <div class=\"dialog__header\">\n            <button class=\"dialog__close\" ng-click=\"closeIt()\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n            <h4 class=\"dialog__title\">Select Texture</h4>\n        </div>\n        <div class=\"dialog__body container\">\n            <div class=\"col span-6\">\n                Assets\n                <fieldset class=\"row\">\n                    <dropdown template-name=\"select\" on-select=\"onAssetSelect\" data=\"{\'currentItemId\': currentAssetId, \'items\': assets}\"></dropdown>\n                </fieldset>\n                <div class=\"row\">\n                    <button ng-click=\"selectTexture(); closeIt()\" class=\"btn btn--cta btn--submit\">Select</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n");
$templateCache.put("partials/dropdown/edit.html","<div class=\"dropdown dropdown--edit\">\n    <div class=\"dropdown__ghost\" ng-class=\"{\'active\': active}\" ng-click=\"toggleGhost($event)\"></div>\n    <button class=\"btn btn--light btn--dropdown btn--dropdown--edit dropdown__trigger\" ng-click=\"toggleDropdown($event)\"><i class=\"fa fa-gear\"></i>Edit<i class=\"fa fa-chevron-down\"></i></button>\n    <div class=\"dropdown__toggle\" ng-class=\"{\'active\': active}\">\n        <ul class=\"dropdown__list dropdown__list--edit\">\n            <li class=\"dropdown__list__item dropdown__list--edit__item\" ng-repeat=\"item in data.items\" ng-click=\"selectDropdownItem(item, $event)\">\n                <i class=\"fa {{item.icon}}\"></i>{{item.title}}\n            </li>\n        </ul>\n    </div>\n</div>");
$templateCache.put("partials/dropdown/select.html","<div class=\"dropdown dropdown--{{classSuffix}}\">\n    <div class=\"dropdown__ghost\" ng-class=\"{\'active\': active}\" ng-click=\"toggleGhost($event)\"></div>\n    <button class=\"btn btn--select btn--select--{{classSuffix}} dropdown__trigger\" ng-click=\"toggleDropdown($event)\">{{select.value || data.currentItemId || \'Select\'}}<i class=\"fa fa-chevron-down\"></i></button>\n    <div class=\"dropdown__toggle dropdown__toggle--select dropdown__toggle--select--{{classSuffix}}\" ng-class=\"{\'active\': active}\">\n        <ul class=\"dropdown__list dropdown__list--select dropdown__list--select--{{classSuffix}}\">\n            <li class=\"dropdown__list__item dropdown__list--select__item dropdown__list--select--{{classSuffix}}__item\" ng-repeat=\"item in data.items\" ng-click=\"selectDropdownItem(item, $event)\">\n                <span>\n                    {{item.title}}\n                </span>\n            </li>\n        </ul>\n    </div>\n</div>");
$templateCache.put("partials/dropdown/share.html","<div class=\"dropdown\">\n    <div class=\"dropdown__ghost\" ng-class=\"{\'active\': active}\" ng-click=\"toggleGhost($event)\"></div>\n    <button class=\"btn btn--cta btn--dropdown dropdown__trigger\" ng-click=\"toggleDropdown($event)\"><i class=\"fa fa-link\"></i>Share<i class=\"fa fa-chevron-down\"></i></button>\n    <div class=\"dropdown__toggle\" ng-class=\"{\'active\': active}\">\n        <ul class=\"dropdown__list dropdown__list--default\">\n            <li class=\"dropdown__list--default__item\">\n                <a>\n                    Url\n                </a>\n            </li>\n        </ul>\n    </div>\n</div>");
$templateCache.put("partials/dropdown/user.html","<div class=\"dropdown dropdown--user\">\n    <div class=\"dropdown__ghost\" ng-class=\"{\'active\': active}\" ng-click=\"toggleGhost($event)\"></div>\n    <button class=\"btn btn--dropdown btn--dropdown--user dropdown__trigger\" ng-click=\"toggleDropdown($event)\">\n        <div class=\"btn--dropdown--user__nick\">{{data.user.nick}}</div>\n        <div class=\"btn--dropdown--user__email\">{{data.user.email | truncate:false:18:\'..\'}}</div>\n        <div class=\"btn--dropdown--user__image\" ng-style=\"{\'background-image\':\'url(\' + data.user.profile_image + \')\'}\"></div>\n    </button>\n    <div class=\"dropdown__toggle\" ng-class=\"{\'active\': active}\">\n        <ul class=\"dropdown__list dropdown__list--user\">\n            <li class=\"dropdown__list__item dropdown__list--user__item\" ng-repeat=\"item in data.items\" ng-click=\"selectDropdownItem(item, $event)\">\n                <i class=\"fa {{item.icon}}\"></i>{{item.title}}\n            </li>\n        </ul>\n    </div>\n</div>");
$templateCache.put("partials/editor/editorObject.html","<li class=\"toggle-list__item\" ng-class=\"{active: isActive}\">\n    <div class=\"toggle-list__header container\" ng-click=\"setActive(); \">\n        <div class=\"col span-2 toggle-list__header__icon\"><i class=\"fa fa-cube\"></i></div>\n        <div class=\"col span-8 toggle-list__header__title\" >{{item.type}} {{item.id}}: {{item.geometry.type}}</div>\n        <div class=\"col span-2 has-text-right toggle-list__header__interaction\">\n            <button class=\"toggle-list__header__interaction__button\">\n                <i class=\"fa fa-cog\" ng-click=\"item.detailsOpen = !item.detailsOpen\"></i>\n            </button>\n            <button class=\"toggle-list__header__interaction__button\">\n                <i class=\"fa fa-chevron-down\"></i>\n            </button>\n        </div>\n    </div>\n    <div class=\"toggle-list__body\" ng-class=\"{\'selected\': item.detailsOpen}\">\n        <div class=\"sidebar-transform\">\n            <div class=\"container\">\n                <div class=\"col span-3 sidebar-transform__title\">&nbsp;</div>\n                <div class=\"col span-3 sidebar-transform__title\">x</div>\n                <div class=\"col span-3 sidebar-transform__title\">y</div>\n                <div class=\"col span-3 sidebar-transform__title\">z</div>\n            </div>\n            <xyz-input title=\"Position\" icon=\"fa-expand\" item=\"item.position\"></xyz-input>\n            <xyz-input title=\"Rotation\" icon=\"fa-arrows\" item=\"item.rotation\"></xyz-input>\n            <xyz-input title=\"Skalierung\" icon=\"fa-arrows-h\" item=\"item.scale\"></xyz-input>\n        </div>\n\n        <ul class=\"toggle-list--small\">\n            <li class=\"toggle-list--small__item\">\n                <div class=\"toggle-list--small__header\">\n                    <h2 class=\"toggle-list--small__title\">Material</h2>\n                </div>\n                <ul class=\"editor-options-list\">\n                    <li class=\"editor-options-list__item\">\n                        <texture item=\"item\"></texture>\n                    </li>\n                </ul>\n                <ul class=\"editor-options-list\">\n                    <li class=\"editor-options-list__item\">\n                        <div class=\"col span-9\">\n                            Wireframes\n                        </div>\n                        <div class=\"col span-3\">\n                            <input history-input type=\"checkbox\" ng-model=\"item.material.wireframe\">\n                        </div>\n                    </li>\n                </ul>\n                <ul class=\"editor-options-list\">\n                    <li class=\"editor-options-list__item\">\n                        <min-max-value title=\"Opacity\" item=\"item.material.opacity\" minimum=\"0\" maximum=\"1\" step-size=\"0.1\"></min-max-value>\n                    </li>\n                </ul>\n            </li>\n            <interaction ng-if=\"!isTemplateScene\" item=\"item\"></interaction>\n            <li class=\"toggle-list--small__item\">\n                <button class=\"btn btn--danger\" ng-click=\"remove(item)\">remove</button>\n            </li>\n        </ul>\n    </div>\n</li>");
$templateCache.put("partials/editor/interaction.html","<li class=\"toggle-list--small__item\">\n    <div class=\"toggle-list--small__header\">\n        <h2 class=\"toggle-list--small__title\">Interaction</h2>\n    </div>\n    <div class=\"toggle-list--small__item\">\n        <button class=\"btn\" ng-if=\"!item.custom.interaction\" ng-click=\"$root.openModal(\'newInteraction\', {item: item})\">+ Add new Interaction</button>\n        <span ng-if=\"item.custom.interaction\">{{item.custom.interaction.type}}</span>\n    </div>\n</li>");
$templateCache.put("partials/editor/minMaxValue.html","<div class=\"minmax-interaction container\">\n    <!-- todo: refactor minmax and xyz to editor-option -->\n    <div class=\"minmax-interaction__title col span-3\">{{title}}</div>\n    <div class=\"minmax-interaction__slider col span-6\">\n        <input type=\"range\" min=\"{{min}}\" max=\"{{max}}\" step=\"{{step || 1}}\" custom-ng-model model=\"item\">\n    </div>\n    <div class=\"col span-3\">\n        <div class=\"input--sidebar\">\n            <label class=\"input--sidebar__label\">\n                <span class=\"input--sidebar__label__unit\">{{measure || \'%\'}}</span>\n                <input history-input class=\"input--sidebar__field\" type=\"number\" ng-model=\"item\" min=\"{{min}}\" max=\"{{max}}\" step=\"{{step || 1}}\">\n            </label>\n        </div>\n    </div>\n</div>");
$templateCache.put("partials/editor/texture.html","<li>\n    <div class=\"container\" ng-click=\"open = !open\">\n        <div class=\"col span-6\">Texture</div>\n        <div class=\"col span-6\">\n            <i class=\"fa fa-eye\"></i>\n            <i class=\"fa fa-pencil\"></i>\n            <i class=\"fa fa-trash-o\"></i>\n            <i class=\"fa fa-file-image-o\" ng-click=\"$root.openModal(\'selectTexture\', {item: item})\"></i>\n        </div>\n    </div>\n    <div ng-class=\"{\'selected\': open}\" ng-if=\"item.material.map\">\n        <div class=\"container\">\n            <div class=\"col span-9\">\n                Repeat X\n            </div>\n            <div class=\"col span-3 xyz-interaction__item\">\n                <div class=\"input--sidebar\">\n                    <label class=\"input--sidebar__label\">\n                        <span class=\"input--sidebar__label__unit\">px</span>\n                        <input history-input class=\"input--sidebar__field\" type=\"number\" ng-model=\"item.material.map.repeat.x\">\n                    </label>\n                </div>\n            </div>\n        </div>\n        <div class=\"container\">\n            <div class=\"col span-9\">\n                Repeat Y\n            </div>\n            <div class=\"col span-3 xyz-interaction__item\">\n                <div class=\"input--sidebar\">\n                    <label class=\"input--sidebar__label\">\n                        <span class=\"input--sidebar__label__unit\">px</span>\n                        <input history-input class=\"input--sidebar__field\" type=\"number\" ng-model=\"item.material.map.repeat.y\">\n                    </label>\n                </div>\n            </div>\n        </div>\n        <div class=\"container\">\n            <div class=\"input--sidebar\">\n                <min-max-value title=\"Offset X\" item=\"item.material.map.offset.x\" minimum=\"0\" maximum=\"1\" step-size=\"0.01\"></min-max-value>\n            </div>\n        </div>\n        <div class=\"container\">\n            <div class=\"input--sidebar\">\n                <min-max-value title=\"Offset Y\" item=\"item.material.map.offset.y\" minimum=\"0\" maximum=\"1\" step-size=\"0.01\"></min-max-value>\n            </div>\n        </div>\n    </div>\n\n\n</li>");
$templateCache.put("partials/editor/xyzInput.html","<div class=\"xyz-interaction container\">\n    <!-- todo: refactor minmax and xyz to editor-option -->\n    <div class=\"col span-3 xyz-interaction__title\">\n        <i class=\"fa {{icon}}\"></i>\n    </div>\n    <div class=\"col span-3 xyz-interaction__item\">\n        <div class=\"input--sidebar\">\n            <label class=\"input--sidebar__label\">\n                <span class=\"input--sidebar__label__unit\">px</span>\n                <input history-input class=\"input--sidebar__field\" type=\"number\" step=\"0.1\" ng-model=\"item.x\">\n            </label>\n        </div>\n    </div>\n    <div class=\"col span-3 xyz-interaction__item\">\n        <div class=\"input--sidebar\">\n            <label class=\"input--sidebar__label\">\n                <span class=\"input--sidebar__label__unit\">px</span>\n                <input history-input class=\"input--sidebar__field\" type=\"number\" step=\"0.1\" ng-model=\"item.y\">\n            </label>\n        </div>\n    </div>\n    <div class=\"col span-3 xyz-interaction__item\">\n        <div class=\"input--sidebar\">\n            <label class=\"input--sidebar__label\">\n                <span class=\"input--sidebar__label__unit\">px</span>\n                <input history-input class=\"input--sidebar__field\" type=\"number\" step=\"0.1\" ng-model=\"item.z\">\n            </label>\n        </div>\n    </div>\n</div>");}]);

'use strict';

app.controller('DocumentationController', ['$scope', function ($scope) {

}]);


'use strict';

app.controller('FeedbackController', ['$scope', function ($scope) {

}]);


'use strict';

app.controller('GettingStartedController', ['$scope', function ($scope) {

}]);


'use strict';

app.controller('HelpController', ['$scope', function ($scope) {

}]);


'use strict';

app.controller('LandingpageController', ['$scope', function ($scope) {
    console.log('landing init');
}]);


'use strict';

app.controller('NewsletterController', ['$scope', function ($scope) {

}]);


app.directive('dropdown',[function() {
    return {
        restrict: 'E',
        replace: true,
        scope: {
            data: '=',
            onSelect: '=',
            classSuffix: '@',
            parentItem: '='
        },
        link: function(scope, element, attrs) {
            scope.active = false;

            scope.select = {
                value: null
            };

            scope.toggleGhost = function($event) {
                $event && $event.stopPropagation();
                scope.active = !scope.active;
            };

            scope.toggleDropdown = function($event) {
                $event && $event.stopPropagation();
                scope.active = !scope.active;
            };

            scope.selectDropdownItem = function(item, $event) {
                $event.stopPropagation();

                scope.active = false;
                scope.select.value = item.title;
                if(typeof(scope.onSelect) == "function") {
                    //TODO: quickfixed
                    var data;
                    if(scope.data && scope.data.type) {
                        data = scope.data.type;
                    } else if (scope.parentItem) {
                        data = scope.parentItem;
                    }
                    scope.onSelect(item.id, data);
                }
            }
        },
        templateUrl: function(elem,attrs) {
            return 'partials/dropdown/' + attrs.templateName + '.html';
        }
    }
}]);
app.directive('dropzone',['RequestService', function(RequestService) {
    return {
        restrict: 'E',
        templateUrl: 'partials/dropzone.html',
        replace: true,
        scope: {
            uploadData: '=',
            uploadSettings: '='
        },
        link: function(scope, element) {

            element.bind("dragenter", function() {
                element.addClass('hover');
            });

            element.bind("dragleave", function() {
                element.removeClass('hover');
            });

            RequestService.upload(scope, element);
        }
    }
}]);
app.directive('editorScene', ['EditorService', 'ObjectSelectionService', function (EditorService, ObjectSelectionService) {
    return {
        restrict: 'E',
        replace: true,
        link: function(scope, elem, attrs) {
            EditorService.init(elem);
            ObjectSelectionService.init(elem);
        }
    };
}]);
app.directive('fileInput', ['$timeout', 'RequestService', function ($timeout, RequestService) {
    return {
        restrict: 'E',
        templateUrl: 'partials/fileInput.html',
        replace: true,
        scope: {
            value: '=',
            label: '@',
            classSuffix: '@',
            uploadData: '='
        },
        link: function($scope, elem, attrs) {
            $scope.isFocused = false;

/*            $scope.onChange = function() {
            };

            $scope.onBlur = function() {
                $scope.isFocused = false;
            };

            $scope.setFocus = function() {
                elem[0].querySelector('input').focus();
                $scope.isFocused = true;
            };*/

            $scope.upload = function(files, event) {

                angular.forEach(files, function(file) {
                    var data = $scope.uploadData;

                    //FIXME: replace title when assets/update is implemented in backend
                    data.asset = {
                        title: 'asset_' + Math.floor((Math.random() * 1000) + 1)
                    };
                    var fileReader = new FileReader();

                    fileReader.readAsBinaryString(file);
                    fileReader.onload = function(event) {
                        RequestService.upload('projects/assets/create', data, file, function(res) {
                                console.log(res);
                            }, function(error) {
                                console.log(error);
                            }, function(progressPercentage, event) {
                                console.log('Progress: ' + progressPercentage, event.config.file.name);
                            }
                        );
                    };
                });

            };
        }
    };
}]);
app.directive('formAutofillFix', ['$timeout', function ($timeout) {

    return function (scope, element, attrs) {
        element.prop('method', 'post');
        if (attrs.ngSubmit) {
            $timeout(function () {
                element
                    .unbind('submit')
                    .bind('submit', function (event) {
                        event.preventDefault();
                        element
                            .find('input, textarea, select')
                            .trigger('input')
                            .trigger('change')
                            .trigger('keydown');
                        scope.$apply(attrs.ngSubmit);
                    });
            });
        }
    };
}]);
app.directive('navHeader', [function () {
    return {
        restrict: 'E',
        templateUrl: 'partials/navHeader.html',
        replace: true,
        link: function(scope, elem, attrs) {
        }
    };
}]);
app.directive('placeholderInput', ['$timeout', function ($timeout) {
    return {
        restrict: 'E',
        templateUrl: 'partials/placeholderInput.html',
        replace: true,
        scope: {
            value: '=',
            label: '@',
            type: '@' ,
            classSuffix: '@',
            hasInitialFocus: '='
        },
        link: function(scope, elem, attrs) {
            scope.isFocused = false;

            scope.onBlur = function() {
                scope.isFocused = false;
            };

            scope.onFocus = function() {
                scope.isFocused = true;
            };

            scope.setFocus = function($event) {
                $event && $event.stopPropagation();

                $timeout(function() {
                    elem[0].querySelector('input').focus();
                });
            };

            if(scope.hasInitialFocus) {
                $timeout(function() {
                    scope.setFocus();
                });
            }
        }
    };
}]);
app.directive('profileInfoBox', ['SessionService', 'ENV_CONFIG', 'AuthService', '$state', '$rootScope', function (SessionService, ENV_CONFIG, AuthService, $state, $rootScope) {
    return {
        restrict: 'E',
        templateUrl: 'partials/profileInfoBox.html',
        replace: true,
        link: function(scope, elem, attrs) {
            scope.user = {
                email: SessionService.email,
                nick: SessionService.nick,
                profile_image: ENV_CONFIG.assets + SessionService.profileImage
            };

            $rootScope.$on('updatedUserImage', function(event, data) {
                scope.user.profile_image = ENV_CONFIG.assets + data.profile_image;
            });

            scope.goUserState = function() {
                $state.go('user', {username: SessionService.nick});
            };
            scope.goSettingsState = function() {
                $state.go('user.settings', {username: SessionService.nick});
            };

            var dropdownActions = {
                'projects': scope.goUserState,
                'settings': scope.goSettingsState,
                'logout': AuthService.logout
            };

            scope.onDropdownSelect = function(id, item) {
                dropdownActions[id](item);
            };

            scope.options = {
                items: [
                    {
                        id: 'projects',
                        title: 'Projects',
                        icon: 'fa-folder-open'
                    }, {
                        id: 'settings',
                        title: 'Settings',
                        icon: 'fa-gear'
                    }, {
                        id: 'logout',
                        title: 'Logout',
                        icon: 'fa-sign-out'
                    }
                ]
            };
        }
    };
}]);
app.directive('sidebarMenu', ['RequestService', '$rootScope', '$stateParams', function (RequestService, $rootScope, $stateParams) {
    return {
        restrict: 'E',
        templateUrl: 'partials/sidebarMenu.html',
        replace: true,
        link: function($scope, elem, attrs) {
            $scope.username = $stateParams.username;

            $scope.projects = [];
            $scope.sceneTemplates = [];

            function getAllProjects() {
                RequestService.post('projects/get_projects', {user_nick: $scope.username}, function (res) {
                        $scope.projects = res.data;
                    }, function (error) {
                        console.log(error);
                    }
                );
            }

            getAllProjects();

            $rootScope.$on('removeProject', function(event, data) {
                $scope.projects.splice($scope.projects.indexOf(data), 1);
            });

            $rootScope.$on('newProject', function(event, data) {
                $scope.projects.push(data);
            });

            function getAllTemplates() {
                RequestService.post('templatescenes/all', {}, function (res) {
                        $scope.sceneTemplates = res.data;
                    }, function (error) {
                        console.log(error);
                    }
                );
            }

            getAllTemplates();

            $rootScope.$on('removeTemplate', function(event, data) {
                $scope.sceneTemplates.splice($scope.sceneTemplates.indexOf(data), 1);
            });

            $rootScope.$on('newTemplate', function(event, data) {
                $scope.sceneTemplates.push(data);
            });

        }
    };
}]);
'use strict';

app.filter('fileSize', [function () {

    return function(bytes) {

        var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];

        if (bytes === 0) {
            return 'n/a';
        }

        var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));

        if (i === 0) {
            return bytes + ' ' + sizes[i];
        }

        return (bytes / Math.pow(1024, i)).toFixed(1) + ' ' + sizes[i];

    }

}]);

'use strict';

app.filter('truncate', [function () {

    /**
     * wordwise (boolean) if true, cut only by words bounds
     * max (integer) - max length of the text, cut to this number of chars
     * tail (string, default: ' …') - add this string to the input string if the string was cut
     */
    return function (value, wordwise, max, tail) {
        if (!value) return '';

        max = parseInt(max, 10);
        if (!max || value.length <= max) return value;

        value = value.substr(0, max);
        if (wordwise) {
            var lastspace = value.lastIndexOf(' ');
            if (lastspace != -1) {
                value = value.substr(0, lastspace);
            }
        }

        return value + (tail || ' …');
    };

}]);

'use strict';

app.filter('unixTimestamp', [function () {

    return function(input) {
        return Date.parse(input);
    }

}]);

app.service('AuthService', ['RequestService', 'SessionService', '$rootScope', 'AUTH_EVENTS',
    function (RequestService, SessionService, $rootScope, AUTH_EVENTS) {

    this.login = function (credentials) {
        RequestService.post('users/login', credentials, function(res){
                SessionService.create(res.token, res.nick, res.email, res.role, res.profile_image);
                $rootScope.$broadcast(AUTH_EVENTS.loginSuccess, {nick: res.nick});
            }, function() {
                $rootScope.$broadcast(AUTH_EVENTS.loginFailed);
            }
        );
    };

    this.logout = function () {
        var credentials = {
            nick: SessionService.nick
        };

        RequestService.post('users/logout', credentials, function(res) {
                $rootScope.$broadcast(AUTH_EVENTS.logoutSuccess);
                SessionService.destroy();
            }, function(error) {
                $rootScope.$broadcast(AUTH_EVENTS.logoutFailed);
            }
        );
    };

    this.reloadLocalCredentials = function () {
        SessionService.reloadLocalCredentials();
    };

    this.isAuthenticated = function () {
        return !!SessionService.nick;
    };

    this.isAuthorized = function (authorizedRoles) {
        if (!angular.isArray(authorizedRoles)) {
            authorizedRoles = [authorizedRoles];
        }
        return (this.isAuthenticated() && authorizedRoles.indexOf(SessionService.getRole()) !== -1);
    };

    $rootScope.isAuthenticated = this.isAuthenticated;
    $rootScope.isAuthorized = this.isAuthorized;

}]);
app.service('CameraService',[function() {

    this.init = function(container) {
        this.camera = new THREE.PerspectiveCamera( 75, container[0].clientWidth / container[0].clientHeight, 0.1, 1000 );
        this.camera.position.y = 5;
        this.camera.lookAt(new THREE.Vector3(0,5,0));
        return this.camera;
    };

    this.rotate = function(val) {
        this.camera.rotation.y += val;
    };

    this.getLookAtVector = function() {
        var lookAtVector = new THREE.Vector3(0,0, -1);
        lookAtVector.applyQuaternion(this.camera.quaternion);
        return lookAtVector;
    };

    /**
     * returns point in specific distance to camera, in direction of the camera lookAt vector
     * @param distance
     * @returns {}
     */
    this.getLookAtPoint = function(distance) {
        var vector = new THREE.Vector3( 0, 0, (-distance || -20) );
        var axis = new THREE.Vector3( 0, 1, 0 );
        vector.applyAxisAngle( axis, this.camera.rotation._y );
        return vector;
    };

    this.getCamera = function() {
        return this.camera;
    };

    this.zoom = function(zoomFactor) {
        this.camera.fov *= zoomFactor;
        this.camera.updateProjectionMatrix();
    }


}]);
/*
 * @license
 * angular-modal v0.4.0
 * (c) 2013 Brian Ford http://briantford.com
 * License: MIT
 */

'use strict';

angular.module('btford.modal', []).
    factory('btfModal',['$animate', '$compile', '$rootScope', '$controller', '$q', '$http', '$templateCache', function ($animate, $compile, $rootScope, $controller, $q, $http, $templateCache) {
        return function modalFactory (config) {
            if (!(!config.template ^ !config.templateUrl)) {
                throw new Error('Expected modal to have exacly one of either `template` or `templateUrl`');
            }

            var template      = config.template,
                controller    = config.controller || angular.noop,
                controllerAs  = config.controllerAs,
                container     = angular.element(config.container || document.body),
                element       = null,
                dialogCounter = 0,
                html,
                scope;

            if (config.template) {
                var deferred = $q.defer();
                deferred.resolve(config.template);
                html = deferred.promise;
            } else {
                var deferred = $q.defer();
                deferred.resolve($templateCache.get(config.templateUrl));
                html = deferred.promise;
            }

            function activate (locals) {
                return html.then(function (html) {
                    if (!element) {
                        attach(html, locals);
                    }
                });
            }

            function setDialogCounter(value) {
                dialogCounter = value;

                if(dialogCounter > 0) {
                    angular.element(document.querySelectorAll('body, html')).addClass('has-open-dialog');
                } else {
                    angular.element(document.querySelectorAll('body, html')).removeClass('has-open-dialog');
                }
            }

            function attach (html, locals) {
                element = angular.element(html);
                if (element.length === 0) {
                    throw new Error('The template contains no elements; you need to wrap text nodes')
                }
                $animate.enter(element, container);
                scope = $rootScope.$new();
                scope.closeIt = deactivate;

                scope.checkCloseIt = function($event) {
                    var isDialogWrapper = angular.element($event.target).hasClass('dialog');
                    if(isDialogWrapper) {
                        scope.closeIt();
                    }
                };

                if (locals) {
                    for (var prop in locals) {
                        scope[prop] = locals[prop];
                    }
                }
                var ctrl = $controller(controller, { $scope: scope });
                if (controllerAs) {
                    scope[controllerAs] = ctrl;
                }
                $compile(element)(scope);

                setDialogCounter(++dialogCounter);
            }

            function deactivate () {
                setDialogCounter(--dialogCounter);

                var deferred = $q.defer();
                if (element) {
                    $animate.leave(element, function () {
                        scope.$destroy();
                        element = null;
                        deferred.resolve();
                    });
                } else {
                    deferred.resolve();
                }
                return deferred.promise;
            }

            function active () {
                return !!element;
            }

            return {
                activate: activate,
                deactivate: deactivate,
                active: active
            };
        };
    }]);

app.service('EditorService', ['$rootScope', 'PrimitiveObjectService', 'WindowResizeService', '$state', 'RequestService', '$stateParams', 'CameraService', 'HistoryService', 'LoadSceneService',
    function($rootScope, PrimitiveObjectService, WindowResizeService, $state, RequestService, $stateParams, CameraService, HistoryService, LoadSceneService) {


    var _this = this;

    /**
     * parse scene loaded from api
     * @param res
     */
    function resolveScene(scene) {
        _this.scene = scene;
        if ($rootScope.$root.$$phase != '$apply' && $rootScope.$root.$$phase != '$digest') {
            $rootScope.$apply();
        }
        _this.render();
    }

    //TODO: move to shortcutservice
    document.onkeydown = function(event) {
        if (event.keyCode == 37) {
            CameraService.rotate(Math.PI/200);
        }
        if (event.keyCode == 39) {
            CameraService.rotate(-(Math.PI/200));
        }
    }

    this.render = function() {
        if(Object.prototype.toString.call(_this.scene.traverse) === '[object Function]') {
            requestAnimationFrame( _this.render );
            _this.renderer.render( _this.scene, _this.camera );
        }
    };

    this.init = function(container){
        this.container = container;
        this.scene = {};
        this.camera = CameraService.init(this.container);
        this.renderer = new THREE.WebGLRenderer({
            precision: 'highp',
            antialias: true,
            alpha: true

        });
        this.renderer.setClearColor( 0x1C2229, 1);
        this.renderer.setSize( this.container[0].clientWidth, this.container[0].clientHeight );
        this.renderer.shadowMapEnabled = true;
        this.container[0].appendChild( this.renderer.domElement );

        WindowResizeService.init(this.renderer, this.camera, this.container[0]);
        var isTemplateScene = $state.current.name == 'template';
        var id = $stateParams['sceneId'] ? $stateParams['sceneId'] : $stateParams['templateId'];

        LoadSceneService.getScene(id, isTemplateScene, resolveScene);

//        if(isTemplateScene){
//            RequestService.post('templatescenes/specific', {scene_id: $stateParams['templateId']}, resolveScene);
//        } else {
//            RequestService.post('scenes/specific', {scene_id: $stateParams['sceneId']}, resolveScene);
//        }

    };

    this.zoomIn = function(zoomFactor){
        CameraService.zoom(zoomFactor);
    };

    this.getObjects = function(){
        return this.scene.children;
    };

    this.addNewPrimitive = function(type){
        var object = PrimitiveObjectService.getObject(type);
        this.scene.add(object);
        HistoryService.queue({
            message: 'object [' + type + '] added',
            uuid: object.uuid,
            callback: (function() {
                this.scene.remove(object);
            }).bind(this)
        });
    }

    this.remove = function(object){
        this.scene.remove(object);
        HistoryService.queue({
            message: 'object removed',
            uuid: object.uuid,
            callback: (function() {
                this.scene.add(object);
            }).bind(this)
        });
    }

}]);
app.service('EventService', ['RequestService', '$rootScope', 'AUTH_EVENTS', 'ModalService', '$state',
    function (RequestService, $rootScope, AUTH_EVENTS, ModalService, $state) {


        this.redirect = function (nick) {
            var redirectState = {
                name: 'user',
                params: {
                    username: nick
                }
            };
            if($rootScope.nextState){
                redirectState.name = $rootScope.nextState.next.name;
                redirectState.params = $rootScope.nextState.params;
            }
            $state.go(redirectState.name, redirectState.params, {reload: true});
        };

        this.redirectLandingPage = function() {
            $state.go('app');
        };

        this.saveNextState = function(next){
            $rootScope.nextState = next;
        };

        this.handleAuthorization = function(data){
            this.saveNextState(data);
            ModalService.openModal('login');
        };

        var that = this;
        $rootScope.$on(AUTH_EVENTS.notAuthenticated,  function(event,data){
            that.handleAuthorization(data);
        });
        $rootScope.$on(AUTH_EVENTS.notAuthorized, function(event,data){
            that.handleAuthorization(data);
        });
        $rootScope.$on(AUTH_EVENTS.sessionTimeout, function() {
            ModalService.openModal('login');
        });
        $rootScope.$on(AUTH_EVENTS.loginSuccess, function(event, data) {
            ModalService.closeModal('login');
            var nick = data ? data.nick : null;
            $rootScope.currentUser = nick;
            that.redirect(nick);
        });
        $rootScope.$on(AUTH_EVENTS.registerSuccess, function(event, data) {
            var nick = data ? data.nick : null;
            $rootScope.currentUser = nick;
            that.redirect(nick);
        });
        $rootScope.$on(AUTH_EVENTS.logoutSuccess, function(){
            $rootScope.currentUser = '';
            that.redirectLandingPage();
        });
    }]);
app.service('HistoryService',['$rootScope', function($rootScope) {

    this.history = [];
    this.changedObjectIds = [];

    /**
     * write new entry to history
     * @param newEntry {message, uuid, callback, (data)}
     */
    this.queue = function(newEntry) {
        if(this.changedObjectIds.indexOf(newEntry.uuid) == -1) {
            this.changedObjectIds.push(newEntry.uuid);
        }
        this.history.push(newEntry);
    };

    /**
     * go back one step in history
     */
    this.goBack = function() {
        if(this.history.length) {
            this.history.pop().callback();
        }
    };

    /**
     * returns if steps are left in the history
     * @returns {boolean}
     */
    this.stepsLeft = function(){
        return !!this.history.length;
    };

    /**
     * clear entire history
     */
    this.clearHistory = function() {
        this.history = [];
        this.changedObjectIds = [];
    };

    /**
     * clear only changed objectids
     */
    function clearObjectIds() {
        console.log('clearObjectIds');
        this.changedObjectIds = [];
    }

    $rootScope.$on('sceneSaved', clearObjectIds);

}]);
app.service('LoadSceneService', ['RequestService', 'PrimitiveObjectService', function (RequestService, PrimitiveObjectService) {

    var _this = this;

    /**
     * returns new default scene with lightning
     * @returns {Scene}
     */
    this.getNewScene = function(){
        var scene = new THREE.Scene();
        var light = PrimitiveObjectService.getObject('PointLight', {
            positionX: 0,
            positionY: 5,
            positionZ: 10
        });
        scene.add( light );
        return scene;
    };

    /**
     * loops over sceneobjects and gets three.js objects from PrimitiveObjectService
     * @param res
     * @param callback
     */
    this.resolve = function(res, callback) {

        var scene;
        if(res.data.length){
            scene = new THREE.Scene();
            var objectToAdd = {};
            res.data.forEach(function(sceneObject) {
                if(sceneObject.name != null) {
                    objectToAdd = PrimitiveObjectService.getObject(sceneObject.objecttype, sceneObject);
                    scene.add(objectToAdd);
                }
            });
        } else {
            scene = _this.getNewScene();
        }

        callback(scene);
    };

    /**
     * loads sceneObjects from backend
     * @param sceneId
     * @param isTemplateScene
     * @param callback
     */
    this.getScene = function(sceneId, isTemplateScene, callback) {
        RequestService.post('sceneobjects/get', {scene_id: sceneId, is_templatescene: isTemplateScene}, function(res) {
            _this.resolve(res, callback);
        }, function(error) {
            console.error(error);
        });
    }

}]);
app.service('ModalService',['$rootScope', 'btfModal', function($rootScope, btfModal) {

    var modals = {
        'login': btfModal({
            controller: 'LoginController',
            controllerAs: 'ctrl',
            templateUrl: 'partials/dialog/login.html'
        }),
        'error': btfModal({
            controller: 'ErrorController',
            controllerAs: 'ctrl',
            templateUrl: 'partials/dialog/error.html'
        }),
        'confirm': btfModal({
            controller: 'ConfirmController',
            controllerAs: 'ctrl',
            templateUrl: 'partials/dialog/confirm.html'
        }),
        'help': btfModal({
            controller: 'HelpController',
            controllerAs: 'ctrl',
            templateUrl: 'partials/dialog/help.html'
        }),
        'feedback': btfModal({
            controller: 'FeedbackController',
            controllerAs: 'ctrl',
            templateUrl: 'partials/dialog/feedback.html'
        }),
        'newProject': btfModal({
            controller: 'NewProjectController',
            controllerAs: 'ctrl',
            templateUrl: 'partials/dialog/newProject.html'
        }),
        'newScene': btfModal({
            controller: 'NewSceneController',
            controllerAs: 'ctrl',
            templateUrl: 'partials/dialog/newScene.html'
        }),
        'newSceneTemplate': btfModal({
            controller: 'NewSceneTemplateController',
            controllerAs: 'ctrl',
            templateUrl: 'partials/dialog/newSceneTemplate.html'
        }),
        'newAsset': btfModal({
            controller: 'NewAssetController',
            controllerAs: 'ctrl',
            templateUrl: 'partials/dialog/newAsset.html'
        }),
        'selectTexture': btfModal({
            controller: 'SelectTextureController',
            controllerAs: 'ctrl',
            templateUrl: 'partials/dialog/selectTexture.html'
        }),
        'newInteraction': btfModal({
            controller: 'NewInteractionController',
            controllerAs: 'ctrl',
            templateUrl: 'partials/dialog/newInteraction.html'
        })
    };

    this.openModal = function(modalName, data){
        if(!modals[modalName]){
            console.error('Modal "' + modalName + '" does not exist in ModalService');
        }
        modals[modalName].activate({data: data});
    };
    this.closeModal = function(modalName){
        if(!modals[modalName]){
            console.error('Modal does not exist in ModalService');
        }
        modals[modalName].deactivate();
    };

    $rootScope.openModal = this.openModal;
    $rootScope.closeModal = this.closeModal;


}]);
app.service('ObjectSelectionService',['$rootScope', 'EditorService', function($rootScope, EditorService) {


    this.init = function(container){
        //only suitable for editor
        var intersects;
        var vector = new THREE.Vector3();
        var raycaster = new THREE.Raycaster();
        var dir = new THREE.Vector3();




        container[0].addEventListener( 'click', function(event){

            if ( EditorService.camera instanceof THREE.OrthographicCamera ) {

                vector.set( ( event.clientX / container[0].clientWidth ) * 2 - 1, - ( (event.clientY - container[0].offsetTop) / container[0].clientHeight ) * 2 + 1, - 1 ); // z = - 1 important!

                vector.unproject( EditorService.camera );

                dir.set( 0, 0, - 1 ).transformDirection( EditorService.camera.matrixWorld );

                raycaster.set( vector, dir );

            } else if ( EditorService.camera instanceof THREE.PerspectiveCamera ) {

                vector.set( ( event.clientX / container[0].clientWidth ) * 2 - 1, - ( (event.clientY - container[0].offsetTop) / container[0].clientHeight ) * 2 + 1, 0.5 ); // z = 0.5 important!

                vector.unproject( EditorService.camera );

                raycaster.set( EditorService.camera.position, vector.sub( EditorService.camera.position ).normalize() );

            }

            intersects = raycaster.intersectObjects( EditorService.scene.children, true );

            if(intersects.length){
                $rootScope.$emit('objectSelected', intersects[0].object);
            }

        }, false );

        return this;
    }


}]);
app.service('PrimitiveObjectService',['RequestService', 'ENV_CONFIG', 'CameraService', 'SUPPORTED_OBJECTS', '$rootScope', function(RequestService, ENV_CONFIG, CameraService, SUPPORTED_OBJECTS, $rootScope) {

    /********************************** copy to player (objectLoader) **************************************************/
    this.getGeometry = function(type, properties) {
        switch(type) {
            case 'SphereGeometry':
                return new THREE.SphereGeometry(
                    properties.radius       || 1,
                    properties.widthSeg     || 100,
                    properties.heightSeg    || 100
                );
                break;
            case 'BoxGeometry':
                return new THREE.BoxGeometry(
                    properties.width        || 1,
                    properties.height       || 1,
                    properties.depth        || 1,
                    properties.widthSeg     || 1,
                    properties.heightSeg    || 1,
                    properties.depthSeg     || 1
                );
                break;
            case 'PlaneGeometry':
                return new THREE.PlaneGeometry(
                    properties.width        || 1,
                    properties.height       || 4,
                    properties.widthSeg     || 6,
                    properties.heightSeg    || 6
                );
                break;
            case 'CylinderGeometry':
                return new THREE.CylinderGeometry(
                    properties.radiusTop    || 1,
                    properties.radiusBottom || 1,
                    properties.height       || 5,
                    properties.radiusSeg    || 200,
                    properties.heightSeg    || 200
                );
                break;
        }
    };

    this.getMaterial = function() {
        var material = new THREE.MeshPhongMaterial( { ambient: 0x030303, color: 0x0088DA, specular: 0x000099, shininess: 30, shading: THREE.FlatShading, side: THREE.DoubleSide } );
        material.side = THREE.DoubleSide;
        material.transparent = true;
        return material;
    };

    this.setDefault = function(object) {
        if(CameraService) {
            var cameralookAt = CameraService.getLookAtPoint(20);
            object.position.x = cameralookAt.x;
            object.position.y = cameralookAt.y;
            object.position.z = cameralookAt.z;
            object.rotation.y = CameraService.getCamera().rotation.y;
        }
    };

    this.setPosition = function(object, properties) {
        if(typeof properties.positionX == 'number')
            object.position.set(properties.positionX, properties.positionY, properties.positionZ);
    };

    this.setRotation = function(object, properties) {
        if(typeof properties.rotationX == 'number')
            object.rotation.set(properties.rotationX, properties.rotationY, properties.rotationZ);
    };

    this.setScale = function(object, properties) {
        if(typeof properties.scaleX == 'number')
            object.scale.set(properties.scaleX, properties.scaleY, properties.scaleZ);
    };

    this.getObject = function(type, properties) {

        properties = typeof properties !== 'undefined' ? properties : {};

        if(type == 'PointLight'){
            return this.getLight(type, properties);
        }

        var object = new THREE.Mesh( this.getGeometry(type, properties), this.getMaterial(properties) );

        if(properties.material && properties.material.mapImage) {
            this.mapTexture(object, properties.material.mapImage, properties);
        }
        this.setDefault(object);
        this.setPosition(object, properties);
        this.setRotation(object, properties);
        this.setScale(object, properties);
        object.custom = {
            id: properties.id
        };
        if(properties && properties.interaction) {
            object.custom.interaction = JSON.parse(properties.interaction) || null;
        }
        return object;
    };

    this.getColor = function(hexString) {
        return 0xffffff; //TODO: get real color value from imported object
    };

    this.getLight = function(type, properties) {
        switch(type) {
            case 'PointLight':
                return new THREE.PointLight(
                    this.getColor(properties.hex),
                    properties.intensity || 1,
                    properties.distance  || 0
                );
                break;
        }
    };

    this.mapTexture = function(item, assetUrl, parameters){
        THREE.ImageUtils.crossOrigin = '';
        item.material = new THREE.MeshPhongMaterial( {
            side: THREE.DoubleSide,
            map: THREE.ImageUtils.loadTexture(ENV_CONFIG.assets + assetUrl)
        } );
        if(parameters && parameters.material && typeof parameters.material.mapOffsetX !== 'undefined'){
            item.material.map.offset.x = parameters.material.mapOffsetX;
            item.material.map.offset.y = parameters.material.mapOffsetY;
            item.material.map.repeat.x = parameters.material.mapRepeatX;
            item.material.map.repeat.y = parameters.material.mapRepeatY;
            item.material.wireframe    = parameters.material.mapWireframes;
            item.material.opacity      = parameters.material.opacity;
        }
        if ($rootScope && $rootScope.$$phase != '$apply' && $rootScope.$$phase != '$digest') {
            $rootScope.$apply();
        }
    };
    /************************************ /copy to player (objectLoader) ************************************************/

    this.getSupportedObjectTypes = function(){
        return SUPPORTED_OBJECTS;
    };

}]);
app.service('RequestService', ['$http', 'ENV_CONFIG', 'SessionService', 'ResponseErrorService', '$rootScope', function ($http, ENV_CONFIG, SessionService, ResponseErrorService, $rootScope) {
    /**
     * getCredentialsObject
     * e.g. getCredentialsObject()
     *
     * @return {Object}
     */
    function getCredentialsObject() {
        return {
            nick: SessionService.nick,
            token: SessionService.token
        };
    }
    /**
     * getPostFields
     * e.g. getPostFields()
     *
     * @return {Object}
     */
    function getPostFields (data) {
        return {
            user: getCredentialsObject(),
            data: data
        };
    }
    /**
     * RequestService.getFullActionUrl
     * e.g. RequestService.getFullActionUrl('users/login')
     *
     * @param {String} action e.g. 'users/login'
     *
     * @return {String}
     */
    function getFullActionUrl (action) {
        return ENV_CONFIG.api + '/' + action + '.json';
    }
    /**
     * RequestService.post
     * e.g. RequestService.post('users/login', {field: 'content'}, function callback(){}, function errorCallback(){})
     *
     * @param action {String} e.g. 'users/login'
     * @param data {Object} e.g. {field: 'content'}
     * @param callback {Function}
     * @param errorCallback {Function}
     */
    this.post = function(action, data, callback, errorCallback) {
        errorCallback = typeof errorCallback !== 'undefined' ? errorCallback : function(error) { console.log(error); };
        return $http
            .post(getFullActionUrl(action), getPostFields(data))
            .success(function(res) {
                callback(res);
            })
            .error(function(res, status) {
                errorCallback(data);
                ResponseErrorService.handle(res, status);
            });
    };
    /**
     * RequestService.get
     * e.g. RequestService.get('users/login', {field: 'content'}, function callback(){}, function errorCallback(){})
     *
     * NOTE: Auth is not supported with this function
     * It's barely used in this project
     *
     * @param action {String} e.g. 'users/login'
     * @param data {Object} e.g. {field: 'content'}
     * @param callback {Function}
     * @param errorCallback {Function}
     */
    this.get = function(action, data, callback, errorCallback) {
        errorCallback = typeof errorCallback !== 'undefined' ? errorCallback : function(error) { console.log(error); };
        return $http
            .get(getFullActionUrl(action), { params: data })
            .success(function(res){
                callback(res);
            })
            .error(function(res){
                errorCallback(res);
                ResponseErrorService.handle(data, status);
            });
    };
    /**
     * formDataAppender
     * e.g. formDataAppender(formData, val, key)
     *
     * Helper Function for module ng-file-upload
     *
     * TODO: Refactor to Recursive
     */
    function formDataAppender (formData, val, key) {
        if (angular.isObject(val)) {
            angular.forEach(val, function(val_in, key_in) {
                if(angular.isObject(val_in)) {
                    angular.forEach(val_in, function(val_in_in, key_in_in) {
                        formData.append(key + '[' + key_in + '][' + key_in_in + ']', val_in_in);
                    });
                } else {
                    formData.append(key + '[' + key_in + ']', val_in);
                }
            });
        } else {
            formData.append(key, val);
        }
    }
    /**
     * getUploadConfig
     * e.g. getUploadConfig(data)
     *
     */
    function getUploadConfig(data, settings) {
        return {
            options: {
                url: getFullActionUrl(settings.apiEndPoint),
                paramName: settings.paramName,
                maxFiles: settings.maxFiles
            },
            eventHandlers: {
                sending: function (file, xhr, formData) {
                    var fields = getPostFields(data);
                    angular.forEach(fields, function(val, key) {
                        formDataAppender(formData, val, key);
                    });
                },
                success: function (file, res) {
                    $rootScope.$broadcast(settings.broadcastDomain, res.data);
                }
            }
        };
    }
    /**
     * RequestService.upload
     * e.g. RequestService.upload(scope, element)
     *
     */
    this.upload = function(scope, element) {
        var config = getUploadConfig(scope.uploadData, scope.uploadSettings);
        var dropzone = new Dropzone(element[0], config.options);

        angular.forEach(config.eventHandlers, function (handler, event) {
            dropzone.on(event, handler);
        });
    };

}]);
app.service('ResponseErrorService', ['SessionService', 'ModalService', '$rootScope', 'AUTH_EVENTS', '$state', function (SessionService, ModalService, $rootScope, AUTH_EVENTS, $state) {


    /* $rootScope.$broadcast({
     401: AUTH_EVENTS.notAuthenticated,
     403: AUTH_EVENTS.notAuthorized,
     419: AUTH_EVENTS.sessionTimeout,
     440: AUTH_EVENTS.sessionTimeout
     */

    function okCallback() {}

    function unhandledError(data) {
        data.okCallback = okCallback;
        ModalService.openModal('error', data);
    }

    function sessionExpired(data) {
        data.okCallback = okCallback;
        SessionService.destroy();
        ModalService.openModal('login', data);
    }

    var errorActions = {
        400: unhandledError,
        401: sessionExpired,
        default: unhandledError
    };

    var ignoredStates = [404];

    this.handle = function(res, status) {
        if(ignoredStates[status]) return;
        var action = errorActions[status] || errorActions.default;
        var data = res.error || {};
        action(data);
    };

}]);
app.service('SaveSceneService', ['$rootScope', 'EditorService', 'RequestService', 'ENV_CONFIG', '$state', function ($rootScope, EditorService, RequestService, ENV_CONFIG, $state) {

    var _this = this;

    /**
     * returns objecttype of sceneObject
     * @param object
     * @returns {*}
     */
    this.getObjectType = function(object) {
        if(object.type !== 'Mesh') return object.type;
        return object.geometry && object.geometry.type;
    };

    /**
     * set values all objects have in common
     * @param reducedObject
     * @param object
     */
    this.setGeneralValues = function(reducedObject, object) {
        angular.extend(reducedObject, {
            id:         object.custom && object.custom.id || undefined,
            objecttype: this.getObjectType(object),
            name:       object.name,
            positionX:  object.position.x,
            positionY:  object.position.y,
            positionZ:  object.position.z,
            rotationX:  object.rotation.x,
            rotationY:  object.rotation.y,
            rotationZ:  object.rotation.z,
            scaleX:     object.scale.x,
            scaleY:     object.scale.y,
            scaleZ:     object.scale.z
        });
    };

    this.getMapImage = function(object) {
        if(object.material.map && object.material.map.image) {
            return object.material.map.image.currentSrc.replace(ENV_CONFIG.assets, '');
        }
        return null;
    };

    this.setMaterial = function(reducedObject, object) {
        angular.extend(reducedObject, {
            material: {
                name:           object.material.name,
                color:          object.material.color.getHexString(),
                mapImage:       this.getMapImage(object),
                mapOffsetX:     object.material.map && object.material.map.offset.x,
                mapOffsetY:     object.material.map && object.material.map.offset.y,
                mapRepeatX:     object.material.map && object.material.map.repeat.x,
                mapRepeatY:     object.material.map && object.material.map.repeat.y,
                ambient:        object.material.ambient.getHexString(),
                specular:       object.material.specular.getHexString(),
                shininess:      object.material.shininess,
                shading:        object.material.shading,
                side:           object.material.side,
                mapWireframes:  object.material.wireframe,
                opacity:        object.material.opacity
            }
        });
    };

    this.setCustomProperties = function(reducedObject, object) {
        angular.extend(reducedObject, object.custom);
        if(reducedObject.interaction) {
            reducedObject.interaction = JSON.stringify(reducedObject.interaction);
        }
    };

    this.getReducedObject = function(object) {
        var reducedObject = {};
        this.setGeneralValues(reducedObject, object);

        if(object.type == 'Mesh') this.setMaterial(reducedObject, object);

        if(object.custom) this.setCustomProperties(reducedObject, object);

        if(reducedObject.objecttype == 'BoxGeometry') {
            angular.extend(reducedObject, {
                width:  object.geometry.parameters.width,
                height: object.geometry.parameters.height,
                depth:  object.geometry.parameters.depth,
                widthSeg:  object.geometry.widthSegments,
                heightSeg: object.geometry.heightSegments,
                depthSeg:  object.geometry.depthSegments
            });
        }
        if(reducedObject.objecttype == 'PlaneGeometry') {
            angular.extend(reducedObject, {
                width:  object.geometry.parameters.width,
                height: object.geometry.parameters.height,
                widthSeg:  object.geometry.widthSegments,
                heightSeg: object.geometry.heightSegments
            });
        }
        if(reducedObject.objecttype == 'SphereGeometry') {
            angular.extend(reducedObject, {
                radius:  object.geometry.parameters.radius,
                widthSeg:  object.geometry.widthSegments,
                heightSeg: object.geometry.heightSegments
            });
        }
        if(reducedObject.objecttype == 'CylinderGeometry') {
            angular.extend(reducedObject, {
                radiusTop:  object.geometry.parameters.radiusTop,
                radiusBottom:  object.geometry.parameters.radiusBottom,
                height:  object.geometry.parameters.height,
                heightSeg:  object.geometry.heightSegments,
                radiusSeg: object.geometry.radiusSegments
            });
        }
        if(reducedObject.objecttype == 'PointLight') {
            angular.extend(reducedObject, {
                hex:  object.color.getHexString(),
                intensity: object.intensity,
                distance: object.distance
            });
        }

        return reducedObject;
    };

    this.save = function(sceneId){
        var changedObjects = [];
        EditorService.getObjects().forEach(function(object) {
           changedObjects.push(_this.getReducedObject(object));
        });
        console.log(changedObjects);
        var isTemplateScene = $state.current.name == 'template';
        RequestService.post('sceneobjects/update', {scene_id: sceneId, is_templatescene: isTemplateScene, sceneobjects: JSON.stringify(changedObjects)}, function(res) {
                $rootScope.$broadcast('sceneSaved');
            }, function(error) {
                console.log(error);
            }
        );
    };

}]);
app.service('SessionService', ['USER_ROLES', '$crypto', '$rootScope', function (USER_ROLES, $crypto, $rootScope) {

    this.token = null;
    this.nick = null;
    this.email = null;
    this.userRole = USER_ROLES.guest;
    this.profileImage = null;

    var _this = this;

    this.create = function (token, nick, email, userRole, profileImage) {
        this.token = token;
        this.nick = nick;
        this.email = email;
        this.userRole = userRole;
        this.profileImage = profileImage;

        this.setLocalCredentials();
    };

    this.destroy = function () {
        this.token = null;
        this.nick = null;
        this.email = null;
        this.userRole = USER_ROLES.guest;

        this.removeLocalCredentials();
    };

    this.getUser = function () {
        return {
            token: this.token,
            nick: this.nick,
            email: this.email,
            userRole: this.userRole,
            profileImage: this.profileImage
        }
    };

    this.isAdmin = function () {
        return _this.userRole == USER_ROLES.admin;
    };

    this.getRole = function () {
        return this.userRole;
    };

    this.renewLocalCredentials = function() {
        this.removeLocalCredentials();
        this.setLocalCredentials();
    };

    this.setLocalCredentials = function () {
        var userData = JSON.stringify(this.getUser());

        var encrypted = $crypto.encrypt(userData, '360crd');
        localStorage.setItem('blick-ls', encrypted);
    };

    this.getLocalCredentials = function () {
        var encrypted = localStorage.getItem('blick-ls');

        if(!encrypted) {
            return false;
        }

        var decrypted = $crypto.decrypt(encrypted, '360crd');
        return JSON.parse(decrypted);
    };

    this.removeLocalCredentials = function () {
        localStorage.removeItem('blick-ls');
    };

    this.reloadLocalCredentials = function () {
        var localCredentials = this.getLocalCredentials();

        if(localCredentials) {
            this.create(localCredentials.token, localCredentials.nick, localCredentials.email, localCredentials.userRole, localCredentials.profileImage);
        }
    };

    $rootScope.$on('updatedUserImage', (function(event, data) {
        this.profileImage = data.profile_image;
        this.renewLocalCredentials();
    }).bind(this));

    return this;
}]);
app.service('WindowResizeService',[ function() {

    this.init = function(renderer, camera, container){
        var callback	= function(){
            // notify the renderer of the size change
//            renderer.setSize( container.clientWidth, container.clientHeight );
            // update the camera
            camera.aspect	= container.clientWidth / container.clientHeight;
            camera.updateProjectionMatrix();
        }
        // bind the resize event
        window.addEventListener('resize', callback, false);
        // return .stop() the function to stop watching window resize
        return {
            /**
             * Stop watching window resize
             */
            stop	: function(){
                window.removeEventListener('resize', callback);
            }
        };
    }


}]);
'use strict';

app.controller('LoginController', ['$scope', '$rootScope', 'AUTH_EVENTS', 'SessionService', 'AuthService', '$state', function ($scope, $rootScope, AUTH_EVENTS, SessionService, AuthService, $state) {

    var isLoginTemplate = $state.current.name == 'login';
    if(isLoginTemplate && AuthService.isAuthenticated()) {
        $rootScope.$broadcast(AUTH_EVENTS.loginSuccess, {nick: SessionService.nick});
    }

    $scope.credentials = {
        nick: '',
        password: ''
    };

    $scope.login = function (credentials) {

        AuthService.login(credentials);
    };
}]);

'use strict';

app.controller('RegisterController', ['$scope', '$rootScope', 'AUTH_EVENTS', 'RequestService', 'SessionService', '$state', function ($scope, $rootScope, AUTH_EVENTS, RequestService, SessionService, $state) {

    var isRegisterTemplate = $state.current.name == 'register';
    if(isRegisterTemplate && $rootScope.isAuthenticated()) {
        $rootScope.$broadcast(AUTH_EVENTS.loginSuccess, {nick: SessionService.nick});
    }

    $scope.credentials = {};

    $scope.close = function (val) {

    };

    $scope.register = function (credentials) {
        RequestService.post('users/register', credentials, function(res){
            SessionService.create(res.token, res.nick, res.email, 'editor');
            $rootScope.$broadcast(AUTH_EVENTS.registerSuccess, {nick: res.nick});
        }, function () {
            $rootScope.$broadcast(AUTH_EVENTS.registerFailed);
        });
    };
}]);

'use strict';

app.controller('ResetController', ['$scope', '$rootScope', 'AUTH_EVENTS', 'SessionService', 'RequestService', '$location', '$state', function ($scope, $rootScope, AUTH_EVENTS, SessionService, RequestService, $location, $state) {

    var isResetTemplate = $state.current.name == 'reset';
    if(isResetTemplate && $rootScope.isAuthenticated()) {
        $rootScope.$broadcast(AUTH_EVENTS.loginSuccess, {nick: SessionService.nick});
    }

    $scope.credentials = {
        email: '',
        password: null
    };

    $scope.states = {
        resetRequest: {
            showSuccessMessage: false,
            showErrorMessage: false,
            showForm: true
        },
        resetConfirm: {
            showSuccessMessage: false,
            showErrorMessage: false,
            showForm: false
        }
    };

    $scope.reset = function (credentials) {
        RequestService.post('users/send_reset_pw', credentials, function(res) {
                $scope.states.resetRequest.showForm = false;
                $scope.states.resetRequest.showSuccessMessage = true;
                $scope.states.resetRequest.showErrorMessage = false;
            },
            function(error) {
                $scope.states.resetRequest.showErrorMessage = true;
            }
        );
    };

    // TODO: handle conflict on repeated request
    $scope.confirm = function(credentials) {

        var data = {
            password: $scope.credentials.password,
            password_conf: $scope.credentials.password,
            reset_token: $location.search().token
        };

        RequestService.post('users/reset_pw', data, function(res) {
                $scope.states.resetConfirm.showForm = false;
                $scope.states.resetConfirm.showSuccessMessage = true;
                $scope.states.resetConfirm.showErrorMessage = false;
            },
            function(error) {
                console.log(error);
                $scope.states.resetConfirm.showErrorMessage = true;
            }
        );
    };

    $scope.redirectProfile = function() {
        console.log('redirect');
    };

    if($location.search().token) {
        $scope.states.resetRequest.showForm = false;
        $scope.states.resetConfirm.showForm = true;
    }

}]);

'use strict';

app.controller('ConfirmController', ['$scope', function ($scope) {
    $scope.message = $scope.data.message;
    $scope.title = $scope.data.title;

    $scope.confirmCallback = function () {
        $scope.data.confirmCallback && $scope.data.confirmCallback();
    };

    $scope.cancelCallback = function () {
        $scope.data.cancelCallback && $scope.data.cancelCallback();
    };

}]);


'use strict';

app.controller('ErrorController', ['$scope', function ($scope) {
    $scope.message = $scope.data.error || 'Unexpected Error';
    $scope.title = $scope.data.title || '';

    $scope.okCallback = function () {
        $scope.data.okCallback && $scope.data.okCallback();
    };

}]);


'use strict';

app.controller('NewAssetController', ['$scope', '$stateParams', function ($scope, $stateParams) {
    $scope.currentProjectId = $stateParams['projectId'];
    if(!$scope.data) $scope.data = {};

    $scope.modalHeader = $scope.data.modalHeader || 'New Asset';

    $scope.upload = {
        settings: {
            broadcastDomain: $scope.data.broadcastDomain || 'newAsset',
            apiEndPoint: $scope.data.apiEndPoint || 'projects/assets/create',
            paramName: $scope.data.paramName || 'data[asset][file]',
            maxFiles: $scope.data.maxFiles || 10
        },
        data: $scope.data.uploadData || {project: {id: $scope.currentProjectId}}
    };

}]);
'use strict';

app.controller('NewProjectController', ['$scope', 'RequestService', '$rootScope', function ($scope, RequestService, $rootScope) {

    $scope.newProject = {
        title: null,
        description: null,
        is_private: true
    };

    $scope.createNewProject = function() {
        RequestService.post('projects/create', {project: $scope.newProject}, function (res) {
                $rootScope.$broadcast('newProject', res.data);
            }, function (error) {
                console.log(error);
            }
        );
    };

}]);

'use strict';

app.controller('NewSceneController', ['$scope', 'RequestService', '$stateParams', '$rootScope',
    function ($scope, RequestService, $stateParams, $rootScope) {

    $scope.currentProjectId = $stateParams['projectId'];
    $scope.currentTemplateId = null;
    $scope.sceneTemplates = [];

    function getAllTemplates() {
        RequestService.post('templatescenes/all', {}, function (res) {
                $scope.sceneTemplates = res.data;
            }, function (error) {
                console.log(error);
            }
        );
    }

    getAllTemplates();

    $scope.onTemplateSelect = function(id){
        $scope.currentTemplateId = id;
    };

    $scope.newScene = {
        title: null,
        description: null
    };

    $scope.createNewScene = function(){
        var data = {
            project: {id: $scope.currentProjectId},
            scene: {
                title: $scope.newScene.title,
                template_id: $scope.currentTemplateId
            }
        };

        if($scope.newScene.title){
            RequestService.post('scenes/create', data, function(res) {
                    $rootScope.$broadcast('newScene', res.data);
                }, function(error) {
                    console.log(error);
                }
            );
        }
    }
}]);

'use strict';

app.controller('ProjectAssetsController', ['$scope', '$stateParams', 'ENV_CONFIG', 'RequestService', '$rootScope', '$state', 'ModalService', function ($scope, $stateParams, ENV_CONFIG, RequestService, $rootScope, $state, ModalService) {
    $scope.username = $stateParams.username;
    var projectId = $stateParams['projectId'];

    $scope.getAssetBackgroundImage = function getAssetBackgroundImage(asset) {
        return {
            'background-image': 'url(' + ENV_CONFIG.assets + asset.file.url + ')'
        };
    };

    $scope.assets = [];

    function getAllAssets() {
        RequestService.post('projects/assets/get_from_project', {project: {id: $stateParams['projectId']}}, function(res) {
                $scope.assets = res.data;
            }, function(error) {
                console.log(error);
            }
        );
    }

    getAllAssets();

    $scope.settingsAsset = function() {
        $state.go('user.project.assets.settings', {assetId: item.id});
    };

    $scope.deleteAsset = function(asset) {
        var confirmCallback = function() {
            RequestService.post('projects/assets/delete', {asset: {id: asset.id}}, function(res) {
                    $rootScope.$broadcast('removeAsset', asset);;
                }, function(error) {
                    console.log(error);
                }
            );
        };

        ModalService.openModal('confirm', {
            title: 'Delete Asset?',
            message: 'Delete Asset? This action cannot be revoked.',
            confirmCallback: confirmCallback,
            cancelCallback: function() {}
        });
    };

    $rootScope.$on('removeAsset', function(event, data) {
        $scope.assets.splice($scope.assets.indexOf(data), 1);
    });

    $rootScope.$on('newAsset', function(event, data) {
        $scope.assets.push(data);
    });

    $scope.onOrderSelect = function(id) {
        $scope.order.predicate = predicateOptions[id];
    };

    var predicateOptions = ['updated_at', 'title'];

    $scope.order = {
        reverse: true,
        predicate: predicateOptions[0],
        items: [
            {
                id: 0,
                title: 'Most Recent'
            }, {
                id: 1,
                title: 'Title'
            }
        ]
    };

    var editOptions = {
        'settings': $scope.settingsAsset,
        'delete': $scope.deleteAsset
    };

    $scope.onEditSelect = function(id, item) {
        editOptions[id](item);
    };

    $scope.edit = {
        items: [
            {
                id: 'settings',
                title: 'Settings',
                icon: 'fa-gear'
            }, {
                id: 'delete',
                title: 'Delete',
                icon: 'fa-trash-o'
            }
        ]
    };

}]);

'use strict';

app.controller('ProjectAssetsSettingsController', ['$scope', '$stateParams', 'RequestService', '$rootScope', 'ENV_CONFIG', function ($scope, $stateParams, RequestService, $rootScope, ENV_CONFIG) {


}]);

'use strict';

app.controller('ProjectController', ['$scope', '$stateParams', 'RequestService', function ($scope, $stateParams, RequestService) {
    $scope.username = $stateParams['username'];
    $scope.projectId = $stateParams['projectId'];

}]);

'use strict';

app.controller('ProjectScenesController', ['$scope', '$stateParams', 'RequestService', '$rootScope', '$state', 'ModalService', function ($scope, $stateParams, RequestService, $rootScope, $state, ModalService) {
    $scope.username = $stateParams.username;
    $scope.projectId = $stateParams.projectId;

    $scope.scenes = [];

    function getAllScenes() {
        RequestService.post('scenes/get_scenes', {project: {id: $stateParams['projectId']}}, function(res) {
                $scope.scenes = res.data;
            }, function(error) {
                console.log(error);
            }
        );
    }

    getAllScenes();

    $scope.settingScene = function(item) {
        $state.go('user.project.scenes.settings', {sceneId: item.id});
    };

    $scope.deleteScene = function(scene) {
        var confirmCallback = function() {
            RequestService.post('scenes/delete', {scene: {id: scene.id}}, function(res) {
                    $rootScope.$broadcast('removeScene', scene);
                }, function(error) {
                    console.log(error);
                }
            );
        };

        ModalService.openModal('confirm', {
            title: 'Delete Scene?',
            message: 'Delete Scene? This action cannot be revoked.',
            confirmCallback: confirmCallback,
            cancelCallback: function() {}
        });
    };

    $rootScope.$on('removeScene', function(event, data){
        $scope.scenes.splice($scope.scenes.indexOf(data), 1);
    });

    $rootScope.$on('newScene', function(event, data){
        $scope.scenes.push(data);
    });

    $scope.onOrderSelect = function(id) {
        $scope.order.predicate = predicateOptions[id];
    };

    var predicateOptions = ['updated_at', 'title'];

    $scope.order = {
        reverse: true,
        predicate: predicateOptions[0],
        items: [
            {
                id: 0,
                title: 'Most Recent'
            }, {
                id: 1,
                title: 'Title'
            }
        ]
    };

    var editOptions = {
        'delete': $scope.deleteScene,
        'settings': $scope.settingScene
    };

    $scope.onEditSelect = function(id, item) {
        editOptions[id](item);
    };

    $scope.edit = {
        items: [
            {
                id: 'settings',
                title: 'Settings',
                icon: 'fa-gear'
            }, {
                id: 'delete',
                title: 'Delete',
                icon: 'fa-trash-o'
            }
        ]
    };

}]);

'use strict';

app.controller('ProjectSceneSettingsController', ['$scope', '$stateParams', 'RequestService', '$rootScope', 'ENV_CONFIG', function ($scope, $stateParams, RequestService, $rootScope, ENV_CONFIG) {


}]);

'use strict';

app.controller('ProjectSettingsController', ['$scope', '$stateParams', 'RequestService', '$rootScope', 'ENV_CONFIG', function ($scope, $stateParams, RequestService, $rootScope, ENV_CONFIG) {
    $scope.username = $stateParams.username;
    $scope.projectId = $stateParams.projectId;

    $scope.uploadOptions = {
        broadcastDomain: 'updatedProjectPreviewImage',
        apiEndPoint: 'projects/update',
        paramName: 'data[project][preview_image]',
        uploadData: {project: {id: $scope.projectId}},
        modalHeader: 'New Preview Image'
    };

    $rootScope.$on('updatedProjectPreviewImage', function(event, data) {
        console.log('new project image:', data);
        $scope.project.preview_image = data.preview_image;
    });

    RequestService.post('projects/specific', {project_id: $scope.projectId}, function(res) {
            $scope.project = res.data;
        }, function(error) {
            console.log(error);
        }
    );

    $scope.updateProjectSettings = function($event) {
        $event.stopPropagation();

        var data = {
            project: {
                id: $scope.project.id,
                title: $scope.project.title,
                description: $scope.project.description
            }
        };
        RequestService.post('projects/update', data, function(res) {
              $scope.project = res.data;
            }, function(error) {
                console.log(error);
            }
        );
    };

    $scope.exports = [];

    $scope.startDownload = function(item) {
        window.open(ENV_CONFIG.assets + item.path.slice(6, item.path.length), 'Download');
    };

    $scope.generateExport = function($event) {
        $event.stopPropagation();

        RequestService.post('projects/export/zip', {project: {id: $scope.projectId}}, function(res) {
                $rootScope.$broadcast('newExport', res.data.exportZipModel);
            }, function(error) {
                console.log(error);
            }
        );
    };

    $rootScope.$on('newExport', function(event, data) {
        console.log(data);
        $scope.exports.push(data);
    });

    RequestService.post('projects/export/get_zip_files', {project: {id: $scope.projectId}}, function(res) {
            $scope.exports = res.data.userZipFiles;
        }, function(error) {
            console.log(error);
        }
    );

}]);

'use strict';

app.controller('NewSceneTemplateController', ['$scope', 'RequestService', '$rootScope', function ($scope, RequestService, $rootScope) {

    $scope.newSceneTemplate = {
        title: null,
        description: null
    };

    $scope.createNewSceneTemplate = function() {
        RequestService.post('templatescenes/create', {scene: {title: $scope.newSceneTemplate.title}}, function (res) {
                $rootScope.$broadcast('newTemplate', res.data);
            }, function (error) {
                console.log(error);
            }
        );
    };

}]);

'use strict';

app.controller('SceneTemplatesController', ['$scope', '$rootScope', '$stateParams', 'RequestService', function ($scope, $rootScope, $stateParams, RequestService) {
    $scope.username = $stateParams.username;

    $scope.sceneTemplates = [];

    function getAllTemplates() {
        RequestService.post('templatescenes/all', {}, function (res) {
                $scope.sceneTemplates = res.data;
            }, function (error) {
                console.log(error);
            }
        );
    }

    getAllTemplates();

    $scope.renameTemplate = function() {
        // TODO: implement
        console.log('not implemented.');
    };

    $scope.deleteTemplate = function(scene) {
        RequestService.post('templatescenes/delete', {scene: {id: scene.id}}, function (res) {
                $rootScope.$broadcast('removeTemplate', scene);
            }, function (error) {
                console.log(error);
            }
        );
    };

    $rootScope.$on('removeTemplate', function(event, data) {
        $scope.sceneTemplates.splice($scope.sceneTemplates.indexOf(data), 1);
    });

    $rootScope.$on('newTemplate', function(event, data) {
        $scope.sceneTemplates.push(data);
    });

    $scope.onOrderSelect = function(id) {
        $scope.order.predicate = predicateOptions[id];
    };

    var predicateOptions = ['updated_at', 'title'];

    $scope.order = {
        reverse: true,
        predicate: predicateOptions[0],
        items: [
            {
                id: 0,
                title: 'Most Recent'
            }, {
                id: 1,
                title: 'Title'
            }
        ]
    };

    var editOptions = {
        'delete': $scope.deleteTemplate,
        'rename': $scope.renameTemplate
    };

    $scope.onEditSelect = function(id, item) {
        editOptions[id](item);
    };

    $scope.edit = {
        items: [
            {
                id: 'delete',
                title: 'Delete',
                icon: 'fa-trash-o'
            }, {
                id: 'rename',
                title: 'Rename',
                icon: 'fa-pencil'
            }
        ]
    };

}]);


'use strict';

app.controller('AccountSettingsController', ['$scope', '$stateParams', function ($scope, $stateParams) {
    $scope.username = $stateParams.username;
}]);

'use strict';

app.controller('UserController', ['$scope', '$stateParams', function ($scope, $stateParams) {
    $scope.username = $stateParams.username;
}]);
'use strict';

app.controller('UserProjectsController', ['$scope', '$stateParams', 'RequestService', 'ModalService', '$rootScope', '$state', function ($scope, $stateParams, RequestService, ModalService, $rootScope, $state) {
    $scope.username = $stateParams['username'];

    $scope.projects = [];

    function getAllProjects() {
        RequestService.post('projects/get_projects', {user_nick: $scope.username}, function (res) {
                $scope.projects = res.data;
            }, function (error) {
                console.log(error);
            }
        );
    }

    getAllProjects();

    $scope.settingsProject = function(item) {
        $state.go('user.project.settings', {projectId: item.id});
    };

    $scope.deleteProject = function(project) {
        var confirmCallback = function() {
            RequestService.post('projects/delete', {project: {id: project.id}}, function (res) {
                    $rootScope.$broadcast('removeProject', project);
                 }, function (error) {
                    console.log(error);
                 }
             );
        };

        ModalService.openModal('confirm', {
            title: 'Delete Project?',
            message: 'Deleting this project will also delete all related Assets and Settings. This action cannot be revoked.',
            confirmCallback: confirmCallback,
            cancelCallback: function() {}
        });
    };

    $rootScope.$on('removeProject', function(event, data) {
        $scope.projects.splice($scope.projects.indexOf(data), 1);
    });

    $rootScope.$on('newProject', function(event, data) {
        $scope.projects.push(data);
    });

    $scope.onOrderSelect = function(id) {
        $scope.order.predicate = predicateOptions[id];
    };

    var predicateOptions = ['updated_at', 'title'];

    $scope.order = {
        reverse: true,
        predicate: predicateOptions[0],
        items: [
            {
                id: 0,
                title: 'Most Recent'
            }, {
                id: 1,
                title: 'Title'
            }
        ]
    };

    var editOptions = {
        'settings': $scope.settingsProject,
        'delete': $scope.deleteProject
    };

    $scope.onEditSelect = function(id, item) {
        editOptions[id](item);
    };

    $scope.edit = {
        items: [
            {
                id: 'settings',
                title: 'Settings',
                icon: 'fa-gear'
            }, {
                id: 'delete',
                title: 'Delete',
                icon: 'fa-trash-o'
            }
        ]
    };

}]);


'use strict';

app.controller('UserSettingsController', ['$scope', 'SessionService', 'RequestService', '$rootScope', 'ENV_CONFIG', function ($scope, SessionService, RequestService, $rootScope, ENV_CONFIG) {

    $scope.user = {
        nick: SessionService.nick,
        email: SessionService.email,
        profileImage: ENV_CONFIG.assets + SessionService.profileImage
    };

    $scope.uploadOptions = {
        broadcastDomain: 'updatedUserImage',
        apiEndPoint: 'users/update',
        paramName: 'data[profile_image]',
        uploadData: {},
        modalHeader: 'New Profile Image',
        maxFiles: 1
    };

    $rootScope.$on('updatedUserImage', function(event, data) {
        $scope.user.profileImage = ENV_CONFIG.assets + data.profile_image;
    });

    $scope.updateUserSettings = function($event) {

    };
}]);

app.directive('editorObject', ['$rootScope', 'EditorService', '$stateParams', function ($rootScope, EditorService, $stateParams) {
    return {
        restrict: 'E',
        templateUrl: 'partials/editor/editorObject.html',
        replace: true,
        link: function(scope, elem, attrs) {

            scope.isTemplateScene = !!$stateParams['templateId'];

            scope.$on('getEditorObject', function(mass, callback) {
                callback(scope.item);
            });

            $rootScope.$on('objectSelected', function(event, object) {
                if(scope.item.id == object.id){
                    scope.isActive = true;
                    if(!scope.item.detailsOpen && !elem.hasClass('active')) {
                        scope.item.detailsOpen = true;
                    }
                }else{
                    scope.isActive = false;
                }

                //avoid collision with angulars digest cycle
                if (scope.$root.$$phase != '$apply' && scope.$root.$$phase != '$digest') {
                    scope.$apply();
                }
            });

            scope.setActive = function() {
                if(scope.isActive){
                    scope.item.detailsOpen = !scope.item.detailsOpen;
                }
                $rootScope.$emit('objectSelected', scope.item);
            };

            scope.remove = function(object) {
                EditorService.remove(object);
            };

        }
    };
}]);
app.directive('historyInput',['HistoryService', '$timeout', function(HistoryService, $timeout) {
    return {
        require: 'ngModel',
        restrict: 'A',
        scope: {
            ngModel: '='
        },
        link: function(scope, element, attrs) {

            scope.writeToHistory = function() {

                //get editorObject of which the property was changed
                scope.$emit('getEditorObject', function(editorObject) {
                    scope.editorObject = editorObject
                });

                //cancel timeout to prevent duplicated writing to history
                $timeout.cancel( scope.timer );

                if(scope.oldValue != scope.ngModel || scope.oldValue == 'undefined') {
                    HistoryService.queue({
                        message: scope.editorObject.name + ' changed',
                        uuid: scope.editorObject.uuid,
                        data: scope.oldValue,
                        callback: function() {
                            scope.ngModel = this.data;
                        }
                    });
                    scope.oldValue = scope.ngModel;
                }
            };

            /**
             * save old value before input
             */
            element.bind('focus', function() {
                scope.oldValue = scope.ngModel;
            });

            /**
             * write to history after 2s when a value was changed
             */
            element.bind('change', function() {
                $timeout.cancel( scope.timer );
                scope.timer = $timeout(scope.writeToHistory, 2000);
            });

            element.bind('blur', scope.writeToHistory);

            /**
             * destroy timer when element is removed
             */
            scope.$on('$destroy', function() {
                    $timeout.cancel( scope.timer );
                }
            );

        }
    }
}]);

app.directive('interaction',[function() {

    return {
        restrict: 'E',
        replace: true,
        templateUrl: 'partials/editor/interaction.html',
        scope: {
            item: "="
        },
        link: function(scope) {

        }
    };
}]);
app.directive('customNgModel',['$timeout', function($timeout) {
    return {
        restrict: 'A',
        scope: {
            model: "="
        },
        link: function(scope, element) {
            $timeout(function() {
                $(element).on('input', function() {
                    scope.model = $(this).val();
                    if (scope.$$phase != '$apply' && scope.$$phase != '$digest') {
                        scope.$apply();
                    }
                })
            });
            scope.$watch('model', function(val) {
                    $(element).val(val);
            })
        }
    };
}]);

app.directive('minMaxValue',[function() {

    return {
        restrict: 'E',
        replace: true,
        templateUrl: 'partials/editor/minMaxValue.html',
        scope: {
            title: "@",
            item: "=",
            step: "@stepSize",
            min: "@minimum",
            max: "@maximum",
            measure: "@measure"
        },
        link: function(scope) {

            //required for numeric binding
            if (scope.item && typeof scope.item == 'string') {
                scope.item = parseFloat(scope.item);
            }
            scope.$watch('item', function(val) {
                if (typeof val == 'string') {
                    scope.item = parseFloat(val);
                }
            });
        }
    };
}]);
app.directive('texture',[ function() {

    return {
        restrict: 'E',
        replace: true,
        templateUrl: 'partials/editor/texture.html',
        scope: {
            title: "@",
            item: "="
        },
        link: function(scope) {
        }
    };
}]);
app.directive('xyzInput',[ function() {

    return {
        restrict: 'E',
        replace: true,
        templateUrl: 'partials/editor/xyzInput.html',
        scope: {
            title: "@",
            icon: "@",
            item: "="
        },
        link: function(scope) {


        }
    };
}]);
'use strict';

  app.controller('EditorController', ['$scope', '$rootScope', 'AuthService', 'EditorService', 'PrimitiveObjectService', '$stateParams', '$state', 'RequestService', 'HistoryService', 'SaveSceneService',
      function ($scope, $rootScope, AuthService, EditorService, PrimitiveObjectService, $stateParams, $state, RequestService, HistoryService, SaveSceneService) {

      $scope.projectId = $stateParams['projectId'];
      $scope.username = $stateParams['username'];

      $scope.hiddenTypes = {
          'Line':               true,
          'PointLight':         true,
          'HemisphereLight':    true,
          'PerspectiveCamera':  true
      };


      $scope.zoomIn = function(){
          EditorService.zoomIn(0.9);
      };
      $scope.zoomOut = function(){
          EditorService.zoomIn(1.1);
      };

      $scope.goBack = function(){
          HistoryService.goBack();
      };

      $scope.save = function(){
            var id = $stateParams['sceneId'] ? $stateParams['sceneId'] : $stateParams['templateId'];
            SaveSceneService.save(id);
      };

      $scope.addNewObject = function(type){
          EditorService.addNewPrimitive(type);
      };

      $scope.getSceneObjects = function(){
          return EditorService.getObjects();
      };


      $scope.getSupportedPrimitiveObjects = function(){
          return PrimitiveObjectService.getSupportedObjectTypes();
      }

  }]);


'use strict';

  app.controller('NewInteractionController', ['$scope', '$stateParams', 'SUPPORTED_INTERACTIONS', 'RequestService', function ($scope, $stateParams, SUPPORTED_INTERACTIONS, RequestService) {

      $scope.projectId = $stateParams['projectId'];
      $scope.username = $stateParams['username'];

      $scope.interactions = SUPPORTED_INTERACTIONS;

      $scope.interactionParameters = {
          'scene': null,
          'object': null,
          'effectIn': null,
          'effectOut': null
      };

      /**
       * transform interactions to array with necessary parameters
       * @returns {Array}
       */
      function getInteractionList() {
          var interactions = [];
          for(var key in SUPPORTED_INTERACTIONS) {
              if ( SUPPORTED_INTERACTIONS.hasOwnProperty(key) ) {
                  interactions.push({
                      id: key,
                      title: SUPPORTED_INTERACTIONS[key].title
                  })
              }
          }
          return interactions;
      }
      $scope.interactionsList = getInteractionList();
      $scope.currentInteractionId = null;

      /**
       * reduce scene object - fix for angular bug TODO: find clean solution
       * @returns {Array}
       */
      function getreducedSceneObjects() {
          var objects = $scope.data.item.parent.children;
          var reducedObjects = [];
          for(var i = 0; i < objects.length; i++) {
              if(objects[i].type === 'Mesh' && objects[i].id !== $scope.data.item.id) {
                  reducedObjects.push({
                      id: objects[i].id,
                      title: 'Mesh ' + objects[i].id
                  })
              }
          }
          return reducedObjects;
      }
      $scope.sceneObjects = getreducedSceneObjects();
      $scope.currentObjectId = $scope.data.item.id;

      $scope.currentSceneId = $stateParams['sceneId'];

      RequestService.post('scenes/get_scenes', {project: {id: $stateParams['projectId']}}, function(res) {
              $scope.scenes = res.data;
          }, function(error) {
              console.log(error);
          }
      );
      /**
       * checks if property needs to be shown for specific interaction
       * @param type
       * @returns {boolean}
       */
      $scope.isNeededParameter = function(type) {
          var currentInteraction = $scope.interactions[$scope.currentInteractionId];
          return !!(currentInteraction && currentInteraction.parameters && currentInteraction.parameters.indexOf(type) !== -1);
      };

      $scope.onInteractionSelect = function(id) {
          $scope.currentInteractionId = id;
      };

      $scope.onParameterSelect = function(val, type){
          $scope.interactionParameters[type] = val;
      };

      /**
       * returns parameters needed for specific interaction
       * @param type
       * @returns {*}
       */
      $scope.getInteractionParameters = function(type) {
          if(!$scope.interactions[type].parameters){
              return null;
          }
          var parameters = {};
          $scope.interactions[type].parameters.forEach(function(prop) {
              if($scope.interactionParameters[prop] !== null) {
                parameters[prop] = $scope.interactionParameters[prop];
              }
          });
          return parameters;
      };

      $scope.addInteraction = function() {
          var interactionObject = {
              type: $scope.currentInteractionId,
              parameters: $scope.getInteractionParameters($scope.currentInteractionId)
          };
          if(!$scope.data.item.custom) $scope.data.item.custom = {};
          $scope.data.item.custom.interaction = interactionObject;
      }

  }]);


'use strict';

  app.controller('SelectTextureController', ['$scope', '$stateParams', 'PrimitiveObjectService', 'RequestService', function ($scope, $stateParams, PrimitiveObjectService, RequestService) {

      $scope.projectId = $stateParams['projectId'];
      $scope.username = $stateParams['username'];

      $scope.onAssetSelect = function(id){
          $scope.currentAssetId = id;
      };

      $scope.assets = [];

      function getAllAssets() {
          RequestService.post('projects/assets/get_from_project', {project: {id: $stateParams['projectId']}}, function(res) {
                  $scope.assets = res.data;
              }, function(error) {
                  console.log(error);
              }
          );
      }

      getAllAssets();

      //TODO: not really nice, refactor when proper asset functions are available
      function getAssetUrl(assetId){
          return $scope.assets.filter(function(asset) {
              return asset.id === assetId;
          })[0].file.url;
      }

      $scope.selectTexture = function(){
          PrimitiveObjectService.mapTexture($scope.data.item, getAssetUrl($scope.currentAssetId));
      }

  }]);

